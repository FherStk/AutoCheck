# Copyright Â© 2020 Fernando Porrino Serrano
# Third party software licenses can be found at /docs/credits/thirdparties.md

# This file is part of AutoCheck.

# AutoCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AutoCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with AutoCheck.  If not, see <https://www.gnu.org/licenses/>.

#TODO: complete documentation with DocFX, commands and combination will be specidied as postgres documentation does (same syntax)
name: "USER FRIENDLY NAME"  #DEFAULT = "Current file's name": This script name will be displayed to the user (if needed).
caption: "CAPTION"          #DEFAULT = "Running script {$SCRIPT_NAME}:": Message to display before every execution (batch or single).

vars:   #OPTIONAL: Custom global vars can be defined here and refered later as $VARNAME, allowing regex and string formatters.
  #Predefined vars that can be used when needed: 
  #   $SCRIPT_NAME:       The current script name. 
  #   $SCRIPT_CAPTION:    The current script caption. 
  #   $BATCH_CAPTION:     The current script batch caption (only on batch mode). 
  #   $APP_FOLDER:        The root app execution folder. 
  #   $EXECUTION_FOLDER:  The current script execution folder. 
  #   $CURRENT_FOLDER:    The current script folder for single-typed scripts (the same as "folder"); can change during the execution for batch-typed scripts with the folder used to extract, restore a database, etc.
  #   $CURRENT_FILE:      The current script file for single-typed scripts; can change during the execution for batch-typed scripts with the file used to extract, restore a database, etc.
  #   $CURRENT_QUESTION:  The current question (and subquestion) number (1, 2, 2.1, etc.)
  #   $CURRENT_SCORE:     The current question (and subquestion) score.
  #   $CURRENT_HOST:      The IP value for the current execution (the same as "ip"); can change during the execution for batch-typed scripts.
  #   $CURRENT_TARGET:    The host or folder where the script is running on batch mode ($CURRENT_HOST or $CURRENT_FOLDER)
  #   $MAX_SCORE:         The maximum score available.
  #   $TOTAL_SCORE:       The computed total score, it will be updated for each question close.
  #   $RESULT:            Last run command result.
  #   $NOW:               The current datetime.  

  #Custom example vars:
  #   var1: "VALUE1"
  #   var1: "This is a sample text including {$VAR1} and also {$VAR2}"
  #   var3: "{#regex$VARNAME}"
  #   var4: !!bool False
  #   varN: #Any previous combinations

  #Scopes:
  #   Vars can be setup within different scopes, and its life-time will be linked with its scope; 
  #   var1:  "Value1.1" #Declares a var1 within the current scope or updates the current value
  #   $var1: "Value1.2" #Does not declares but updates var1 value on the first predecesor scope where the var has been found.
  #   When requesting a var value (for example: {$var1}) the scope-nearest one will be retreived, so shadowed vars will be not accessible (designed as is to reduce the scope logic complexity, simple workarounds can be used as store the value locally before shadowing or just use another var name to avoid shadowing).

pre:    #OPTIONAL: Defined blocks will be executed (in order) before the body.
  - extract:            #OPTIONAL: Extract a compressed file from "folder" (only zip is supported).
      file: "*"         #DEFAULT = "*.zip": Search patthern used to find files for extraction, OS file naming convetions allowed (name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove the original file when extracted.
      recursive: True   #DEFAULT = "False": Repeat through folders.

  - restore_db:         #OPTIONAL: Restores a database using an sql dump file from folder (only PostgreSQL is supported).
      file: "*"         #DEFAULT = "*.sql": Search patthern used to find files to restore, OS file naming convetions allowed (name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove the original file when restored.
      recursive: True   #DEFAULT = "False": Repeat through folders.
      db_host: "DBHOST" #DEFAULT = "localhost": Host name or IP address.
      db_user: "DBUSER" #DEFAULT = "postgres": Postgre's username.
      db_pass: "DBPASS" #DEFAULT = "postgres": Postgre's password.
      db_name: "DBNAME" #DEFAULT = "$SCRIPT_NAME": Database name
      override: True    #DEFAULT = "False": Overrides the DB if exists.      

  - upload_gdrive:      #OPTIONAL: Uploads a file from "folder" to Google Drive.
      source: "*"       #DEFAULT = "*": Search patthern used to find files or folders to upload, OS file naming convetions allowed (name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove local files and folders when restored.
      recursive: True   #DEFAULT = "False": Repeat through folders    
      link: False       #DEFAULT = "False": A link to the source file will be extracted from text file's content
      copy: True        #DEFAULT = "True": The source file will be copied directly to gdrive (when possible) instead of downloaded and re-uploaded        
      account: "ACC"    #DEFAULT = "config\\gdrive_account.txt": Username used to login into the own's Google Drive account.
      secret: "SECRET"  #DEFAULT = "config\\gdrive_secret.json": The "client_secret.json" file that will be used to login into the own's Google Drive account (it can be generated through the Google API Console services).
      remote_path: "\\" #DEFAULT = "\\AutoCheck\\scripts\\{$SCRIPT_NAME}\\": Where to upload the files; the remote folders will be created if needed and files, if no filename has been specified, will be auto-named using the original names when possible.
  
post:   #OPTIONAL: Defined blocks will be executed (in order) after the body; same blocks as "pre" are allowed.

body:   #OPTIONAL: Script body
  - vars:                 #OPTIONAL: Same as vars defined within root level, but as local-scope vars; useful to store command results or other stuff.

  - connector:            #OPTIONAL: Defines a connector to use, it can be defined wherever inside the body (usually inside a question's content).
      type: "TYPE"        #DEFAULT = "LOCAL_SHELL": Connector to use.
      name: "NAME"        #DEFAULT = "TYPE": Name that will be used by a "run" to launch a connector's command.
      arguments: "ARGS"   #OPTIONAL: As terminal app will do (--arg1 val1 --arg2 val2 ... --argN valN); can be requested within the script as $CONNECTOR_NAME.ARGUMENT_NAME.
      #arguments:                    Also typed arguments list are allowed:
        #arg1: "Value"                  String           
        #arg2: !!bool True              Boolean
        #arg3: !!int 27                 Integer
        #arg4: !!float 2.1              Float
        #arg5:                          Typed array (all items must be of the same type)
        # - item: !!int 1
        # - item: !!int 3
        # - item: !!int 0
        #   ...
        #arg6:                          Typed dictionary (all keys must be of the same type, all values must be of the same type).
        # - item:
        #     key:   "key1"
        #     value: "value1"
        # - item:
        #     key:   "key2"
        #     value: "value2"
        #   ...
        #argN: "ValN"
  
  - run:                          #OPTIONAL:  Runs a command, it can be used wherever inside the body (usually inside a question's content).
      caption: "CAPTION"          #OPTIONAL:  Running with no caption means working in silent mode and, if run is performed within a question, wont compute the result because computing hidden results can be confuse when reading a report.
      connector: "NAME"           #OPTIONAL:  Which connector will be used to run the command. If no connector has been defined within this "run", the nearest within the scope will be looked for (and envelopping scopes recursively) and, if no connector is found, a "LOCALSHELL" one will be used.
      command: "COMMAND"          #MANDATORY: The command to run, the result will be stored as $RESULT; can be a shell command if no connector has been specified.
      arguments: "ARGS"           #OPTIONAL:  Same as "connector" ones (also typed arguments list are allowed).            
      expected: "EXPECTED"        #OPTIONAL:  Expected value from the run command, which can be variables, typed data (for example: True; 75.7; "Example"), a regular expression (for example: {#regex$VARNAME}) or even a SQL-like (for example: >=75.1; %substring%; %endwith; LIKE %{#regex$CURRENT_FOLDER}%). Arrays can be also checked with: LENGTH =x; CONTAINS >=x; UNORDEREDEQUALS [x,y,z]; ORDEREDEQUALS [x,y,z]. When not defined, all results will compute as a success; when working on silent mode (with no caption), an exception will be thrown on mismatch (onexception wont applicate). Warning: no AND/OR combinations still supported.
      success: "OK"               #DEFAULT = "OK": If a caption has been defined, this message witll be shown if the executed command result matches with the expected one.
      error: "ERROR"              #DEFAULT = "ERROR": If a caption has been defined, this message witll be shown if the executed command result mismatches with the expected one; it will be followed by a list of errors found.
      onexception: "BEHAVIOUR"    #DEFAULT = "ERROR": Determines the behaviour on exception when running a command; allowed values are [SUCCESS; ERROR; ABORT; SKIP]. Only works when a caption has been defined (otherwise has no sense, because no-caption and no-expected never will throw any exception or compute in any way).
      store:  "VAR_NAME"          #OPTIONAL:  The value of $RESULT will be stored into a new var (VAR_NAME will be used) or into an existing one within the current scope (MY_VAR) or within the above ones ($MY_VAR).

  - question:                     #OPTIONAL: Question to test; can be repeated.
      score: !!float 1            #DEFAULT = "1": Question socre, ignored if subquestions are used (question within question).
      caption: "CAPTION"          #DEFAULT = "Question {$CURRENT_QUESTION} [{$CURRENT_SCORE}]:": Question caption.
      description: "DESCRIPTION"  #OPTIONAL:  Question description, it will be displayed after the question caption.
      content:                    #MANDATORY: What to test within the question., all must be ok to compute the score; cannot be mandatory due subquestion behaviour; can be repeated.            
        - vars:                   #OPTIONAL:  Same as "vars" defined within "body", but as local-scope vars; useful to store command results or other stuff.
        - connector:              #OPTIONAL:  A connector can be also defined here; see "connector" definition within "body".
        - question:               #OPTIONAL:  A sub-question can also be defined here (parent score will be updated as the summary of its children); see "question" definition within "body".
        - run:                    #OPTIONAL:  Same as "run" defined within "body", but all the executed commands within a question's content must succeed (no execution errors and result matching the expected value) in order to compute the entire score.        