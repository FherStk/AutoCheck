### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Utils
  commentId: T:AutoCheck.Core.Utils
  id: Utils
  parent: AutoCheck.Core
  children:
  - AutoCheck.Core.Utils.AppFolder
  - AutoCheck.Core.Utils.ConfigFile(System.String)
  - AutoCheck.Core.Utils.ConfigFolder
  - AutoCheck.Core.Utils.CurrentOS
  - AutoCheck.Core.Utils.DataBaseNameToStudentName(System.String)
  - AutoCheck.Core.Utils.ExecutionFolder
  - AutoCheck.Core.Utils.FolderNameToDataBase(System.String,System.String)
  - AutoCheck.Core.Utils.FolderNameToStudentName(System.String)
  - AutoCheck.Core.Utils.PathToCurrentOS(System.String)
  - AutoCheck.Core.Utils.PathToRemoteOS(System.String,AutoCheck.Core.Utils.OS)
  - AutoCheck.Core.Utils.RemoveDiacritics(System.String)
  - AutoCheck.Core.Utils.RunWithRetry``1(System.Action,System.Int32,System.Int32)
  - AutoCheck.Core.Utils.RunWithRetry``2(System.Func{``0},System.Int32,System.Int32)
  - AutoCheck.Core.Utils.TempFolder
  - AutoCheck.Core.Utils.ToCamelCase(System.String)
  langs:
  - csharp
  - vb
  name: Utils
  nameWithType: Utils
  fullName: AutoCheck.Core.Utils
  type: Class
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Utils
    path: ../core/main/Utils.cs
    startLine: 27
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  syntax:
    content: public static class Utils
    content.vb: Public Module Utils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: AutoCheck.Core.Utils.AppFolder
  commentId: P:AutoCheck.Core.Utils.AppFolder
  id: AppFolder
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: AppFolder
  nameWithType: Utils.AppFolder
  fullName: AutoCheck.Core.Utils.AppFolder
  type: Property
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: AppFolder
    path: ../core/main/Utils.cs
    startLine: 40
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the current app root folder\n"
  example: []
  syntax:
    content: public static string AppFolder { get; }
    parameters: []
    return:
      type: System.String
      description: A folder&apos;s path.
    content.vb: Public Shared ReadOnly Property AppFolder As String
  overload: AutoCheck.Core.Utils.AppFolder*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AutoCheck.Core.Utils.ExecutionFolder
  commentId: P:AutoCheck.Core.Utils.ExecutionFolder
  id: ExecutionFolder
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: ExecutionFolder
  nameWithType: Utils.ExecutionFolder
  fullName: AutoCheck.Core.Utils.ExecutionFolder
  type: Property
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecutionFolder
    path: ../core/main/Utils.cs
    startLine: 51
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the current app execution folder\n"
  example: []
  syntax:
    content: public static string ExecutionFolder { get; }
    parameters: []
    return:
      type: System.String
      description: A folder&apos;s path.
    content.vb: Public Shared ReadOnly Property ExecutionFolder As String
  overload: AutoCheck.Core.Utils.ExecutionFolder*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AutoCheck.Core.Utils.ConfigFolder
  commentId: P:AutoCheck.Core.Utils.ConfigFolder
  id: ConfigFolder
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: ConfigFolder
  nameWithType: Utils.ConfigFolder
  fullName: AutoCheck.Core.Utils.ConfigFolder
  type: Property
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ConfigFolder
    path: ../core/main/Utils.cs
    startLine: 61
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the current app config folder\n"
  example: []
  syntax:
    content: public static string ConfigFolder { get; }
    parameters: []
    return:
      type: System.String
      description: A folder&apos;s path.
    content.vb: Public Shared ReadOnly Property ConfigFolder As String
  overload: AutoCheck.Core.Utils.ConfigFolder*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AutoCheck.Core.Utils.TempFolder
  commentId: P:AutoCheck.Core.Utils.TempFolder
  id: TempFolder
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: TempFolder
  nameWithType: Utils.TempFolder
  fullName: AutoCheck.Core.Utils.TempFolder
  type: Property
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: TempFolder
    path: ../core/main/Utils.cs
    startLine: 71
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the current app config folder\n"
  example: []
  syntax:
    content: public static string TempFolder { get; }
    parameters: []
    return:
      type: System.String
      description: A folder&apos;s path.
    content.vb: Public Shared ReadOnly Property TempFolder As String
  overload: AutoCheck.Core.Utils.TempFolder*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AutoCheck.Core.Utils.CurrentOS
  commentId: P:AutoCheck.Core.Utils.CurrentOS
  id: CurrentOS
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: CurrentOS
  nameWithType: Utils.CurrentOS
  fullName: AutoCheck.Core.Utils.CurrentOS
  type: Property
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: CurrentOS
    path: ../core/main/Utils.cs
    startLine: 81
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the current OS host type (Windows; Mac; GNU/Linux)\n"
  example: []
  syntax:
    content: public static Utils.OS CurrentOS { get; }
    parameters: []
    return:
      type: AutoCheck.Core.Utils.OS
      description: ''
    content.vb: Public Shared ReadOnly Property CurrentOS As Utils.OS
  overload: AutoCheck.Core.Utils.CurrentOS*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: AutoCheck.Core.Utils.ToCamelCase(System.String)
  commentId: M:AutoCheck.Core.Utils.ToCamelCase(System.String)
  id: ToCamelCase(System.String)
  isExtensionMethod: true
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: ToCamelCase(String)
  nameWithType: Utils.ToCamelCase(String)
  fullName: AutoCheck.Core.Utils.ToCamelCase(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ToCamelCase
    path: ../core/main/Utils.cs
    startLine: 93
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nConverts the string to its camelcase convention.\n"
  example: []
  syntax:
    content: public static string ToCamelCase(this string text)
    parameters:
    - id: text
      type: System.String
      description: The original input
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToCamelCase(text As String) As String
  overload: AutoCheck.Core.Utils.ToCamelCase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.RemoveDiacritics(System.String)
  commentId: M:AutoCheck.Core.Utils.RemoveDiacritics(System.String)
  id: RemoveDiacritics(System.String)
  isExtensionMethod: true
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: RemoveDiacritics(String)
  nameWithType: Utils.RemoveDiacritics(String)
  fullName: AutoCheck.Core.Utils.RemoveDiacritics(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: RemoveDiacritics
    path: ../core/main/Utils.cs
    startLine: 104
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReplaces the characters using diacritics with their equivalents without them (ñ->n; ü->u, etc.).\n"
  example: []
  syntax:
    content: public static string RemoveDiacritics(this string text)
    parameters:
    - id: text
      type: System.String
      description: The original string.
    return:
      type: System.String
      description: The replaced string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveDiacritics(text As String) As String
  overload: AutoCheck.Core.Utils.RemoveDiacritics*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.RunWithRetry``1(System.Action,System.Int32,System.Int32)
  commentId: M:AutoCheck.Core.Utils.RunWithRetry``1(System.Action,System.Int32,System.Int32)
  id: RunWithRetry``1(System.Action,System.Int32,System.Int32)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: RunWithRetry<T>(Action, Int32, Int32)
  nameWithType: Utils.RunWithRetry<T>(Action, Int32, Int32)
  fullName: AutoCheck.Core.Utils.RunWithRetry<T>(System.Action, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: RunWithRetry
    path: ../core/main/Utils.cs
    startLine: 130
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nRuns the given action and retries it only for the given exception type (use Exception for generic behaviour).\n"
  example: []
  syntax:
    content: >-
      public static void RunWithRetry<T>(Action action, int max = 10, int wait = 250)
          where T : Exception
    parameters:
    - id: action
      type: System.Action
      description: The action to run.
    - id: max
      type: System.Int32
      description: Max retries.
    - id: wait
      type: System.Int32
      description: Retry time will be exponential as step*wait.
    typeParameters:
    - id: T
    content.vb: Public Shared Sub RunWithRetry(Of T As Exception)(action As Action, max As Integer = 10, wait As Integer = 250)
  overload: AutoCheck.Core.Utils.RunWithRetry*
  nameWithType.vb: Utils.RunWithRetry(Of T)(Action, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AutoCheck.Core.Utils.RunWithRetry(Of T)(System.Action, System.Int32, System.Int32)
  name.vb: RunWithRetry(Of T)(Action, Int32, Int32)
- uid: AutoCheck.Core.Utils.RunWithRetry``2(System.Func{``0},System.Int32,System.Int32)
  commentId: M:AutoCheck.Core.Utils.RunWithRetry``2(System.Func{``0},System.Int32,System.Int32)
  id: RunWithRetry``2(System.Func{``0},System.Int32,System.Int32)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: RunWithRetry<R, T>(Func<R>, Int32, Int32)
  nameWithType: Utils.RunWithRetry<R, T>(Func<R>, Int32, Int32)
  fullName: AutoCheck.Core.Utils.RunWithRetry<R, T>(System.Func<R>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: RunWithRetry
    path: ../core/main/Utils.cs
    startLine: 143
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nRuns the given action and retries it only for the given exception type (use Exception for generic behaviour).\n"
  example: []
  syntax:
    content: >-
      public static R RunWithRetry<R, T>(Func<R> function, int max = 10, int wait = 250)
          where R : class where T : Exception
    parameters:
    - id: function
      type: System.Func{{R}}
    - id: max
      type: System.Int32
      description: Max retries.
    - id: wait
      type: System.Int32
      description: Retry time will be exponential as step*wait.
    typeParameters:
    - id: R
    - id: T
    return:
      type: '{R}'
    content.vb: Public Shared Function RunWithRetry(Of R As Class, T As Exception)(function As Func(Of R), max As Integer = 10, wait As Integer = 250) As R
  overload: AutoCheck.Core.Utils.RunWithRetry*
  nameWithType.vb: Utils.RunWithRetry(Of R, T)(Func(Of R), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AutoCheck.Core.Utils.RunWithRetry(Of R, T)(System.Func(Of R), System.Int32, System.Int32)
  name.vb: RunWithRetry(Of R, T)(Func(Of R), Int32, Int32)
- uid: AutoCheck.Core.Utils.PathToCurrentOS(System.String)
  commentId: M:AutoCheck.Core.Utils.PathToCurrentOS(System.String)
  id: PathToCurrentOS(System.String)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: PathToCurrentOS(String)
  nameWithType: Utils.PathToCurrentOS(String)
  fullName: AutoCheck.Core.Utils.PathToCurrentOS(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PathToCurrentOS
    path: ../core/main/Utils.cs
    startLine: 163
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns a path that uses the directory separators of the current OS.\n"
  example: []
  syntax:
    content: public static string PathToCurrentOS(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: System.String
      description: A path.
    content.vb: Public Shared Function PathToCurrentOS(path As String) As String
  overload: AutoCheck.Core.Utils.PathToCurrentOS*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.PathToRemoteOS(System.String,AutoCheck.Core.Utils.OS)
  commentId: M:AutoCheck.Core.Utils.PathToRemoteOS(System.String,AutoCheck.Core.Utils.OS)
  id: PathToRemoteOS(System.String,AutoCheck.Core.Utils.OS)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: PathToRemoteOS(String, Utils.OS)
  nameWithType: Utils.PathToRemoteOS(String, Utils.OS)
  fullName: AutoCheck.Core.Utils.PathToRemoteOS(System.String, AutoCheck.Core.Utils.OS)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PathToRemoteOS
    path: ../core/main/Utils.cs
    startLine: 174
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns a path that uses the directory separators of the remote OS.\n"
  example: []
  syntax:
    content: public static string PathToRemoteOS(string path, Utils.OS remoteOS)
    parameters:
    - id: path
      type: System.String
    - id: remoteOS
      type: AutoCheck.Core.Utils.OS
    return:
      type: System.String
      description: A path.
    content.vb: Public Shared Function PathToRemoteOS(path As String, remoteOS As Utils.OS) As String
  overload: AutoCheck.Core.Utils.PathToRemoteOS*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.ConfigFile(System.String)
  commentId: M:AutoCheck.Core.Utils.ConfigFile(System.String)
  id: ConfigFile(System.String)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: ConfigFile(String)
  nameWithType: Utils.ConfigFile(String)
  fullName: AutoCheck.Core.Utils.ConfigFile(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ConfigFile
    path: ../core/main/Utils.cs
    startLine: 185
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the requested app config file\n"
  example: []
  syntax:
    content: public static string ConfigFile(string file)
    parameters:
    - id: file
      type: System.String
    return:
      type: System.String
      description: A file&apos;s path.
    content.vb: Public Shared Function ConfigFile(file As String) As String
  overload: AutoCheck.Core.Utils.ConfigFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.FolderNameToDataBase(System.String,System.String)
  commentId: M:AutoCheck.Core.Utils.FolderNameToDataBase(System.String,System.String)
  id: FolderNameToDataBase(System.String,System.String)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: FolderNameToDataBase(String, String)
  nameWithType: Utils.FolderNameToDataBase(String, String)
  fullName: AutoCheck.Core.Utils.FolderNameToDataBase(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: FolderNameToDataBase
    path: ../core/main/Utils.cs
    startLine: 195
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nGiven a folder name, returns a database name using the student&apos;s name, but only if it follows the naming convention &apos;prefix_STUDENT&apos;.\n"
  example: []
  syntax:
    content: public static string FolderNameToDataBase(string folder, string prefix = "database")
    parameters:
    - id: folder
      type: System.String
      description: The folder name name, it must follows the naming convention &apos;prefix_STUDENT&apos;.
    - id: prefix
      type: System.String
      description: The database name prefix.
    return:
      type: System.String
      description: A database name like &apos;prefix_STUDENT&apos;
    content.vb: Public Shared Function FolderNameToDataBase(folder As String, prefix As String = "database") As String
  overload: AutoCheck.Core.Utils.FolderNameToDataBase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.DataBaseNameToStudentName(System.String)
  commentId: M:AutoCheck.Core.Utils.DataBaseNameToStudentName(System.String)
  id: DataBaseNameToStudentName(System.String)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: DataBaseNameToStudentName(String)
  nameWithType: Utils.DataBaseNameToStudentName(String)
  fullName: AutoCheck.Core.Utils.DataBaseNameToStudentName(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: DataBaseNameToStudentName
    path: ../core/main/Utils.cs
    startLine: 204
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nExtracts the student&apos;s name from de database&apos;s name, but only if it follows the naming convention &apos;prefix_STUDENT&apos;.\n"
  example: []
  syntax:
    content: public static string DataBaseNameToStudentName(string database)
    parameters:
    - id: database
      type: System.String
      description: The database name, it must follows the naming convention &apos;prefix_STUDENT&apos;.
    return:
      type: System.String
      description: The student&apos;s name.
    content.vb: Public Shared Function DataBaseNameToStudentName(database As String) As String
  overload: AutoCheck.Core.Utils.DataBaseNameToStudentName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: AutoCheck.Core.Utils.FolderNameToStudentName(System.String)
  commentId: M:AutoCheck.Core.Utils.FolderNameToStudentName(System.String)
  id: FolderNameToStudentName(System.String)
  parent: AutoCheck.Core.Utils
  langs:
  - csharp
  - vb
  name: FolderNameToStudentName(String)
  nameWithType: Utils.FolderNameToStudentName(String)
  fullName: AutoCheck.Core.Utils.FolderNameToStudentName(System.String)
  type: Method
  source:
    remote:
      path: core/main/Utils.cs
      branch: v2.7.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: FolderNameToStudentName
    path: ../core/main/Utils.cs
    startLine: 214
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nGiven a folder name, returns the student&apos;s name, but only if it follows the naming convention &apos;prefix_STUDENT&apos;.\n"
  example: []
  syntax:
    content: public static string FolderNameToStudentName(string folder)
    parameters:
    - id: folder
      type: System.String
      description: The folder name name, it must follows the naming convention &apos;prefix_STUDENT&apos;.
    return:
      type: System.String
      description: The student&apos;s name.
    content.vb: Public Shared Function FolderNameToStudentName(folder As String) As String
  overload: AutoCheck.Core.Utils.FolderNameToStudentName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core.Utils.AppFolder*
  commentId: Overload:AutoCheck.Core.Utils.AppFolder
  name: AppFolder
  nameWithType: Utils.AppFolder
  fullName: AutoCheck.Core.Utils.AppFolder
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Utils.ExecutionFolder*
  commentId: Overload:AutoCheck.Core.Utils.ExecutionFolder
  name: ExecutionFolder
  nameWithType: Utils.ExecutionFolder
  fullName: AutoCheck.Core.Utils.ExecutionFolder
- uid: AutoCheck.Core.Utils.ConfigFolder*
  commentId: Overload:AutoCheck.Core.Utils.ConfigFolder
  name: ConfigFolder
  nameWithType: Utils.ConfigFolder
  fullName: AutoCheck.Core.Utils.ConfigFolder
- uid: AutoCheck.Core.Utils.TempFolder*
  commentId: Overload:AutoCheck.Core.Utils.TempFolder
  name: TempFolder
  nameWithType: Utils.TempFolder
  fullName: AutoCheck.Core.Utils.TempFolder
- uid: AutoCheck.Core.Utils.CurrentOS*
  commentId: Overload:AutoCheck.Core.Utils.CurrentOS
  name: CurrentOS
  nameWithType: Utils.CurrentOS
  fullName: AutoCheck.Core.Utils.CurrentOS
- uid: AutoCheck.Core.Utils.OS
  commentId: T:AutoCheck.Core.Utils.OS
  parent: AutoCheck.Core
  name: Utils.OS
  nameWithType: Utils.OS
  fullName: AutoCheck.Core.Utils.OS
- uid: AutoCheck.Core.Utils.ToCamelCase*
  commentId: Overload:AutoCheck.Core.Utils.ToCamelCase
  name: ToCamelCase
  nameWithType: Utils.ToCamelCase
  fullName: AutoCheck.Core.Utils.ToCamelCase
- uid: AutoCheck.Core.Utils.RemoveDiacritics*
  commentId: Overload:AutoCheck.Core.Utils.RemoveDiacritics
  name: RemoveDiacritics
  nameWithType: Utils.RemoveDiacritics
  fullName: AutoCheck.Core.Utils.RemoveDiacritics
- uid: AutoCheck.Core.Utils.RunWithRetry*
  commentId: Overload:AutoCheck.Core.Utils.RunWithRetry
  name: RunWithRetry
  nameWithType: Utils.RunWithRetry
  fullName: AutoCheck.Core.Utils.RunWithRetry
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{{R}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<R>
  nameWithType: Func<R>
  fullName: System.Func<R>
  nameWithType.vb: Func(Of R)
  fullName.vb: System.Func(Of R)
  name.vb: Func(Of R)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: R
    nameWithType: R
    fullName: R
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: R
    nameWithType: R
    fullName: R
  - name: )
    nameWithType: )
    fullName: )
- uid: '{R}'
  commentId: '!:R'
  definition: R
  name: R
  nameWithType: R
  fullName: R
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: R
  commentId: '!:R'
  name: R
  nameWithType: R
  fullName: R
- uid: AutoCheck.Core.Utils.PathToCurrentOS*
  commentId: Overload:AutoCheck.Core.Utils.PathToCurrentOS
  name: PathToCurrentOS
  nameWithType: Utils.PathToCurrentOS
  fullName: AutoCheck.Core.Utils.PathToCurrentOS
- uid: AutoCheck.Core.Utils.PathToRemoteOS*
  commentId: Overload:AutoCheck.Core.Utils.PathToRemoteOS
  name: PathToRemoteOS
  nameWithType: Utils.PathToRemoteOS
  fullName: AutoCheck.Core.Utils.PathToRemoteOS
- uid: AutoCheck.Core.Utils.ConfigFile*
  commentId: Overload:AutoCheck.Core.Utils.ConfigFile
  name: ConfigFile
  nameWithType: Utils.ConfigFile
  fullName: AutoCheck.Core.Utils.ConfigFile
- uid: AutoCheck.Core.Utils.FolderNameToDataBase*
  commentId: Overload:AutoCheck.Core.Utils.FolderNameToDataBase
  name: FolderNameToDataBase
  nameWithType: Utils.FolderNameToDataBase
  fullName: AutoCheck.Core.Utils.FolderNameToDataBase
- uid: AutoCheck.Core.Utils.DataBaseNameToStudentName*
  commentId: Overload:AutoCheck.Core.Utils.DataBaseNameToStudentName
  name: DataBaseNameToStudentName
  nameWithType: Utils.DataBaseNameToStudentName
  fullName: AutoCheck.Core.Utils.DataBaseNameToStudentName
- uid: AutoCheck.Core.Utils.FolderNameToStudentName*
  commentId: Overload:AutoCheck.Core.Utils.FolderNameToStudentName
  name: FolderNameToStudentName
  nameWithType: Utils.FolderNameToStudentName
  fullName: AutoCheck.Core.Utils.FolderNameToStudentName
