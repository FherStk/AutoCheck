### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Connectors.Css
  commentId: T:AutoCheck.Core.Connectors.Css
  id: Css
  parent: AutoCheck.Core.Connectors
  children:
  - AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  - AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  - AutoCheck.Core.Connectors.Css.#ctor(System.String)
  - AutoCheck.Core.Connectors.Css.CssDoc
  - AutoCheck.Core.Connectors.Css.Dispose
  - AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,Dictionary{System.String,System.String})
  - AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String,System.String)
  - AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String[])
  - AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,Dictionary{System.String,System.String})
  - AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String,System.String)
  - AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String[])
  - AutoCheck.Core.Connectors.Css.PropertyExists(Dictionary{System.String,System.String})
  - AutoCheck.Core.Connectors.Css.PropertyExists(System.String,System.String)
  - AutoCheck.Core.Connectors.Css.PropertyExists(System.String[])
  - AutoCheck.Core.Connectors.Css.Raw
  - AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C
  langs:
  - csharp
  - vb
  name: Css
  nameWithType: Css
  fullName: AutoCheck.Core.Connectors.Css
  type: Class
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Css
    path: ../core/connectors/Css.cs
    startLine: 36
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nAllows in/out operations and/or data validations with CSS files.\n"
  example: []
  syntax:
    content: 'public class Css : Base'
    content.vb: >-
      Public Class Css
          Inherits Base
  inheritance:
  - System.Object
  - AutoCheck.Core.Connectors.Base
  inheritedMembers:
  - AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String,Action{System.String})
  extensionMethods:
  - AutoCheck.Core.Connectors.Css.ObjectExtensions.DeepClone``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Connectors.Css.CssDoc
  commentId: P:AutoCheck.Core.Connectors.Css.CssDoc
  id: CssDoc
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: CssDoc
  nameWithType: Css.CssDoc
  fullName: AutoCheck.Core.Connectors.Css.CssDoc
  type: Property
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: CssDoc
    path: ../core/connectors/Css.cs
    startLine: 41
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nThe CSS document content.\n"
  example: []
  syntax:
    content: public Stylesheet CssDoc { get; }
    parameters: []
    return:
      type: Stylesheet
      description: ''
    content.vb: Public ReadOnly Property CssDoc As Stylesheet
  overload: AutoCheck.Core.Connectors.Css.CssDoc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.Css.Raw
  commentId: P:AutoCheck.Core.Connectors.Css.Raw
  id: Raw
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: Raw
  nameWithType: Css.Raw
  fullName: AutoCheck.Core.Connectors.Css.Raw
  type: Property
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Raw
    path: ../core/connectors/Css.cs
    startLine: 47
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nThe original CSS file content (unparsed).\n"
  example: []
  syntax:
    content: public string Raw { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Raw As String
  overload: AutoCheck.Core.Connectors.Css.Raw*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.Css.#ctor(System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: Css(String)
  nameWithType: Css.Css(String)
  fullName: AutoCheck.Core.Connectors.Css.Css(System.String)
  type: Constructor
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/Css.cs
    startLine: 53
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates a new connector instance.\n"
  example: []
  syntax:
    content: public Css(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: CSS file path.
    content.vb: Public Sub New(filePath As String)
  overload: AutoCheck.Core.Connectors.Css.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  id: '#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)'
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: Css(Utils.OS, String, String, String, Int32, String)
  nameWithType: Css.Css(Utils.OS, String, String, String, Int32, String)
  fullName: AutoCheck.Core.Connectors.Css.Css(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/Css.cs
    startLine: 66
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public Css(Utils.OS remoteOS, string host, string username, string password, int port, string filePath)
    parameters:
    - id: remoteOS
      type: AutoCheck.Core.Utils.OS
    - id: host
      type: System.String
    - id: username
      type: System.String
    - id: password
      type: System.String
    - id: port
      type: System.Int32
    - id: filePath
      type: System.String
    content.vb: Public Sub New(remoteOS As Utils.OS, host As String, username As String, password As String, port As Integer, filePath As String)
  overload: AutoCheck.Core.Connectors.Css.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  id: '#ctor(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)'
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: Css(Utils.OS, String, String, String, String)
  nameWithType: Css.Css(Utils.OS, String, String, String, String)
  fullName: AutoCheck.Core.Connectors.Css.Css(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/Css.cs
    startLine: 80
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public Css(Utils.OS remoteOS, string host, string username, string password, string filePath)
    parameters:
    - id: remoteOS
      type: AutoCheck.Core.Utils.OS
    - id: host
      type: System.String
    - id: username
      type: System.String
    - id: password
      type: System.String
    - id: filePath
      type: System.String
    content.vb: Public Sub New(remoteOS As Utils.OS, host As String, username As String, password As String, filePath As String)
  overload: AutoCheck.Core.Connectors.Css.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.Dispose
  commentId: M:AutoCheck.Core.Connectors.Css.Dispose
  id: Dispose
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Css.Dispose()
  fullName: AutoCheck.Core.Connectors.Css.Dispose()
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../core/connectors/Css.cs
    startLine: 95
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Connectors.Base.Dispose
  overload: AutoCheck.Core.Connectors.Css.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C
  commentId: M:AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C
  id: ValidateCss3AgainstW3C
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: ValidateCss3AgainstW3C()
  nameWithType: Css.ValidateCss3AgainstW3C()
  fullName: AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C()
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ValidateCss3AgainstW3C
    path: ../core/connectors/Css.cs
    startLine: 102
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nValidates the currently loaded CSS document against the W3C public API. \nThrows an exception if the document is invalid.\n"
  example: []
  syntax:
    content: public void ValidateCss3AgainstW3C()
    content.vb: Public Sub ValidateCss3AgainstW3C
  overload: AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.PropertyExists(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyExists(System.String,System.String)
  id: PropertyExists(System.String,System.String)
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyExists(String, String)
  nameWithType: Css.PropertyExists(String, String)
  fullName: AutoCheck.Core.Connectors.Css.PropertyExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyExists
    path: ../core/connectors/Css.cs
    startLine: 146
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a property exists within the current CSS document.\n"
  example: []
  syntax:
    content: public bool PropertyExists(string property, string value = null)
    parameters:
    - id: property
      type: System.String
      description: The CSS property name.
    - id: value
      type: System.String
      description: The CSS property value.
    return:
      type: System.Boolean
      description: True if the property has been found
    content.vb: Public Function PropertyExists(property As String, value As String = Nothing) As Boolean
  overload: AutoCheck.Core.Connectors.Css.PropertyExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.PropertyExists(System.String[])
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyExists(System.String[])
  id: PropertyExists(System.String[])
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyExists(String[])
  nameWithType: Css.PropertyExists(String[])
  fullName: AutoCheck.Core.Connectors.Css.PropertyExists(System.String[])
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyExists
    path: ../core/connectors/Css.cs
    startLine: 160
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of properties exists within the current CSS document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyExists(string[] properties)
    parameters:
    - id: properties
      type: System.String[]
      description: The CSS property names.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyExists(properties As String()) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyExists*
  nameWithType.vb: Css.PropertyExists(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyExists(System.String())
  name.vb: PropertyExists(String())
- uid: AutoCheck.Core.Connectors.Css.PropertyExists(Dictionary{System.String,System.String})
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyExists(Dictionary{System.String,System.String})
  id: PropertyExists(Dictionary{System.String,System.String})
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyExists(Dictionary<String, String>)
  nameWithType: Css.PropertyExists(Dictionary<String, String>)
  fullName: AutoCheck.Core.Connectors.Css.PropertyExists(Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyExists
    path: ../core/connectors/Css.cs
    startLine: 169
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of properties exists within the current CSS document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyExists(Dictionary<string, string> properties)
    parameters:
    - id: properties
      type: Dictionary{System.String,System.String}
      description: The CSS property names and its expected values.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyExists(properties As Dictionary(Of String, String)) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyExists*
  nameWithType.vb: Css.PropertyExists(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyExists(Dictionary(Of System.String, System.String))
  name.vb: PropertyExists(Dictionary(Of String, String))
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String,System.String)
  id: PropertyApplied(HtmlDocument,System.String,System.String)
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(HtmlDocument, String, String)
  nameWithType: Css.PropertyApplied(HtmlDocument, String, String)
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 187
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public bool PropertyApplied(HtmlDocument htmlDoc, string property, string value = null)
    parameters:
    - id: htmlDoc
      type: HtmlDocument
    - id: property
      type: System.String
    - id: value
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function PropertyApplied(htmlDoc As HtmlDocument, property As String, value As String = Nothing) As Boolean
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String[])
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,System.String[])
  id: PropertyApplied(HtmlDocument,System.String[])
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(HtmlDocument, String[])
  nameWithType: Css.PropertyApplied(HtmlDocument, String[])
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument, System.String[])
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 212
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of CSS properties has been applied within the given HTML document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyApplied(HtmlDocument htmlDoc, string[] properties)
    parameters:
    - id: htmlDoc
      type: HtmlDocument
      description: The HTML document that must be using the property.
    - id: properties
      type: System.String[]
      description: The CSS property names.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyApplied(htmlDoc As HtmlDocument, properties As String()) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  nameWithType.vb: Css.PropertyApplied(HtmlDocument, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument, System.String())
  name.vb: PropertyApplied(HtmlDocument, String())
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,Dictionary{System.String,System.String})
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument,Dictionary{System.String,System.String})
  id: PropertyApplied(HtmlDocument,Dictionary{System.String,System.String})
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(HtmlDocument, Dictionary<String, String>)
  nameWithType: Css.PropertyApplied(HtmlDocument, Dictionary<String, String>)
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument, Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 222
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of CSS properties has been applied within the given HTML document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyApplied(HtmlDocument htmlDoc, Dictionary<string, string> properties)
    parameters:
    - id: htmlDoc
      type: HtmlDocument
      description: The HTML document that must be using the property.
    - id: properties
      type: Dictionary{System.String,System.String}
      description: The CSS property names and its expected values.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyApplied(htmlDoc As HtmlDocument, properties As Dictionary(Of String, String)) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  nameWithType.vb: Css.PropertyApplied(HtmlDocument, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyApplied(HtmlDocument, Dictionary(Of System.String, System.String))
  name.vb: PropertyApplied(HtmlDocument, Dictionary(Of String, String))
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String,System.String)
  id: PropertyApplied(AutoCheck.Core.Connectors.Html,System.String,System.String)
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(Html, String, String)
  nameWithType: Css.PropertyApplied(Html, String, String)
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 240
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public bool PropertyApplied(Html htmlConn, string property, string value = null)
    parameters:
    - id: htmlConn
      type: AutoCheck.Core.Connectors.Html
    - id: property
      type: System.String
    - id: value
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function PropertyApplied(htmlConn As Html, property As String, value As String = Nothing) As Boolean
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String[])
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,System.String[])
  id: PropertyApplied(AutoCheck.Core.Connectors.Html,System.String[])
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(Html, String[])
  nameWithType: Css.PropertyApplied(Html, String[])
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html, System.String[])
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 250
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of CSS properties has been applied within the given HTML document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyApplied(Html htmlConn, string[] properties)
    parameters:
    - id: htmlConn
      type: AutoCheck.Core.Connectors.Html
      description: The HTML connector containing the document to check.
    - id: properties
      type: System.String[]
      description: The CSS property names.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyApplied(htmlConn As Html, properties As String()) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  nameWithType.vb: Css.PropertyApplied(Html, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html, System.String())
  name.vb: PropertyApplied(Html, String())
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,Dictionary{System.String,System.String})
  commentId: M:AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html,Dictionary{System.String,System.String})
  id: PropertyApplied(AutoCheck.Core.Connectors.Html,Dictionary{System.String,System.String})
  parent: AutoCheck.Core.Connectors.Css
  langs:
  - csharp
  - vb
  name: PropertyApplied(Html, Dictionary<String, String>)
  nameWithType: Css.PropertyApplied(Html, Dictionary<String, String>)
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html, Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: core/connectors/Css.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PropertyApplied
    path: ../core/connectors/Css.cs
    startLine: 260
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a set of CSS properties has been applied within the given HTML document.\n"
  example: []
  syntax:
    content: public (int count, string[] exists) PropertyApplied(Html htmlConn, Dictionary<string, string> properties)
    parameters:
    - id: htmlConn
      type: AutoCheck.Core.Connectors.Html
      description: The HTML connector containing the document to check.
    - id: properties
      type: Dictionary{System.String,System.String}
      description: The CSS property names and its expected values.
    return:
      type: System.ValueTuple{System.Int32,System.String[]}
      description: Total amount of existing properties, plus the name of those properties
    content.vb: Public Function PropertyApplied(htmlConn As Html, properties As Dictionary(Of String, String)) As(count As Integer, exists As String())(Of Integer , String())
  overload: AutoCheck.Core.Connectors.Css.PropertyApplied*
  nameWithType.vb: Css.PropertyApplied(Html, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.Css.PropertyApplied(AutoCheck.Core.Connectors.Html, Dictionary(Of System.String, System.String))
  name.vb: PropertyApplied(Html, Dictionary(Of String, String))
references:
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connectors.Base
  commentId: T:AutoCheck.Core.Connectors.Base
  parent: AutoCheck.Core.Connectors
  name: Base
  nameWithType: Base
  fullName: AutoCheck.Core.Connectors.Base
- uid: AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String,Action{System.String})
  commentId: M:AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String,Action{System.String})
  parent: AutoCheck.Core.Connectors.Base
  isExternal: true
  name: ProcessRemoteFile(Utils.OS, String, String, String, Int32, String, Action<String>)
  nameWithType: Base.ProcessRemoteFile(Utils.OS, String, String, String, Int32, String, Action<String>)
  fullName: AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.Int32, System.String, Action<System.String>)
  nameWithType.vb: Base.ProcessRemoteFile(Utils.OS, String, String, String, Int32, String, Action(Of String))
  fullName.vb: AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.Int32, System.String, Action(Of System.String))
  name.vb: ProcessRemoteFile(Utils.OS, String, String, String, Int32, String, Action(Of String))
  spec.csharp:
  - uid: AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String,Action{System.String})
    name: ProcessRemoteFile
    nameWithType: Base.ProcessRemoteFile
    fullName: AutoCheck.Core.Connectors.Base.ProcessRemoteFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoCheck.Core.Utils.OS
    name: Utils.OS
    nameWithType: Utils.OS
    fullName: AutoCheck.Core.Utils.OS
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connectors.Base.ProcessRemoteFile(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String,Action{System.String})
    name: ProcessRemoteFile
    nameWithType: Base.ProcessRemoteFile
    fullName: AutoCheck.Core.Connectors.Base.ProcessRemoteFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoCheck.Core.Utils.OS
    name: Utils.OS
    nameWithType: Utils.OS
    fullName: AutoCheck.Core.Utils.OS
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.Css.ObjectExtensions.DeepClone``1
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  parent: ObjectExtensions
  definition: ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<Css>()
  nameWithType: ObjectExtensions.DeepClone<Css>()
  fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.Css>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of Css)()
  fullName.vb: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.Css)()
  name.vb: DeepClone(Of Css)()
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone<Css>
    nameWithType: ObjectExtensions.DeepClone<Css>
    fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.Css>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone(Of Css)
    nameWithType: ObjectExtensions.DeepClone(Of Css)
    fullName: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.Css)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions.DeepClone``1(``0)
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions
  commentId: T:ObjectExtensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: ObjectExtensions
- uid: AutoCheck.Core.Connectors.Css.CssDoc*
  commentId: Overload:AutoCheck.Core.Connectors.Css.CssDoc
  name: CssDoc
  nameWithType: Css.CssDoc
  fullName: AutoCheck.Core.Connectors.Css.CssDoc
- uid: Stylesheet
  commentId: '!:Stylesheet'
  isExternal: true
  name: Stylesheet
  nameWithType: Stylesheet
  fullName: Stylesheet
- uid: AutoCheck.Core.Connectors.Css.Raw*
  commentId: Overload:AutoCheck.Core.Connectors.Css.Raw
  name: Raw
  nameWithType: Css.Raw
  fullName: AutoCheck.Core.Connectors.Css.Raw
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Connectors.Css.#ctor*
  commentId: Overload:AutoCheck.Core.Connectors.Css.#ctor
  name: Css
  nameWithType: Css.Css
  fullName: AutoCheck.Core.Connectors.Css.Css
- uid: AutoCheck.Core.Utils.OS
  commentId: T:AutoCheck.Core.Utils.OS
  parent: AutoCheck.Core
  name: Utils.OS
  nameWithType: Utils.OS
  fullName: AutoCheck.Core.Utils.OS
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Core.Connectors.Base.Dispose
  commentId: M:AutoCheck.Core.Connectors.Base.Dispose
  parent: AutoCheck.Core.Connectors.Base
  name: Dispose()
  nameWithType: Base.Dispose()
  fullName: AutoCheck.Core.Connectors.Base.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.Css.Dispose*
  commentId: Overload:AutoCheck.Core.Connectors.Css.Dispose
  name: Dispose
  nameWithType: Css.Dispose
  fullName: AutoCheck.Core.Connectors.Css.Dispose
- uid: AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C*
  commentId: Overload:AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C
  name: ValidateCss3AgainstW3C
  nameWithType: Css.ValidateCss3AgainstW3C
  fullName: AutoCheck.Core.Connectors.Css.ValidateCss3AgainstW3C
- uid: AutoCheck.Core.Connectors.Css.PropertyExists*
  commentId: Overload:AutoCheck.Core.Connectors.Css.PropertyExists
  name: PropertyExists
  nameWithType: Css.PropertyExists
  fullName: AutoCheck.Core.Connectors.Css.PropertyExists
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.ValueTuple{System.Int32,System.String[]}
  commentId: '!:System.ValueTuple{System.Int32,System.String[]}'
  definition: System.ValueTuple`2
  name: (, )<Int32, String[]>
  nameWithType: (, )<Int32, String[]>
  fullName: System.ValueTuple<System.Int32, System.String[]>
  nameWithType.vb: (, )(Of Int32, String())
  fullName.vb: System.ValueTuple(Of System.Int32, System.String())
  name.vb: (, )(Of Int32, String())
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  isExternal: true
  name: (, )<, >
  nameWithType: (, )<, >
  fullName: System.ValueTuple<, >
  nameWithType.vb: (, )(Of , )
  fullName.vb: System.ValueTuple(Of , )
  name.vb: (, )(Of , )
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.Css.PropertyApplied*
  commentId: Overload:AutoCheck.Core.Connectors.Css.PropertyApplied
  name: PropertyApplied
  nameWithType: Css.PropertyApplied
  fullName: AutoCheck.Core.Connectors.Css.PropertyApplied
- uid: HtmlDocument
  isExternal: true
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: HtmlDocument
- uid: AutoCheck.Core.Connectors.Html
  commentId: T:AutoCheck.Core.Connectors.Html
  parent: AutoCheck.Core.Connectors
  name: Html
  nameWithType: Html
  fullName: AutoCheck.Core.Connectors.Html
