### YamlMime:ManagedReference
items:
- uid: AutoCheck.Checkers.Csv
  commentId: T:AutoCheck.Checkers.Csv
  id: Csv
  parent: AutoCheck.Checkers
  children:
  - AutoCheck.Checkers.Csv.#ctor(System.String,System.String)
  - AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount(System.Int32,AutoCheck.Checkers.Csv.Operator)
  - AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)
  - AutoCheck.Checkers.Csv.Connector
  langs:
  - csharp
  - vb
  name: Csv
  nameWithType: Csv
  fullName: AutoCheck.Checkers.Csv
  type: Class
  source:
    remote:
      path: checkers/Csv.cs
      branch: Developers-guide
      repo: https://github.com/FherStk/AutoCheck.git
    id: Csv
    path: ../checkers/Csv.cs
    startLine: 11
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nAllows data validations over a WEB set of files.\n"
  example: []
  syntax:
    content: 'public class Csv : Checker'
    content.vb: >-
      Public Class Csv
          Inherits Checker
  inheritance:
  - System.Object
  - AutoCheck.Core.Checker
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Checkers.Csv.Connector
  commentId: P:AutoCheck.Checkers.Csv.Connector
  id: Connector
  parent: AutoCheck.Checkers.Csv
  langs:
  - csharp
  - vb
  name: Connector
  nameWithType: Csv.Connector
  fullName: AutoCheck.Checkers.Csv.Connector
  type: Property
  source:
    remote:
      path: checkers/Csv.cs
      branch: Developers-guide
      repo: https://github.com/FherStk/AutoCheck.git
    id: Connector
    path: ../checkers/Csv.cs
    startLine: 16
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe main connector, can be used to perform direct operations over the data source.\n"
  example: []
  syntax:
    content: public Csv Connector { get; }
    parameters: []
    return:
      type: AutoCheck.Connectors.Csv
      description: ''
    content.vb: Public ReadOnly Property Connector As Csv
  overload: AutoCheck.Checkers.Csv.Connector*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Csv.#ctor(System.String,System.String)
  commentId: M:AutoCheck.Checkers.Csv.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: AutoCheck.Checkers.Csv
  langs:
  - csharp
  - vb
  name: Csv(String, String)
  nameWithType: Csv.Csv(String, String)
  fullName: AutoCheck.Checkers.Csv.Csv(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: checkers/Csv.cs
      branch: Developers-guide
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../checkers/Csv.cs
    startLine: 31
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCreates a new checker instance.\n"
  example: []
  syntax:
    content: public Csv(string studentFolder, string file)
    parameters:
    - id: studentFolder
      type: System.String
      description: The folder containing the web files.
    - id: file
      type: System.String
      description: CSV file name.
    content.vb: Public Sub New(studentFolder As String, file As String)
  overload: AutoCheck.Checkers.Csv.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount(System.Int32,AutoCheck.Checkers.Csv.Operator)
  commentId: M:AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount(System.Int32,AutoCheck.Checkers.Csv.Operator)
  id: CheckIfRegistriesMatchesAmount(System.Int32,AutoCheck.Checkers.Csv.Operator)
  parent: AutoCheck.Checkers.Csv
  langs:
  - csharp
  - vb
  name: CheckIfRegistriesMatchesAmount(Int32, Csv.Operator)
  nameWithType: Csv.CheckIfRegistriesMatchesAmount(Int32, Csv.Operator)
  fullName: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount(System.Int32, AutoCheck.Checkers.Csv.Operator)
  type: Method
  source:
    remote:
      path: checkers/Csv.cs
      branch: Developers-guide
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfRegistriesMatchesAmount
    path: ../checkers/Csv.cs
    startLine: 40
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if the total rows amount is lower, higher or equals than the expected.\n"
  example: []
  syntax:
    content: public List<string> CheckIfRegistriesMatchesAmount(int expected, Csv.Operator op = Csv.Operator.EQUALS)
    parameters:
    - id: expected
      type: System.Int32
      description: Expected applied amount.
    - id: op
      type: AutoCheck.Checkers.Csv.Operator
      description: Comparison operator to be used.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfRegistriesMatchesAmount(expected As Integer, op As Csv.Operator = Csv.Operator.EQUALS) As List(Of String)
  overload: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)
  commentId: M:AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)
  id: CheckIfRegistriesMatchesData(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)
  parent: AutoCheck.Checkers.Csv
  langs:
  - csharp
  - vb
  name: CheckIfRegistriesMatchesData(Int32, Dictionary<String, Object>, Boolean)
  nameWithType: Csv.CheckIfRegistriesMatchesData(Int32, Dictionary<String, Object>, Boolean)
  fullName: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData(System.Int32, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Boolean)
  type: Method
  source:
    remote:
      path: checkers/Csv.cs
      branch: Developers-guide
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfRegistriesMatchesData
    path: ../checkers/Csv.cs
    startLine: 60
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCompares if the given company data matches with the current one stored in the database.\n"
  example: []
  syntax:
    content: public List<string> CheckIfRegistriesMatchesData(int line, Dictionary<string, object> expected, bool strict = false)
    parameters:
    - id: line
      type: System.Int32
      description: The registry line to check (from 1 to N).
    - id: expected
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The expected data to match.
    - id: strict
      type: System.Boolean
      description: The expected data must match exactly (otherwise approximations are allowed, usefull for checking students names and emails).
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfRegistriesMatchesData(line As Integer, expected As Dictionary(Of String, Object), strict As Boolean = False) As List(Of String)
  overload: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData*
  nameWithType.vb: Csv.CheckIfRegistriesMatchesData(Int32, Dictionary(Of String, Object), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData(System.Int32, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Boolean)
  name.vb: CheckIfRegistriesMatchesData(Int32, Dictionary(Of String, Object), Boolean)
references:
- uid: AutoCheck.Checkers
  commentId: N:AutoCheck.Checkers
  name: AutoCheck.Checkers
  nameWithType: AutoCheck.Checkers
  fullName: AutoCheck.Checkers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Checker
  commentId: T:AutoCheck.Core.Checker
  parent: AutoCheck.Core
  name: Checker
  nameWithType: Checker
  fullName: AutoCheck.Core.Checker
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Checkers.Csv.Connector*
  commentId: Overload:AutoCheck.Checkers.Csv.Connector
  name: Connector
  nameWithType: Csv.Connector
  fullName: AutoCheck.Checkers.Csv.Connector
- uid: AutoCheck.Connectors.Csv
  commentId: T:AutoCheck.Connectors.Csv
  parent: AutoCheck.Connectors
  name: Csv
  nameWithType: Csv
  fullName: AutoCheck.Connectors.Csv
- uid: AutoCheck.Connectors
  commentId: N:AutoCheck.Connectors
  name: AutoCheck.Connectors
  nameWithType: AutoCheck.Connectors
  fullName: AutoCheck.Connectors
- uid: AutoCheck.Checkers.Csv.#ctor*
  commentId: Overload:AutoCheck.Checkers.Csv.#ctor
  name: Csv
  nameWithType: Csv.Csv
  fullName: AutoCheck.Checkers.Csv.Csv
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount*
  commentId: Overload:AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount
  name: CheckIfRegistriesMatchesAmount
  nameWithType: Csv.CheckIfRegistriesMatchesAmount
  fullName: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesAmount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Checkers.Csv.Operator
  commentId: T:AutoCheck.Checkers.Csv.Operator
  parent: AutoCheck.Checkers
  name: Csv.Operator
  nameWithType: Csv.Operator
  fullName: AutoCheck.Checkers.Csv.Operator
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData*
  commentId: Overload:AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData
  name: CheckIfRegistriesMatchesData
  nameWithType: Csv.CheckIfRegistriesMatchesData
  fullName: AutoCheck.Checkers.Csv.CheckIfRegistriesMatchesData
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
