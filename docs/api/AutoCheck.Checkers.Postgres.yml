### YamlMime:ManagedReference
items:
- uid: AutoCheck.Checkers.Postgres
  commentId: T:AutoCheck.Checkers.Postgres
  id: Postgres
  parent: AutoCheck.Checkers
  children:
  - AutoCheck.Checkers.Postgres.#ctor(System.String,System.String,System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckForeignKey(System.String,System.String,System.String,System.String,System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckIfEntryAdded(System.String,System.String,System.String,System.Int32)
  - AutoCheck.Checkers.Postgres.CheckIfEntryRemoved(System.String,System.String,System.String,System.Int32)
  - AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege(System.String,System.String,System.Char)
  - AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges(System.String,System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckIfSelectContainsData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges(System.String,System.String,System.String,System.Char)
  - AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator)
  - AutoCheck.Checkers.Postgres.CheckIfTableExists(System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckIfTableInsertsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.Int32)
  - AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Int32)
  - AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,System.Int32)
  - AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges(System.String,System.String,System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition(System.String,System.String,System.String)
  - AutoCheck.Checkers.Postgres.CheckRoleMembership(System.String,System.String[])
  - AutoCheck.Checkers.Postgres.Connector
  - AutoCheck.Checkers.Postgres.Database
  - AutoCheck.Checkers.Postgres.Dispose
  - AutoCheck.Checkers.Postgres.Host
  - AutoCheck.Checkers.Postgres.Student
  - AutoCheck.Checkers.Postgres.User
  langs:
  - csharp
  - vb
  name: Postgres
  nameWithType: Postgres
  fullName: AutoCheck.Checkers.Postgres
  type: Class
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Postgres
    path: ../checkers/Postgres.cs
    startLine: 33
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nAllows data validations over a PostgreSQL instance.\n"
  example: []
  syntax:
    content: 'public class Postgres : Checker, IDisposable'
    content.vb: >-
      Public Class Postgres
          Inherits Checker
          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Checker
  derivedClasses:
  - AutoCheck.Checkers.Odoo
  implements:
  - System.IDisposable
  inheritedMembers:
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Checkers.Postgres.Connector
  commentId: P:AutoCheck.Checkers.Postgres.Connector
  id: Connector
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Connector
  nameWithType: Postgres.Connector
  fullName: AutoCheck.Checkers.Postgres.Connector
  type: Property
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Connector
    path: ../checkers/Postgres.cs
    startLine: 39
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe main connector, can be used to perform direct operations over the data source.\n"
  example: []
  syntax:
    content: public Postgres Connector { get; }
    parameters: []
    return:
      type: AutoCheck.Connectors.Postgres
      description: ''
    content.vb: Public ReadOnly Property Connector As Postgres
  overload: AutoCheck.Checkers.Postgres.Connector*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Postgres.Host
  commentId: P:AutoCheck.Checkers.Postgres.Host
  id: Host
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: Postgres.Host
  fullName: AutoCheck.Checkers.Postgres.Host
  type: Property
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Host
    path: ../checkers/Postgres.cs
    startLine: 45
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nPostgreSQL host address.\n"
  example: []
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Host As String
  overload: AutoCheck.Checkers.Postgres.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Postgres.Database
  commentId: P:AutoCheck.Checkers.Postgres.Database
  id: Database
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: Postgres.Database
  fullName: AutoCheck.Checkers.Postgres.Database
  type: Property
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Database
    path: ../checkers/Postgres.cs
    startLine: 55
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe PostgreSQL database name, which will be used to perform operations.\n"
  example: []
  syntax:
    content: public string Database { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Database As String
  overload: AutoCheck.Checkers.Postgres.Database*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Postgres.User
  commentId: P:AutoCheck.Checkers.Postgres.User
  id: User
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: User
  nameWithType: Postgres.User
  fullName: AutoCheck.Checkers.Postgres.User
  type: Property
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: User
    path: ../checkers/Postgres.cs
    startLine: 65
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe PostgreSQL database username, which will be used to perform operations.\n"
  example: []
  syntax:
    content: public string User { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property User As String
  overload: AutoCheck.Checkers.Postgres.User*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Postgres.Student
  commentId: P:AutoCheck.Checkers.Postgres.Student
  id: Student
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Checkers.Postgres.Student
  type: Property
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Student
    path: ../checkers/Postgres.cs
    startLine: 75
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe student name wich is the original database creator.\n"
  example: []
  syntax:
    content: public string Student { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Student As String
  overload: AutoCheck.Checkers.Postgres.Student*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Postgres.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Postgres(String, String, String, String)
  nameWithType: Postgres.Postgres(String, String, String, String)
  fullName: AutoCheck.Checkers.Postgres.Postgres(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../checkers/Postgres.cs
    startLine: 89
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCreates a new checker instance.\n"
  example: []
  syntax:
    content: public Postgres(string host, string database, string username, string password)
    parameters:
    - id: host
      type: System.String
      description: Host address in order to connect with the running PostgreSQL service, wich contains the Odoo database.
    - id: database
      type: System.String
      description: The PostgreSQL database name.
    - id: username
      type: System.String
      description: The PostgreSQL database username, which will be used to perform operations.
    - id: password
      type: System.String
      description: The PostgreSQL database password, which will be used to perform operations.
    content.vb: Public Sub New(host As String, database As String, username As String, password As String)
  overload: AutoCheck.Checkers.Postgres.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.Dispose
  commentId: M:AutoCheck.Checkers.Postgres.Dispose
  id: Dispose
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Postgres.Dispose()
  fullName: AutoCheck.Checkers.Postgres.Dispose()
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../checkers/Postgres.cs
    startLine: 96
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Checker.Dispose
  overload: AutoCheck.Checkers.Postgres.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges(System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges(System.String,System.String,System.String,System.String)
  id: CheckIfTableMatchesPrivileges(System.String,System.String,System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableMatchesPrivileges(String, String, String, String)
  nameWithType: Postgres.CheckIfTableMatchesPrivileges(String, String, String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableMatchesPrivileges
    path: ../checkers/Postgres.cs
    startLine: 109
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCompares a set of expected privileges with the current table&apos;s ones.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableMatchesPrivileges(string role, string schema, string table, string expected)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table which privileges will be checked against the role&apos;s ones.
    - id: expected
      type: System.String
      description: 'ACL letters as appears on PostgreSQL documentation: https://www.postgresql.org/docs/11/sql-grant.html'
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableMatchesPrivileges(role As String, schema As String, table As String, expected As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges(System.String,System.String,System.String,System.Char)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges(System.String,System.String,System.String,System.Char)
  id: CheckIfTableContainsPrivileges(System.String,System.String,System.String,System.Char)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableContainsPrivileges(String, String, String, Char)
  nameWithType: Postgres.CheckIfTableContainsPrivileges(String, String, String, Char)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges(System.String, System.String, System.String, System.Char)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableContainsPrivileges
    path: ../checkers/Postgres.cs
    startLine: 133
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nLooks for a privilege within the current table&apos;s ones.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableContainsPrivileges(string role, string schema, string table, char expected)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table which privileges will be checked against the role&apos;s ones.
    - id: expected
      type: System.Char
      description: 'ACL letter as appears on PostgreSQL documentation: https://www.postgresql.org/docs/11/sql-grant.html'
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableContainsPrivileges(role As String, schema As String, table As String, expected As Char) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges(System.String,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges(System.String,System.String,System.String)
  id: CheckIfSchemaMatchesPrivileges(System.String,System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfSchemaMatchesPrivileges(String, String, String)
  nameWithType: Postgres.CheckIfSchemaMatchesPrivileges(String, String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfSchemaMatchesPrivileges
    path: ../checkers/Postgres.cs
    startLine: 176
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCompares a set of expected privileges with the current schema&apos;s ones.\n"
  example: []
  syntax:
    content: public List<string> CheckIfSchemaMatchesPrivileges(string role, string schema, string expected)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: expected
      type: System.String
      description: 'ACL letters as appears on PostgreSQL documentation: https://www.postgresql.org/docs/11/sql-grant.html'
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfSchemaMatchesPrivileges(role As String, schema As String, expected As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege(System.String,System.String,System.Char)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege(System.String,System.String,System.Char)
  id: CheckIfSchemaContainsPrivilege(System.String,System.String,System.Char)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfSchemaContainsPrivilege(String, String, Char)
  nameWithType: Postgres.CheckIfSchemaContainsPrivilege(String, String, Char)
  fullName: AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege(System.String, System.String, System.Char)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfSchemaContainsPrivilege
    path: ../checkers/Postgres.cs
    startLine: 209
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nLooks for a privilege within the current schema&apos;s ones.\n"
  example: []
  syntax:
    content: public List<string> CheckIfSchemaContainsPrivilege(string role, string schema, char expected)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: expected
      type: System.Char
      description: 'ACL letter as appears on PostgreSQL documentation: https://www.postgresql.org/docs/11/sql-grant.html'
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfSchemaContainsPrivilege(role As String, schema As String, expected As Char) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckRoleMembership(System.String,System.String[])
  commentId: M:AutoCheck.Checkers.Postgres.CheckRoleMembership(System.String,System.String[])
  id: CheckRoleMembership(System.String,System.String[])
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckRoleMembership(String, String[])
  nameWithType: Postgres.CheckRoleMembership(String, String[])
  fullName: AutoCheck.Checkers.Postgres.CheckRoleMembership(System.String, System.String[])
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckRoleMembership
    path: ../checkers/Postgres.cs
    startLine: 246
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if the given role is part of all the given groups.\n"
  example: []
  syntax:
    content: public List<string> CheckRoleMembership(string role, string[] groups)
    parameters:
    - id: role
      type: System.String
      description: The role to check.
    - id: groups
      type: System.String[]
      description: The groups where the role should belong.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckRoleMembership(role As String, groups As String()) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckRoleMembership*
  nameWithType.vb: Postgres.CheckRoleMembership(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckRoleMembership(System.String, System.String())
  name.vb: CheckRoleMembership(String, String())
- uid: AutoCheck.Checkers.Postgres.CheckForeignKey(System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckForeignKey(System.String,System.String,System.String,System.String,System.String,System.String)
  id: CheckForeignKey(System.String,System.String,System.String,System.String,System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckForeignKey(String, String, String, String, String, String)
  nameWithType: Postgres.CheckForeignKey(String, String, String, String, String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckForeignKey(System.String, System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckForeignKey
    path: ../checkers/Postgres.cs
    startLine: 285
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if a table&apos;s columns has been stablished as foreign key to another table&apos;s column.\n"
  example: []
  syntax:
    content: public List<string> CheckForeignKey(string schemaFrom, string tableFrom, string columnFrom, string schemaTo, string tableTo, string columnTo)
    parameters:
    - id: schemaFrom
      type: System.String
      description: Foreign key&apos;s origin schema.
    - id: tableFrom
      type: System.String
      description: Foreign key&apos;s origin table.
    - id: columnFrom
      type: System.String
      description: Foreign key&apos;s origin column.
    - id: schemaTo
      type: System.String
      description: Foreign key&apos;s destination schema.
    - id: tableTo
      type: System.String
      description: Foreign key&apos;s destination table.
    - id: columnTo
      type: System.String
      description: Foreign key&apos;s destination schema.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckForeignKey(schemaFrom As String, tableFrom As String, columnFrom As String, schemaTo As String, tableTo As String, columnTo As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckForeignKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfEntryAdded(System.String,System.String,System.String,System.Int32)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfEntryAdded(System.String,System.String,System.String,System.Int32)
  id: CheckIfEntryAdded(System.String,System.String,System.String,System.Int32)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfEntryAdded(String, String, String, Int32)
  nameWithType: Postgres.CheckIfEntryAdded(String, String, String, Int32)
  fullName: AutoCheck.Checkers.Postgres.CheckIfEntryAdded(System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfEntryAdded
    path: ../checkers/Postgres.cs
    startLine: 322
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if a new item has been added to a table, looking for a greater ID (pkField > lastPkValue).\n"
  example: []
  syntax:
    content: public List<string> CheckIfEntryAdded(string schema, string table, string pkField, int lastPkValue)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: pkField
      type: System.String
      description: The primary key field.
    - id: lastPkValue
      type: System.Int32
      description: The last primary key value, so the new element must have a higher one.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfEntryAdded(schema As String, table As String, pkField As String, lastPkValue As Integer) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfEntryAdded*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfEntryRemoved(System.String,System.String,System.String,System.Int32)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfEntryRemoved(System.String,System.String,System.String,System.Int32)
  id: CheckIfEntryRemoved(System.String,System.String,System.String,System.Int32)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfEntryRemoved(String, String, String, Int32)
  nameWithType: Postgres.CheckIfEntryRemoved(String, String, String, Int32)
  fullName: AutoCheck.Checkers.Postgres.CheckIfEntryRemoved(System.String, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfEntryRemoved
    path: ../checkers/Postgres.cs
    startLine: 345
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if an item has been removed from a table, looking for its  ID (pkField = lastPkValue).\n"
  example: []
  syntax:
    content: public List<string> CheckIfEntryRemoved(string schema, string table, string pkField, int removedPkValue)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: pkField
      type: System.String
      description: The primary key field.
    - id: removedPkValue
      type: System.Int32
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfEntryRemoved(schema As String, table As String, pkField As String, removedPkValue As Integer) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfEntryRemoved*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableContainsData(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableContainsData(DataTable, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableContainsData(DataTable, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.Data.DataTable, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableContainsData
    path: ../checkers/Postgres.cs
    startLine: 367
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if the given data performs an exact match with any row stored in the database.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableContainsData(DataTable table, Dictionary<string, object> expected)
    parameters:
    - id: table
      type: System.Data.DataTable
      description: The table to check.
    - id: expected
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: A set of [field-name, field-value] pairs which will macthed with the table data.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableContainsData(table As DataTable, expected As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableContainsData*
  nameWithType.vb: Postgres.CheckIfTableContainsData(DataTable, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.Data.DataTable, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableContainsData(DataTable, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableContainsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableContainsData(String, String, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableContainsData(String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableContainsData
    path: ../checkers/Postgres.cs
    startLine: 407
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if the given data performs an exact match with any row stored in the database.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableContainsData(string schema, string table, Dictionary<string, object> expected)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: expected
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: A set of [field-name, field-value] pairs which will be used to check the entry data.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableContainsData(schema As String, table As String, expected As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableContainsData*
  nameWithType.vb: Postgres.CheckIfTableContainsData(String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableContainsData(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableContainsData(String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfSelectContainsData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfSelectContainsData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfSelectContainsData(String, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfSelectContainsData(String, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfSelectContainsData
    path: ../checkers/Postgres.cs
    startLine: 437
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if the given query result performs an exact match with any row stored in the database.\n"
  example: []
  syntax:
    content: public List<string> CheckIfSelectContainsData(string select, Dictionary<string, object> expected)
    parameters:
    - id: select
      type: System.String
      description: The select query to perform.
    - id: expected
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: A set of [field-name, field-value] pairs which will be used to check the entry data.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfSelectContainsData(select As String, expected As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData*
  nameWithType.vb: Postgres.CheckIfSelectContainsData(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfSelectContainsData(String, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableExists(System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableExists(System.String,System.String)
  id: CheckIfTableExists(System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableExists(String, String)
  nameWithType: Postgres.CheckIfTableExists(String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableExists
    path: ../checkers/Postgres.cs
    startLine: 455
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if a table or view exists.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableExists(string schema, string table)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableExists(schema As String, table As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition(System.String,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition(System.String,System.String,System.String)
  id: CheckIfViewMatchesDefinition(System.String,System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfViewMatchesDefinition(String, String, String)
  nameWithType: Postgres.CheckIfViewMatchesDefinition(String, String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfViewMatchesDefinition
    path: ../checkers/Postgres.cs
    startLine: 478
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nGiven a view, executes its select query and compares the result with the given definition.\n"
  example: []
  syntax:
    content: public List<string> CheckIfViewMatchesDefinition(string schema, string view, string expected)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: view
      type: System.String
    - id: expected
      type: System.String
      description: The SQL select query which result should produce the same result as the view.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfViewMatchesDefinition(schema As String, view As String, expected As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableInsertsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableInsertsData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableInsertsData(String, String, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableInsertsData(String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableInsertsData
    path: ../checkers/Postgres.cs
    startLine: 500
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if new data can be inserted into the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableInsertsData(string schema, string table, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableInsertsData(schema As String, table As String, fields As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData*
  nameWithType.vb: Postgres.CheckIfTableInsertsData(String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableInsertsData(String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableUpdatesData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableUpdatesData(String, String, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableUpdatesData(String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableUpdatesData
    path: ../checkers/Postgres.cs
    startLine: 521
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be updated into the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableUpdatesData(string schema, string table, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableUpdatesData(schema As String, table As String, fields As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData*
  nameWithType.vb: Postgres.CheckIfTableUpdatesData(String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableUpdatesData(String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableUpdatesData(String, String, String, Object, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableUpdatesData(String, String, String, Object, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.String, System.Object, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableUpdatesData
    path: ../checkers/Postgres.cs
    startLine: 534
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be updated into the table, the filter operator &apos;=&apos; will be used.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableUpdatesData(string schema, string table, string filterField, object filterValue, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableUpdatesData(schema As String, table As String, filterField As String, filterValue As Object, fields As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData*
  nameWithType.vb: Postgres.CheckIfTableUpdatesData(String, String, String, Object, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.String, System.Object, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableUpdatesData(String, String, String, Object, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: CheckIfTableUpdatesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableUpdatesData(String, String, String, Object, Operator, Dictionary<String, Object>)
  nameWithType: Postgres.CheckIfTableUpdatesData(String, String, String, Object, Operator, Dictionary<String, Object>)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.String, System.Object, AutoCheck.Core.Operator, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableUpdatesData
    path: ../checkers/Postgres.cs
    startLine: 548
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be updated into the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableUpdatesData(string schema, string table, string filterField, object filterValue, Operator filterOperator, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Core.Operator
      description: The operator to use, % for LIKE.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableUpdatesData(schema As String, table As String, filterField As String, filterValue As Object, filterOperator As  Operator, fields As Dictionary(Of String, Object)) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData*
  nameWithType.vb: Postgres.CheckIfTableUpdatesData(String, String, String, Object, Operator, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData(System.String, System.String, System.String, System.Object, AutoCheck.Core.Operator, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: CheckIfTableUpdatesData(String, String, String, Object, Operator, Dictionary(Of String, Object))
- uid: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String)
  id: CheckIfTableDeletesData(System.String,System.String)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableDeletesData(String, String)
  nameWithType: Postgres.CheckIfTableDeletesData(String, String)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String, System.String)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableDeletesData
    path: ../checkers/Postgres.cs
    startLine: 568
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be removed from the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableDeletesData(string schema, string table)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableDeletesData(schema As String, table As String) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator)
  id: CheckIfTableDeletesData(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableDeletesData(String, String, String, Object, Operator)
  nameWithType: Postgres.CheckIfTableDeletesData(String, String, String, Object, Operator)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData(System.String, System.String, System.String, System.Object, AutoCheck.Core.Operator)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableDeletesData
    path: ../checkers/Postgres.cs
    startLine: 581
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be removed from the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableDeletesData(string schema, string table, string filterField, object filterValue, Operator filterOperator = Operator.EQUALS)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Core.Operator
      description: The operator to use, % for LIKE.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableDeletesData(schema As String, table As String, filterField As String, filterValue As Object, filterOperator As  Operator  =  Operator.EQUALS) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.Int32)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.Int32)
  id: CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.Int32)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableMatchesAmountOfRegisters(String, String, Int32)
  nameWithType: Postgres.CheckIfTableMatchesAmountOfRegisters(String, String, Int32)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableMatchesAmountOfRegisters
    path: ../checkers/Postgres.cs
    startLine: 603
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be removed from the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableMatchesAmountOfRegisters(string schema, string table, int expected)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: expected
      type: System.Int32
      description: Amount of data expected to be found.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableMatchesAmountOfRegisters(schema As String, table As String, expected As Integer) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,System.Int32)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,System.Int32)
  id: CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,System.Int32)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableMatchesAmountOfRegisters(String, String, String, Object, Int32)
  nameWithType: Postgres.CheckIfTableMatchesAmountOfRegisters(String, String, String, Object, Int32)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String, System.String, System.String, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableMatchesAmountOfRegisters
    path: ../checkers/Postgres.cs
    startLine: 616
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be removed from the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableMatchesAmountOfRegisters(string schema, string table, string filterField, object filterValue, int expected)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is, the filter operator &apos;=&apos; will be used.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: expected
      type: System.Int32
      description: Amount of data expected to be found.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableMatchesAmountOfRegisters(schema As String, table As String, filterField As String, filterValue As Object, expected As Integer) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Int32)
  commentId: M:AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Int32)
  id: CheckIfTableMatchesAmountOfRegisters(System.String,System.String,System.String,System.Object,AutoCheck.Core.Operator,System.Int32)
  parent: AutoCheck.Checkers.Postgres
  langs:
  - csharp
  - vb
  name: CheckIfTableMatchesAmountOfRegisters(String, String, String, Object, Operator, Int32)
  nameWithType: Postgres.CheckIfTableMatchesAmountOfRegisters(String, String, String, Object, Operator, Int32)
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters(System.String, System.String, System.String, System.Object, AutoCheck.Core.Operator, System.Int32)
  type: Method
  source:
    remote:
      path: checkers/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfTableMatchesAmountOfRegisters
    path: ../checkers/Postgres.cs
    startLine: 630
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if old data can be removed from the table.\n"
  example: []
  syntax:
    content: public List<string> CheckIfTableMatchesAmountOfRegisters(string schema, string table, string filterField, object filterValue, Operator filterOperator, int expected)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Core.Operator
      description: The operator to use, % for LIKE.
    - id: expected
      type: System.Int32
      description: Amount of data expected to be found.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfTableMatchesAmountOfRegisters(schema As String, table As String, filterField As String, filterValue As Object, filterOperator As  Operator, expected As Integer) As List(Of String)
  overload: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Checkers
  commentId: N:AutoCheck.Checkers
  name: AutoCheck.Checkers
  nameWithType: AutoCheck.Checkers
  fullName: AutoCheck.Checkers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Checker
  commentId: T:AutoCheck.Core.Checker
  parent: AutoCheck.Core
  name: Checker
  nameWithType: Checker
  fullName: AutoCheck.Core.Checker
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32, Operator, Int32)
  nameWithType: Checker.CompareItems(String, Int32, Operator, Int32)
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32, AutoCheck.Core.Operator, System.Int32)
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32[], Operator, Int32[])
  nameWithType: Checker.CompareItems(String, Int32[], Operator, Int32[])
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32[], AutoCheck.Core.Operator, System.Int32[])
  nameWithType.vb: Checker.CompareItems(String, Int32(), Operator, Int32())
  fullName.vb: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32(), AutoCheck.Core.Operator, System.Int32())
  name.vb: CompareItems(String, Int32(), Operator, Int32())
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Checkers.Postgres.Connector*
  commentId: Overload:AutoCheck.Checkers.Postgres.Connector
  name: Connector
  nameWithType: Postgres.Connector
  fullName: AutoCheck.Checkers.Postgres.Connector
- uid: AutoCheck.Connectors.Postgres
  commentId: T:AutoCheck.Connectors.Postgres
  parent: AutoCheck.Connectors
  name: Postgres
  nameWithType: Postgres
  fullName: AutoCheck.Connectors.Postgres
- uid: AutoCheck.Connectors
  commentId: N:AutoCheck.Connectors
  name: AutoCheck.Connectors
  nameWithType: AutoCheck.Connectors
  fullName: AutoCheck.Connectors
- uid: AutoCheck.Checkers.Postgres.Host*
  commentId: Overload:AutoCheck.Checkers.Postgres.Host
  name: Host
  nameWithType: Postgres.Host
  fullName: AutoCheck.Checkers.Postgres.Host
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Checkers.Postgres.Database*
  commentId: Overload:AutoCheck.Checkers.Postgres.Database
  name: Database
  nameWithType: Postgres.Database
  fullName: AutoCheck.Checkers.Postgres.Database
- uid: AutoCheck.Checkers.Postgres.User*
  commentId: Overload:AutoCheck.Checkers.Postgres.User
  name: User
  nameWithType: Postgres.User
  fullName: AutoCheck.Checkers.Postgres.User
- uid: AutoCheck.Checkers.Postgres.Student*
  commentId: Overload:AutoCheck.Checkers.Postgres.Student
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Checkers.Postgres.Student
- uid: AutoCheck.Checkers.Postgres.#ctor*
  commentId: Overload:AutoCheck.Checkers.Postgres.#ctor
  name: Postgres
  nameWithType: Postgres.Postgres
  fullName: AutoCheck.Checkers.Postgres.Postgres
- uid: AutoCheck.Core.Checker.Dispose
  commentId: M:AutoCheck.Core.Checker.Dispose
  parent: AutoCheck.Core.Checker
  name: Dispose()
  nameWithType: Checker.Dispose()
  fullName: AutoCheck.Core.Checker.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Checkers.Postgres.Dispose*
  commentId: Overload:AutoCheck.Checkers.Postgres.Dispose
  name: Dispose
  nameWithType: Postgres.Dispose
  fullName: AutoCheck.Checkers.Postgres.Dispose
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges
  name: CheckIfTableMatchesPrivileges
  nameWithType: Postgres.CheckIfTableMatchesPrivileges
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesPrivileges
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges
  name: CheckIfTableContainsPrivileges
  nameWithType: Postgres.CheckIfTableContainsPrivileges
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableContainsPrivileges
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges
  name: CheckIfSchemaMatchesPrivileges
  nameWithType: Postgres.CheckIfSchemaMatchesPrivileges
  fullName: AutoCheck.Checkers.Postgres.CheckIfSchemaMatchesPrivileges
- uid: AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege
  name: CheckIfSchemaContainsPrivilege
  nameWithType: Postgres.CheckIfSchemaContainsPrivilege
  fullName: AutoCheck.Checkers.Postgres.CheckIfSchemaContainsPrivilege
- uid: AutoCheck.Checkers.Postgres.CheckRoleMembership*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckRoleMembership
  name: CheckRoleMembership
  nameWithType: Postgres.CheckRoleMembership
  fullName: AutoCheck.Checkers.Postgres.CheckRoleMembership
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Checkers.Postgres.CheckForeignKey*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckForeignKey
  name: CheckForeignKey
  nameWithType: Postgres.CheckForeignKey
  fullName: AutoCheck.Checkers.Postgres.CheckForeignKey
- uid: AutoCheck.Checkers.Postgres.CheckIfEntryAdded*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfEntryAdded
  name: CheckIfEntryAdded
  nameWithType: Postgres.CheckIfEntryAdded
  fullName: AutoCheck.Checkers.Postgres.CheckIfEntryAdded
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Checkers.Postgres.CheckIfEntryRemoved*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfEntryRemoved
  name: CheckIfEntryRemoved
  nameWithType: Postgres.CheckIfEntryRemoved
  fullName: AutoCheck.Checkers.Postgres.CheckIfEntryRemoved
- uid: AutoCheck.Checkers.Postgres.CheckIfTableContainsData*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableContainsData
  name: CheckIfTableContainsData
  nameWithType: Postgres.CheckIfTableContainsData
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableContainsData
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfSelectContainsData
  name: CheckIfSelectContainsData
  nameWithType: Postgres.CheckIfSelectContainsData
  fullName: AutoCheck.Checkers.Postgres.CheckIfSelectContainsData
- uid: AutoCheck.Checkers.Postgres.CheckIfTableExists*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableExists
  name: CheckIfTableExists
  nameWithType: Postgres.CheckIfTableExists
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableExists
- uid: AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition
  name: CheckIfViewMatchesDefinition
  nameWithType: Postgres.CheckIfViewMatchesDefinition
  fullName: AutoCheck.Checkers.Postgres.CheckIfViewMatchesDefinition
- uid: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableInsertsData
  name: CheckIfTableInsertsData
  nameWithType: Postgres.CheckIfTableInsertsData
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableInsertsData
- uid: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData
  name: CheckIfTableUpdatesData
  nameWithType: Postgres.CheckIfTableUpdatesData
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableUpdatesData
- uid: AutoCheck.Core.Operator
  commentId: T:AutoCheck.Core.Operator
  parent: AutoCheck.Core
  name: Operator
  nameWithType: Operator
  fullName: AutoCheck.Core.Operator
- uid: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableDeletesData
  name: CheckIfTableDeletesData
  nameWithType: Postgres.CheckIfTableDeletesData
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableDeletesData
- uid: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters*
  commentId: Overload:AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters
  name: CheckIfTableMatchesAmountOfRegisters
  nameWithType: Postgres.CheckIfTableMatchesAmountOfRegisters
  fullName: AutoCheck.Checkers.Postgres.CheckIfTableMatchesAmountOfRegisters
