### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Connectors.CsvDocument
  commentId: T:AutoCheck.Core.Connectors.CsvDocument
  id: CsvDocument
  parent: AutoCheck.Core.Connectors
  children:
  - AutoCheck.Core.Connectors.CsvDocument.#ctor(System.String,System.Char,System.Char)
  - AutoCheck.Core.Connectors.CsvDocument.Content
  - AutoCheck.Core.Connectors.CsvDocument.Count
  - AutoCheck.Core.Connectors.CsvDocument.GetLine(System.Int32)
  - AutoCheck.Core.Connectors.CsvDocument.Headers
  - AutoCheck.Core.Connectors.CsvDocument.Validate
  langs:
  - csharp
  - vb
  name: CsvDocument
  nameWithType: CsvDocument
  fullName: AutoCheck.Core.Connectors.CsvDocument
  type: Class
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: CsvDocument
    path: ../core/connectors/Csv.cs
    startLine: 30
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nContains a CSV document content (without data mappings, all the content will be a string).\n"
  example: []
  syntax:
    content: 'public class CsvDocument : object'
    content.vb: >-
      Public Class CsvDocument
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - AutoCheck.Core.Connectors.CsvDocument.ObjectExtensions.DeepClone``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Connectors.CsvDocument.Content
  commentId: P:AutoCheck.Core.Connectors.CsvDocument.Content
  id: Content
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: CsvDocument.Content
  fullName: AutoCheck.Core.Connectors.CsvDocument.Content
  type: Property
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: Content
    path: ../core/connectors/Csv.cs
    startLine: 40
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nAll the content, grouped by columns.\n"
  example: []
  syntax:
    content: public Dictionary<string, List<string>> Content { get; }
    parameters: []
    return:
      type: Dictionary{System.String,List{System.String}}
      description: ''
    content.vb: Public ReadOnly Property Content As Dictionary(Of String, List(Of String))
  overload: AutoCheck.Core.Connectors.CsvDocument.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.CsvDocument.Headers
  commentId: P:AutoCheck.Core.Connectors.CsvDocument.Headers
  id: Headers
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: Headers
  nameWithType: CsvDocument.Headers
  fullName: AutoCheck.Core.Connectors.CsvDocument.Headers
  type: Property
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: Headers
    path: ../core/connectors/Csv.cs
    startLine: 46
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns the header names\n"
  example: []
  syntax:
    content: public string[] Headers { get; }
    parameters: []
    return:
      type: System.String[]
      description: ''
    content.vb: Public ReadOnly Property Headers As String()
  overload: AutoCheck.Core.Connectors.CsvDocument.Headers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.CsvDocument.Count
  commentId: P:AutoCheck.Core.Connectors.CsvDocument.Count
  id: Count
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CsvDocument.Count
  fullName: AutoCheck.Core.Connectors.CsvDocument.Count
  type: Property
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: Count
    path: ../core/connectors/Csv.cs
    startLine: 57
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturn the amount of lines\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Public ReadOnly Property Count As Integer
  overload: AutoCheck.Core.Connectors.CsvDocument.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.CsvDocument.#ctor(System.String,System.Char,System.Char)
  commentId: M:AutoCheck.Core.Connectors.CsvDocument.#ctor(System.String,System.Char,System.Char)
  id: '#ctor(System.String,System.Char,System.Char)'
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: CsvDocument(String, Char, Char)
  nameWithType: CsvDocument.CsvDocument(String, Char, Char)
  fullName: AutoCheck.Core.Connectors.CsvDocument.CsvDocument(System.String, System.Char, System.Char)
  type: Constructor
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/Csv.cs
    startLine: 69
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates a new CSV Document instance, parsing an existing CSV file.\n"
  example: []
  syntax:
    content: public CsvDocument(string file, char fieldDelimiter = ',', char textDelimiter = '"')
    parameters:
    - id: file
      type: System.String
      description: CSV file path.
    - id: fieldDelimiter
      type: System.Char
      description: Field delimiter char.
    - id: textDelimiter
      type: System.Char
      description: Text delimiter char.
    content.vb: Public Sub New(file As String, fieldDelimiter As Char = ","c, textDelimiter As Char = """"c)
  overload: AutoCheck.Core.Connectors.CsvDocument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.CsvDocument.Validate
  commentId: M:AutoCheck.Core.Connectors.CsvDocument.Validate
  id: Validate
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: CsvDocument.Validate()
  fullName: AutoCheck.Core.Connectors.CsvDocument.Validate()
  type: Method
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: Validate
    path: ../core/connectors/Csv.cs
    startLine: 100
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nChecks the amount of columns on each row, which must be equivalent between each other.\n"
  example: []
  syntax:
    content: public void Validate()
    content.vb: Public Sub Validate
  overload: AutoCheck.Core.Connectors.CsvDocument.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.CsvDocument.GetLine(System.Int32)
  commentId: M:AutoCheck.Core.Connectors.CsvDocument.GetLine(System.Int32)
  id: GetLine(System.Int32)
  parent: AutoCheck.Core.Connectors.CsvDocument
  langs:
  - csharp
  - vb
  name: GetLine(Int32)
  nameWithType: CsvDocument.GetLine(Int32)
  fullName: AutoCheck.Core.Connectors.CsvDocument.GetLine(System.Int32)
  type: Method
  source:
    remote:
      path: core/connectors/Csv.cs
      branch: master
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetLine
    path: ../core/connectors/Csv.cs
    startLine: 112
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns a line\n"
  example: []
  syntax:
    content: public Dictionary<string, string> GetLine(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the line that must be retrieved (from 1 to N).
    return:
      type: Dictionary{System.String,System.String}
      description: ''
    content.vb: Public Function GetLine(index As Integer) As Dictionary(Of String, String)
  overload: AutoCheck.Core.Connectors.CsvDocument.GetLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connectors.CsvDocument.ObjectExtensions.DeepClone``1
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  parent: ObjectExtensions
  definition: ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<CsvDocument>()
  nameWithType: ObjectExtensions.DeepClone<CsvDocument>()
  fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.CsvDocument>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of CsvDocument)()
  fullName.vb: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.CsvDocument)()
  name.vb: DeepClone(Of CsvDocument)()
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone<CsvDocument>
    nameWithType: ObjectExtensions.DeepClone<CsvDocument>
    fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.CsvDocument>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone(Of CsvDocument)
    nameWithType: ObjectExtensions.DeepClone(Of CsvDocument)
    fullName: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.CsvDocument)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions.DeepClone``1(``0)
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions
  commentId: T:ObjectExtensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: ObjectExtensions
- uid: AutoCheck.Core.Connectors.CsvDocument.Content*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.Content
  name: Content
  nameWithType: CsvDocument.Content
  fullName: AutoCheck.Core.Connectors.CsvDocument.Content
- uid: Dictionary{System.String,List{System.String}}
  commentId: '!:Dictionary{System.String,List{System.String}}'
  definition: Dictionary`2
  name: Dictionary<String, List<String>>
  nameWithType: Dictionary<String, List<String>>
  fullName: Dictionary<System.String, List<System.String>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullName.vb: Dictionary(Of System.String, List(Of System.String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.CsvDocument.Headers*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.Headers
  name: Headers
  nameWithType: CsvDocument.Headers
  fullName: AutoCheck.Core.Connectors.CsvDocument.Headers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.Connectors.CsvDocument.Count*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.Count
  name: Count
  nameWithType: CsvDocument.Count
  fullName: AutoCheck.Core.Connectors.CsvDocument.Count
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Connectors.CsvDocument.#ctor*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.#ctor
  name: CsvDocument
  nameWithType: CsvDocument.CsvDocument
  fullName: AutoCheck.Core.Connectors.CsvDocument.CsvDocument
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: AutoCheck.Core.Connectors.CsvDocument.Validate*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.Validate
  name: Validate
  nameWithType: CsvDocument.Validate
  fullName: AutoCheck.Core.Connectors.CsvDocument.Validate
- uid: AutoCheck.Core.Connectors.CsvDocument.GetLine*
  commentId: Overload:AutoCheck.Core.Connectors.CsvDocument.GetLine
  name: GetLine
  nameWithType: CsvDocument.GetLine
  fullName: AutoCheck.Core.Connectors.CsvDocument.GetLine
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
