### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  commentId: T:AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  id: PlainText.PlainTextDocument
  parent: AutoCheck.Core.Connectors
  children:
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String)
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String[])
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine(System.Int32)
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
  langs:
  - csharp
  - vb
  name: PlainText.PlainTextDocument
  nameWithType: PlainText.PlainTextDocument
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  type: Class
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: PlainTextDocument
    path: ../core/connectors/PlainText.cs
    startLine: 31
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nContains a PlainText document content.\n"
  example: []
  syntax:
    content: 'public class PlainTextDocument : object'
    content.vb: >-
      Public Class PlainTextDocument
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - AutoCheck.Core.Connectors.PlainText.PlainTextDocument.ObjectExtensions.DeepClone``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
  commentId: P:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
  id: Content
  parent: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: PlainText.PlainTextDocument.Content
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
  type: Property
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Content
    path: ../core/connectors/PlainText.cs
    startLine: 37
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDocument&apos;s content\n"
  example: []
  syntax:
    content: public string Content { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Content As String
  overload: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
  commentId: P:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
  id: Lines
  parent: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  langs:
  - csharp
  - vb
  name: Lines
  nameWithType: PlainText.PlainTextDocument.Lines
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
  type: Property
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Lines
    path: ../core/connectors/PlainText.cs
    startLine: 46
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDocument&apos;s amount of lines\n"
  example: []
  syntax:
    content: public int Lines { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Lines As Integer
  overload: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String)
  commentId: M:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  langs:
  - csharp
  - vb
  name: PlainTextDocument(String)
  nameWithType: PlainText.PlainTextDocument.PlainTextDocument(String)
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.PlainTextDocument(System.String)
  type: Constructor
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/PlainText.cs
    startLine: 56
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates a new PlaintText Document instance, parsing an existing PlainText file.\n"
  example: []
  syntax:
    content: public PlainTextDocument(string file)
    parameters:
    - id: file
      type: System.String
      description: PlainText file path.
    content.vb: Public Sub New(file As String)
  overload: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String[])
  commentId: M:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  langs:
  - csharp
  - vb
  name: PlainTextDocument(String[])
  nameWithType: PlainText.PlainTextDocument.PlainTextDocument(String[])
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.PlainTextDocument(System.String[])
  type: Constructor
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/PlainText.cs
    startLine: 67
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates a new PlaintText Document instance, parsing the given lines.\n"
  example: []
  syntax:
    content: public PlainTextDocument(string[] lines)
    parameters:
    - id: lines
      type: System.String[]
      description: The file content.
    content.vb: Public Sub New(lines As String())
  overload: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor*
  nameWithType.vb: PlainText.PlainTextDocument.PlainTextDocument(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.PlainTextDocument(System.String())
  name.vb: PlainTextDocument(String())
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine(System.Int32)
  commentId: M:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine(System.Int32)
  id: GetLine(System.Int32)
  parent: AutoCheck.Core.Connectors.PlainText.PlainTextDocument
  langs:
  - csharp
  - vb
  name: GetLine(Int32)
  nameWithType: PlainText.PlainTextDocument.GetLine(Int32)
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine(System.Int32)
  type: Method
  source:
    remote:
      path: core/connectors/PlainText.cs
      branch: v2.23.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetLine
    path: ../core/connectors/PlainText.cs
    startLine: 76
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns a line\n"
  example: []
  syntax:
    content: public string GetLine(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the line that must be retrieved (from 1 to N).
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetLine(index As Integer) As String
  overload: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.ObjectExtensions.DeepClone``1
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  parent: ObjectExtensions
  definition: ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<PlainText.PlainTextDocument>()
  nameWithType: ObjectExtensions.DeepClone<PlainText.PlainTextDocument>()
  fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.PlainText.PlainTextDocument>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of PlainText.PlainTextDocument)()
  fullName.vb: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.PlainText.PlainTextDocument)()
  name.vb: DeepClone(Of PlainText.PlainTextDocument)()
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone<PlainText.PlainTextDocument>
    nameWithType: ObjectExtensions.DeepClone<PlainText.PlainTextDocument>
    fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Connectors.PlainText.PlainTextDocument>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone(Of PlainText.PlainTextDocument)
    nameWithType: ObjectExtensions.DeepClone(Of PlainText.PlainTextDocument)
    fullName: ObjectExtensions.DeepClone(Of AutoCheck.Core.Connectors.PlainText.PlainTextDocument)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions.DeepClone``1(``0)
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions
  commentId: T:ObjectExtensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: ObjectExtensions
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content*
  commentId: Overload:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
  name: Content
  nameWithType: PlainText.PlainTextDocument.Content
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Content
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines*
  commentId: Overload:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
  name: Lines
  nameWithType: PlainText.PlainTextDocument.Lines
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.Lines
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor*
  commentId: Overload:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.#ctor
  name: PlainTextDocument
  nameWithType: PlainText.PlainTextDocument.PlainTextDocument
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.PlainTextDocument
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine*
  commentId: Overload:AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine
  name: GetLine
  nameWithType: PlainText.PlainTextDocument.GetLine
  fullName: AutoCheck.Core.Connectors.PlainText.PlainTextDocument.GetLine
