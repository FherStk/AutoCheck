### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.CopyDetectors.Base
  commentId: T:AutoCheck.Core.CopyDetectors.Base
  id: Base
  parent: AutoCheck.Core.CopyDetectors
  children:
  - AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.Int32,System.String)
  - AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.String)
  - AutoCheck.Core.CopyDetectors.Base.Compare
  - AutoCheck.Core.CopyDetectors.Base.CopyDetected(System.String)
  - AutoCheck.Core.CopyDetectors.Base.Count
  - AutoCheck.Core.CopyDetectors.Base.Dispose
  - AutoCheck.Core.CopyDetectors.Base.FilePattern
  - AutoCheck.Core.CopyDetectors.Base.GetDetails(System.String)
  - AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  - AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  - AutoCheck.Core.CopyDetectors.Base.Load(System.String)
  - AutoCheck.Core.CopyDetectors.Base.Load(System.String,System.String)
  - AutoCheck.Core.CopyDetectors.Base.Sensibility
  - AutoCheck.Core.CopyDetectors.Base.Threshold
  langs:
  - csharp
  - vb
  name: Base
  nameWithType: Base
  fullName: AutoCheck.Core.CopyDetectors.Base
  type: Class
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Base
    path: ../core/copy/Base.cs
    startLine: 32
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nThis class must be inherited in order to develop a custom copy detectors.\nThis class is in charge of performing the copy detection along the student&apos;s files, code the abstract methods and provide all the necessary extra code needed.\n"
  example: []
  syntax:
    content: 'public abstract class Base : IDisposable'
    content.vb: >-
      Public MustInherit Class Base
          Inherits IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - AutoCheck.Core.CopyDetectors.PlainText
  extensionMethods:
  - AutoCheck.Core.CopyDetectors.Base.ObjectExtensions.DeepClone``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: AutoCheck.Core.CopyDetectors.Base.Threshold
  commentId: P:AutoCheck.Core.CopyDetectors.Base.Threshold
  id: Threshold
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Threshold
  nameWithType: Base.Threshold
  fullName: AutoCheck.Core.CopyDetectors.Base.Threshold
  type: Property
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Threshold
    path: ../core/copy/Base.cs
    startLine: 37
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nMatch values higher than this one, will be considered as a potential copy.\n"
  example: []
  syntax:
    content: public float Threshold { get; protected set; }
    parameters: []
    return:
      type: System.Single
      description: ''
    content.vb: Public Property Threshold As Single
  overload: AutoCheck.Core.CopyDetectors.Base.Threshold*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: AutoCheck.Core.CopyDetectors.Base.Sensibility
  commentId: P:AutoCheck.Core.CopyDetectors.Base.Sensibility
  id: Sensibility
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Sensibility
  nameWithType: Base.Sensibility
  fullName: AutoCheck.Core.CopyDetectors.Base.Sensibility
  type: Property
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Sensibility
    path: ../core/copy/Base.cs
    startLine: 43
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nThe comparison sensibility, a lower value increases the sensibility so produces more potential copy results.\n"
  example: []
  syntax:
    content: protected int Sensibility { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Protected Property Sensibility As Integer
  overload: AutoCheck.Core.CopyDetectors.Base.Sensibility*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: AutoCheck.Core.CopyDetectors.Base.FilePattern
  commentId: P:AutoCheck.Core.CopyDetectors.Base.FilePattern
  id: FilePattern
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: FilePattern
  nameWithType: Base.FilePattern
  fullName: AutoCheck.Core.CopyDetectors.Base.FilePattern
  type: Property
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: FilePattern
    path: ../core/copy/Base.cs
    startLine: 49
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nPattern that will be used to find and load files within the copy detector.\n"
  example: []
  syntax:
    content: public string FilePattern { get; protected set; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public Property FilePattern As String
  overload: AutoCheck.Core.CopyDetectors.Base.FilePattern*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: AutoCheck.Core.CopyDetectors.Base.Count
  commentId: P:AutoCheck.Core.CopyDetectors.Base.Count
  id: Count
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Base.Count
  fullName: AutoCheck.Core.CopyDetectors.Base.Count
  type: Property
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Count
    path: ../core/copy/Base.cs
    startLine: 55
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nThe amount of items loaded into the copy detector.\n"
  example: []
  syntax:
    content: public abstract int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Public MustOverride ReadOnly Property Count As Integer
  overload: AutoCheck.Core.CopyDetectors.Base.Count*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.Int32,System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.Int32,System.String)
  id: '#ctor(System.Single,System.Int32,System.String)'
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Base(Single, Int32, String)
  nameWithType: Base.Base(Single, Int32, String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Base(System.Single, System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/copy/Base.cs
    startLine: 60
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nCreates a new instance, setting up its properties in order to allow copy detection with the lowest possible false-positive probability.\n"
  example: []
  syntax:
    content: public Base(float threshold, int sensibility, string filePattern = "*")
    parameters:
    - id: threshold
      type: System.Single
    - id: sensibility
      type: System.Int32
    - id: filePattern
      type: System.String
    content.vb: Public Sub New(threshold As Single, sensibility As Integer, filePattern As String = "*")
  overload: AutoCheck.Core.CopyDetectors.Base.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.#ctor(System.Single,System.String)
  id: '#ctor(System.Single,System.String)'
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Base(Single, String)
  nameWithType: Base.Base(Single, String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Base(System.Single, System.String)
  type: Constructor
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/copy/Base.cs
    startLine: 74
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nCreates a new instance, setting up its properties in order to allow copy detection with the lowest possible false-positive probability.\n"
  example: []
  syntax:
    content: public Base(float threshold, string filePattern = "*")
    parameters:
    - id: threshold
      type: System.Single
    - id: filePattern
      type: System.String
    content.vb: Public Sub New(threshold As Single, filePattern As String = "*")
  overload: AutoCheck.Core.CopyDetectors.Base.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.CopyDetectors.Base.Dispose
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Dispose
  id: Dispose
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Base.Dispose()
  fullName: AutoCheck.Core.CopyDetectors.Base.Dispose()
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../core/copy/Base.cs
    startLine: 80
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nDisposes the current copy detector instance and releases its internal objects.\n"
  example: []
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose
  overload: AutoCheck.Core.CopyDetectors.Base.Dispose*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: AutoCheck.Core.CopyDetectors.Base.Load(System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Load(System.String)
  id: Load(System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Load(String)
  nameWithType: Base.Load(String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Load(System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Load
    path: ../core/copy/Base.cs
    startLine: 86
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nLoads a local file into the local collection in order to compare it when Compare() is called.\n"
  example: []
  syntax:
    content: public virtual void Load(string path)
    parameters:
    - id: path
      type: System.String
      description: Path to a file or folder; if the path points to a folder, the first file found using the FilePattern property will be loaded.
    content.vb: Public Overridable Sub Load(path As String)
  overload: AutoCheck.Core.CopyDetectors.Base.Load*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  id: Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Load(Utils.OS, String, String, String, String)
  nameWithType: Base.Load(Utils.OS, String, String, String, String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Load
    path: ../core/copy/Base.cs
    startLine: 105
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nLoads a remote file into the local collection in order to compare it when Compare() is called.\n"
  example: []
  syntax:
    content: public virtual void Load(Utils.OS os, string host, string username, string password, string path)
    parameters:
    - id: os
      type: AutoCheck.Core.Utils.OS
    - id: host
      type: System.String
      description: Remote OS family.
    - id: username
      type: System.String
      description: The username wich will be used to connect with the remote host.
    - id: password
      type: System.String
      description: The password wich will be used to connect with the remote host.
    - id: path
      type: System.String
    content.vb: Public Overridable Sub Load(os As Utils.OS, host As String, username As String, password As String, path As String)
  overload: AutoCheck.Core.CopyDetectors.Base.Load*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  id: Load(AutoCheck.Core.Utils.OS,System.String,System.String,System.String,System.Int32,System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Load(Utils.OS, String, String, String, Int32, String)
  nameWithType: Base.Load(Utils.OS, String, String, String, Int32, String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Load(AutoCheck.Core.Utils.OS, System.String, System.String, System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Load
    path: ../core/copy/Base.cs
    startLine: 119
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nLoads a remote file into the local collection in order to compare it when Compare() is called.\n"
  example: []
  syntax:
    content: public virtual void Load(Utils.OS os, string host, string username, string password, int port, string path)
    parameters:
    - id: os
      type: AutoCheck.Core.Utils.OS
    - id: host
      type: System.String
      description: Remote OS family.
    - id: username
      type: System.String
      description: The username wich will be used to connect with the remote host.
    - id: password
      type: System.String
      description: The password wich will be used to connect with the remote host.
    - id: port
      type: System.Int32
    - id: path
      type: System.String
      description: Path to a file or folder; if the path points to a folder, the first file found using the FilePattern property will be loaded.
    content.vb: Public Overridable Sub Load(os As Utils.OS, host As String, username As String, password As String, port As Integer, path As String)
  overload: AutoCheck.Core.CopyDetectors.Base.Load*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: AutoCheck.Core.CopyDetectors.Base.Load(System.String,System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Load(System.String,System.String)
  id: Load(System.String,System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Load(String, String)
  nameWithType: Base.Load(String, String)
  fullName: AutoCheck.Core.CopyDetectors.Base.Load(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Load
    path: ../core/copy/Base.cs
    startLine: 146
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nLoads the given file into the local collection, in order to compare it when Compare() is called.\n"
  example: []
  syntax:
    content: public abstract void Load(string folder, string file)
    parameters:
    - id: folder
      type: System.String
      description: Path where the files will be looked for.
    - id: file
      type: System.String
      description: File that will be loaded into the copy detector.
    content.vb: Public MustOverride Sub Load(folder As String, file As String)
  overload: AutoCheck.Core.CopyDetectors.Base.Load*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: AutoCheck.Core.CopyDetectors.Base.Compare
  commentId: M:AutoCheck.Core.CopyDetectors.Base.Compare
  id: Compare
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: Compare()
  nameWithType: Base.Compare()
  fullName: AutoCheck.Core.CopyDetectors.Base.Compare()
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: Compare
    path: ../core/copy/Base.cs
    startLine: 151
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nPerforms the item comparison between each other.\n"
  example: []
  syntax:
    content: public abstract void Compare()
    content.vb: Public MustOverride Sub Compare
  overload: AutoCheck.Core.CopyDetectors.Base.Compare*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: AutoCheck.Core.CopyDetectors.Base.CopyDetected(System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.CopyDetected(System.String)
  id: CopyDetected(System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: CopyDetected(String)
  nameWithType: Base.CopyDetected(String)
  fullName: AutoCheck.Core.CopyDetectors.Base.CopyDetected(System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: CopyDetected
    path: ../core/copy/Base.cs
    startLine: 160
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nChecks if a potential copy has been detected.\nThe Compare() method should be called firts.\n"
  example: []
  syntax:
    content: public abstract bool CopyDetected(string source)
    parameters:
    - id: source
      type: System.String
      description: The source item asked for.
    return:
      type: System.Boolean
      description: True of copy has been detected.
    content.vb: Public MustOverride Function CopyDetected(source As String) As Boolean
  overload: AutoCheck.Core.CopyDetectors.Base.CopyDetected*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: AutoCheck.Core.CopyDetectors.Base.GetDetails(System.String)
  commentId: M:AutoCheck.Core.CopyDetectors.Base.GetDetails(System.String)
  id: GetDetails(System.String)
  parent: AutoCheck.Core.CopyDetectors.Base
  langs:
  - csharp
  - vb
  name: GetDetails(String)
  nameWithType: Base.GetDetails(String)
  fullName: AutoCheck.Core.CopyDetectors.Base.GetDetails(System.String)
  type: Method
  source:
    remote:
      path: core/copy/Base.cs
      branch: jplag-upgrade
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetDetails
    path: ../core/copy/Base.cs
    startLine: 167
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.CopyDetectors
  summary: "\nReturns a printable details list, containing information about the comparissons (student, source and % of match).\n"
  example: []
  syntax:
    content: public abstract (string Folder, string File, (string Folder, string File, float Match)[] matches) GetDetails(string path)
    parameters:
    - id: path
      type: System.String
      description: Student name
    return:
      type: System.ValueTuple{System.String,System.String,System.ValueTuple{System.String,System.String,System.Single}[]}
      description: Left file followed by all the right files compared with its matching score.
    content.vb: Public MustOverride Function GetDetails(path As String) As(Folder As String, File As String, matches As(Folder As String, File As String, Match As Single)(Of String , String, Single)())(Of String , String, (Folder
  overload: AutoCheck.Core.CopyDetectors.Base.GetDetails*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: AutoCheck.Core.CopyDetectors
  commentId: N:AutoCheck.Core.CopyDetectors
  name: AutoCheck.Core.CopyDetectors
  nameWithType: AutoCheck.Core.CopyDetectors
  fullName: AutoCheck.Core.CopyDetectors
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.CopyDetectors.Base.ObjectExtensions.DeepClone``1
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  parent: ObjectExtensions
  definition: ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<Base>()
  nameWithType: ObjectExtensions.DeepClone<Base>()
  fullName: ObjectExtensions.DeepClone<AutoCheck.Core.CopyDetectors.Base>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of Base)()
  fullName.vb: ObjectExtensions.DeepClone(Of AutoCheck.Core.CopyDetectors.Base)()
  name.vb: DeepClone(Of Base)()
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone<Base>
    nameWithType: ObjectExtensions.DeepClone<Base>
    fullName: ObjectExtensions.DeepClone<AutoCheck.Core.CopyDetectors.Base>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone(Of Base)
    nameWithType: ObjectExtensions.DeepClone(Of Base)
    fullName: ObjectExtensions.DeepClone(Of AutoCheck.Core.CopyDetectors.Base)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions.DeepClone``1(``0)
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions
  commentId: T:ObjectExtensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: ObjectExtensions
- uid: AutoCheck.Core.CopyDetectors.Base.Threshold*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Threshold
  name: Threshold
  nameWithType: Base.Threshold
  fullName: AutoCheck.Core.CopyDetectors.Base.Threshold
- uid: System.Single
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: AutoCheck.Core.CopyDetectors.Base.Sensibility*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Sensibility
  name: Sensibility
  nameWithType: Base.Sensibility
  fullName: AutoCheck.Core.CopyDetectors.Base.Sensibility
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.CopyDetectors.Base.FilePattern*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.FilePattern
  name: FilePattern
  nameWithType: Base.FilePattern
  fullName: AutoCheck.Core.CopyDetectors.Base.FilePattern
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.CopyDetectors.Base.Count*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Count
  name: Count
  nameWithType: Base.Count
  fullName: AutoCheck.Core.CopyDetectors.Base.Count
- uid: AutoCheck.Core.CopyDetectors.Base.#ctor*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.#ctor
  name: Base
  nameWithType: Base.Base
  fullName: AutoCheck.Core.CopyDetectors.Base.Base
- uid: AutoCheck.Core.CopyDetectors.Base.Dispose*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Dispose
  name: Dispose
  nameWithType: Base.Dispose
  fullName: AutoCheck.Core.CopyDetectors.Base.Dispose
- uid: AutoCheck.Core.CopyDetectors.Base.Load*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Load
  name: Load
  nameWithType: Base.Load
  fullName: AutoCheck.Core.CopyDetectors.Base.Load
- uid: AutoCheck.Core.Utils.OS
  commentId: T:AutoCheck.Core.Utils.OS
  parent: AutoCheck.Core
  name: Utils.OS
  nameWithType: Utils.OS
  fullName: AutoCheck.Core.Utils.OS
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Core.CopyDetectors.Base.Compare*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.Compare
  name: Compare
  nameWithType: Base.Compare
  fullName: AutoCheck.Core.CopyDetectors.Base.Compare
- uid: AutoCheck.Core.CopyDetectors.Base.CopyDetected*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.CopyDetected
  name: CopyDetected
  nameWithType: Base.CopyDetected
  fullName: AutoCheck.Core.CopyDetectors.Base.CopyDetected
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Core.CopyDetectors.Base.GetDetails*
  commentId: Overload:AutoCheck.Core.CopyDetectors.Base.GetDetails
  name: GetDetails
  nameWithType: Base.GetDetails
  fullName: AutoCheck.Core.CopyDetectors.Base.GetDetails
- uid: System.ValueTuple{System.String,System.String,System.ValueTuple{System.String,System.String,System.Single}[]}
  commentId: '!:System.ValueTuple{System.String,System.String,System.ValueTuple{System.String,System.String,System.Single}[]}'
  definition: System.ValueTuple`3
  name: (, , )<String, String, (, , )<String, String, Single>[]>
  nameWithType: (, , )<String, String, (, , )<String, String, Single>[]>
  fullName: System.ValueTuple<System.String, System.String, System.ValueTuple<System.String, System.String, System.Single>[]>
  nameWithType.vb: (, , )(Of String, String, (, , )(Of String, String, Single)())
  fullName.vb: System.ValueTuple(Of System.String, System.String, System.ValueTuple(Of System.String, System.String, System.Single)())
  name.vb: (, , )(Of String, String, (, , )(Of String, String, Single)())
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  isExternal: true
  name: (, , )<, , >
  nameWithType: (, , )<, , >
  fullName: System.ValueTuple<, , >
  nameWithType.vb: (, , )(Of , , )
  fullName.vb: System.ValueTuple(Of , , )
  name.vb: (, , )(Of , , )
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
