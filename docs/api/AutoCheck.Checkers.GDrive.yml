### YamlMime:ManagedReference
items:
- uid: AutoCheck.Checkers.GDrive
  commentId: T:AutoCheck.Checkers.GDrive
  id: GDrive
  parent: AutoCheck.Checkers
  children:
  - AutoCheck.Checkers.GDrive.#ctor(System.String,System.String)
  - AutoCheck.Checkers.GDrive.CheckIfFileExists(System.String,System.String,System.Boolean)
  - AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  - AutoCheck.Checkers.GDrive.CheckIfFolderExists(System.String,System.String,System.Boolean)
  - AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  - AutoCheck.Checkers.GDrive.Connector
  - AutoCheck.Checkers.GDrive.Dispose
  langs:
  - csharp
  - vb
  name: GDrive
  nameWithType: GDrive
  fullName: AutoCheck.Checkers.GDrive
  type: Class
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GDrive
    path: ../src/checkers/GDrive.cs
    startLine: 29
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nAllows data validations over a local shell (running local commands).\n"
  example: []
  syntax:
    content: 'public class GDrive : Checker, IDisposable'
    content.vb: >-
      Public Class GDrive

          Inherits Checker

          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Checker
  implements:
  - System.IDisposable
  inheritedMembers:
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Checkers.GDrive.Connector
  commentId: P:AutoCheck.Checkers.GDrive.Connector
  id: Connector
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: Connector
  nameWithType: GDrive.Connector
  fullName: AutoCheck.Checkers.GDrive.Connector
  type: Property
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Connector
    path: ../src/checkers/GDrive.cs
    startLine: 34
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe main connector, can be used to perform direct operations over the data source.\n"
  example: []
  syntax:
    content: public GDrive Connector { get; }
    parameters: []
    return:
      type: AutoCheck.Core.Connectors.GDrive
      description: ''
    content.vb: Public ReadOnly Property Connector As GDrive
  overload: AutoCheck.Checkers.GDrive.Connector*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.GDrive.#ctor(System.String,System.String)
  commentId: M:AutoCheck.Checkers.GDrive.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: GDrive(String, String)
  nameWithType: GDrive.GDrive(String, String)
  fullName: AutoCheck.Checkers.GDrive.GDrive(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../src/checkers/GDrive.cs
    startLine: 39
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCreates a new checker instance.\n"
  example: []
  syntax:
    content: public GDrive(string clientSecretJson, string userName)
    parameters:
    - id: clientSecretJson
      type: System.String
    - id: userName
      type: System.String
    content.vb: Public Sub New(clientSecretJson As String, userName As String)
  overload: AutoCheck.Checkers.GDrive.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.GDrive.Dispose
  commentId: M:AutoCheck.Checkers.GDrive.Dispose
  id: Dispose
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: GDrive.Dispose()
  fullName: AutoCheck.Checkers.GDrive.Dispose()
  type: Method
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../src/checkers/GDrive.cs
    startLine: 46
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Checker.Dispose
  overload: AutoCheck.Checkers.GDrive.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Checkers.GDrive.CheckIfFolderExists(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Checkers.GDrive.CheckIfFolderExists(System.String,System.String,System.Boolean)
  id: CheckIfFolderExists(System.String,System.String,System.Boolean)
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: CheckIfFolderExists(String, String, Boolean)
  nameWithType: GDrive.CheckIfFolderExists(String, String, Boolean)
  fullName: AutoCheck.Checkers.GDrive.CheckIfFolderExists(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfFolderExists
    path: ../src/checkers/GDrive.cs
    startLine: 57
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if a folder exists within the given path.\n"
  example: []
  syntax:
    content: public List<string> CheckIfFolderExists(string path, string folder, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be searched into.
    - id: folder
      type: System.String
      description: The folder to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfFolderExists(path As String, folder As String, recursive As Boolean = True) As List(Of String)
  overload: AutoCheck.Checkers.GDrive.CheckIfFolderExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.GDrive.CheckIfFileExists(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Checkers.GDrive.CheckIfFileExists(System.String,System.String,System.Boolean)
  id: CheckIfFileExists(System.String,System.String,System.Boolean)
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: CheckIfFileExists(String, String, Boolean)
  nameWithType: GDrive.CheckIfFileExists(String, String, Boolean)
  fullName: AutoCheck.Checkers.GDrive.CheckIfFileExists(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfFileExists
    path: ../src/checkers/GDrive.cs
    startLine: 78
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks if a file exists within the given path.\n"
  example: []
  syntax:
    content: public List<string> CheckIfFileExists(string path, string file, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the file will be searched into.
    - id: file
      type: System.String
      description: The file to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfFileExists(path As String, file As String, recursive As Boolean = True) As List(Of String)
  overload: AutoCheck.Checkers.GDrive.CheckIfFileExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  commentId: M:AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  id: CheckIfFoldersMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: CheckIfFoldersMatchesAmount(String, Int32, Boolean, Operator)
  nameWithType: GDrive.CheckIfFoldersMatchesAmount(String, Int32, Boolean, Operator)
  fullName: AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount(System.String, System.Int32, System.Boolean, AutoCheck.Core.Operator)
  type: Method
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfFoldersMatchesAmount
    path: ../src/checkers/GDrive.cs
    startLine: 100
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks the amount of expected folders.\n"
  example: []
  syntax:
    content: public List<string> CheckIfFoldersMatchesAmount(string path, int expected, bool recursive = true, Operator op = Operator.EQUALS)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be searched into.
    - id: expected
      type: System.Int32
      description: The expected amount.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    - id: op
      type: AutoCheck.Core.Operator
      description: The comparation operator to use when matching the result.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfFoldersMatchesAmount(path As String, expected As Integer, recursive As Boolean = True, op As  Operator  =  Operator.EQUALS) As List(Of String)
  overload: AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  commentId: M:AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  id: CheckIfFilesMatchesAmount(System.String,System.Int32,System.Boolean,AutoCheck.Core.Operator)
  parent: AutoCheck.Checkers.GDrive
  langs:
  - csharp
  - vb
  name: CheckIfFilesMatchesAmount(String, Int32, Boolean, Operator)
  nameWithType: GDrive.CheckIfFilesMatchesAmount(String, Int32, Boolean, Operator)
  fullName: AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount(System.String, System.Int32, System.Boolean, AutoCheck.Core.Operator)
  type: Method
  source:
    remote:
      path: src/checkers/GDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfFilesMatchesAmount
    path: ../src/checkers/GDrive.cs
    startLine: 123
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nChecks the amount of expected files.\n"
  example: []
  syntax:
    content: public List<string> CheckIfFilesMatchesAmount(string path, int expected, bool recursive = true, Operator op = Operator.EQUALS)
    parameters:
    - id: path
      type: System.String
      description: Path where the files will be searched into.
    - id: expected
      type: System.Int32
      description: The expected amount.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    - id: op
      type: AutoCheck.Core.Operator
      description: The comparation operator to use when matching the result.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfFilesMatchesAmount(path As String, expected As Integer, recursive As Boolean = True, op As  Operator  =  Operator.EQUALS) As List(Of String)
  overload: AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Checkers
  commentId: N:AutoCheck.Checkers
  name: AutoCheck.Checkers
  nameWithType: AutoCheck.Checkers
  fullName: AutoCheck.Checkers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Checker
  commentId: T:AutoCheck.Core.Checker
  parent: AutoCheck.Core
  name: Checker
  nameWithType: Checker
  fullName: AutoCheck.Core.Checker
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32, Operator, Int32)
  nameWithType: Checker.CompareItems(String, Int32, Operator, Int32)
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32, AutoCheck.Core.Operator, System.Int32)
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32[], Operator, Int32[])
  nameWithType: Checker.CompareItems(String, Int32[], Operator, Int32[])
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32[], AutoCheck.Core.Operator, System.Int32[])
  nameWithType.vb: Checker.CompareItems(String, Int32(), Operator, Int32())
  fullName.vb: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32(), AutoCheck.Core.Operator, System.Int32())
  name.vb: CompareItems(String, Int32(), Operator, Int32())
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Checkers.GDrive.Connector*
  commentId: Overload:AutoCheck.Checkers.GDrive.Connector
  name: Connector
  nameWithType: GDrive.Connector
  fullName: AutoCheck.Checkers.GDrive.Connector
- uid: AutoCheck.Core.Connectors.GDrive
  commentId: T:AutoCheck.Core.Connectors.GDrive
  parent: AutoCheck.Core.Connectors
  name: GDrive
  nameWithType: GDrive
  fullName: AutoCheck.Core.Connectors.GDrive
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: AutoCheck.Checkers.GDrive.#ctor*
  commentId: Overload:AutoCheck.Checkers.GDrive.#ctor
  name: GDrive
  nameWithType: GDrive.GDrive
  fullName: AutoCheck.Checkers.GDrive.GDrive
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Checker.Dispose
  commentId: M:AutoCheck.Core.Checker.Dispose
  parent: AutoCheck.Core.Checker
  name: Dispose()
  nameWithType: Checker.Dispose()
  fullName: AutoCheck.Core.Checker.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Checkers.GDrive.Dispose*
  commentId: Overload:AutoCheck.Checkers.GDrive.Dispose
  name: Dispose
  nameWithType: GDrive.Dispose
  fullName: AutoCheck.Checkers.GDrive.Dispose
- uid: AutoCheck.Checkers.GDrive.CheckIfFolderExists*
  commentId: Overload:AutoCheck.Checkers.GDrive.CheckIfFolderExists
  name: CheckIfFolderExists
  nameWithType: GDrive.CheckIfFolderExists
  fullName: AutoCheck.Checkers.GDrive.CheckIfFolderExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutoCheck.Checkers.GDrive.CheckIfFileExists*
  commentId: Overload:AutoCheck.Checkers.GDrive.CheckIfFileExists
  name: CheckIfFileExists
  nameWithType: GDrive.CheckIfFileExists
  fullName: AutoCheck.Checkers.GDrive.CheckIfFileExists
- uid: AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount*
  commentId: Overload:AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount
  name: CheckIfFoldersMatchesAmount
  nameWithType: GDrive.CheckIfFoldersMatchesAmount
  fullName: AutoCheck.Checkers.GDrive.CheckIfFoldersMatchesAmount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Operator
  commentId: T:AutoCheck.Core.Operator
  parent: AutoCheck.Core
  name: Operator
  nameWithType: Operator
  fullName: AutoCheck.Core.Operator
- uid: AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount*
  commentId: Overload:AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount
  name: CheckIfFilesMatchesAmount
  nameWithType: GDrive.CheckIfFilesMatchesAmount
  fullName: AutoCheck.Checkers.GDrive.CheckIfFilesMatchesAmount
