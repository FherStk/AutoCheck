### YamlMime:ManagedReference
items:
- uid: AutoCheck.Checkers.Css
  commentId: T:AutoCheck.Checkers.Css
  id: Css
  parent: AutoCheck.Checkers
  children:
  - AutoCheck.Checkers.Css.#ctor(System.String,System.String)
  - AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)
  - AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String,System.String)
  - AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String[],System.Int32)
  - AutoCheck.Checkers.Css.Connector
  - AutoCheck.Checkers.Css.Dispose
  langs:
  - csharp
  - vb
  name: Css
  nameWithType: Css
  fullName: AutoCheck.Checkers.Css
  type: Class
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Css
    path: ../src/checkers/Css.cs
    startLine: 32
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nAllows data validations over a WEB set of files.\n"
  example: []
  syntax:
    content: 'public class Css : Checker, IDisposable'
    content.vb: >-
      Public Class Css

          Inherits Checker

          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Checker
  implements:
  - System.IDisposable
  inheritedMembers:
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  - AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Checkers.Css.Connector
  commentId: P:AutoCheck.Checkers.Css.Connector
  id: Connector
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: Connector
  nameWithType: Css.Connector
  fullName: AutoCheck.Checkers.Css.Connector
  type: Property
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Connector
    path: ../src/checkers/Css.cs
    startLine: 37
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nThe main connector, can be used to perform direct operations over the data source.\n"
  example: []
  syntax:
    content: public Css Connector { get; }
    parameters: []
    return:
      type: AutoCheck.Connectors.Css
      description: ''
    content.vb: Public ReadOnly Property Connector As Css
  overload: AutoCheck.Checkers.Css.Connector*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Checkers.Css.#ctor(System.String,System.String)
  commentId: M:AutoCheck.Checkers.Css.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: Css(String, String)
  nameWithType: Css.Css(String, String)
  fullName: AutoCheck.Checkers.Css.Css(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../src/checkers/Css.cs
    startLine: 44
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nCreates a new checker instance.\n"
  example: []
  syntax:
    content: public Css(string studentFolder, string file)
    parameters:
    - id: studentFolder
      type: System.String
      description: The folder containing the web files.
    - id: file
      type: System.String
      description: CSS file name.
    content.vb: Public Sub New(studentFolder As String, file As String)
  overload: AutoCheck.Checkers.Css.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Css.Dispose
  commentId: M:AutoCheck.Checkers.Css.Dispose
  id: Dispose
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Css.Dispose()
  fullName: AutoCheck.Checkers.Css.Dispose()
  type: Method
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../src/checkers/Css.cs
    startLine: 51
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Checker.Dispose
  overload: AutoCheck.Checkers.Css.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String,System.String)
  commentId: M:AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String,System.String)
  id: CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String,System.String)
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: CheckIfPropertyApplied(HtmlDocument, String, String)
  nameWithType: Css.CheckIfPropertyApplied(HtmlDocument, String, String)
  fullName: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfPropertyApplied
    path: ../src/checkers/Css.cs
    startLine: 62
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nGiven a CSS property, checks if its has been applied within the HTML document.\n"
  example: []
  syntax:
    content: public List<string> CheckIfPropertyApplied(HtmlDocument htmlDoc, string property, string value = null)
    parameters:
    - id: htmlDoc
      type: HtmlAgilityPack.HtmlDocument
      description: The HTML document that must be using the property.
    - id: property
      type: System.String
      description: The CSS property name.
    - id: value
      type: System.String
      description: The CSS property value.
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfPropertyApplied(htmlDoc As HtmlDocument, property As String, value As String = Nothing) As List(Of String)
  overload: AutoCheck.Checkers.Css.CheckIfPropertyApplied*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String[],System.Int32)
  commentId: M:AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String[],System.Int32)
  id: CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.String[],System.Int32)
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: CheckIfPropertyApplied(HtmlDocument, String[], Int32)
  nameWithType: Css.CheckIfPropertyApplied(HtmlDocument, String[], Int32)
  fullName: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument, System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfPropertyApplied
    path: ../src/checkers/Css.cs
    startLine: 89
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nGiven a set of CSS properties, checks how many of them has been applied within the HTML document and if that matches with the given threshold.\n"
  example: []
  syntax:
    content: public List<string> CheckIfPropertyApplied(HtmlDocument htmlDoc, string[] properties, int expected = 0)
    parameters:
    - id: htmlDoc
      type: HtmlAgilityPack.HtmlDocument
      description: The HTML document that must be using the properties.
    - id: properties
      type: System.String[]
      description: A set of CSS property names.
    - id: expected
      type: System.Int32
      description: Expected minimum amount of applied properties (0 for MAX).
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfPropertyApplied(htmlDoc As HtmlDocument, properties As String(), expected As Integer = 0) As List(Of String)
  overload: AutoCheck.Checkers.Css.CheckIfPropertyApplied*
  nameWithType.vb: Css.CheckIfPropertyApplied(HtmlDocument, String(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument, System.String(), System.Int32)
  name.vb: CheckIfPropertyApplied(HtmlDocument, String(), Int32)
- uid: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)
  commentId: M:AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)
  id: CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)
  parent: AutoCheck.Checkers.Css
  langs:
  - csharp
  - vb
  name: CheckIfPropertyApplied(HtmlDocument, Dictionary<String, String>, Int32)
  nameWithType: Css.CheckIfPropertyApplied(HtmlDocument, Dictionary<String, String>, Int32)
  fullName: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument, System.Collections.Generic.Dictionary<System.String, System.String>, System.Int32)
  type: Method
  source:
    remote:
      path: src/checkers/Css.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CheckIfPropertyApplied
    path: ../src/checkers/Css.cs
    startLine: 100
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Checkers
  summary: "\nGiven a set of CSS properties, checks how many of them has been applied within the HTML document and if that matches with the given threshold.\n"
  example: []
  syntax:
    content: public List<string> CheckIfPropertyApplied(HtmlDocument htmlDoc, Dictionary<string, string> properties, int expected = 0)
    parameters:
    - id: htmlDoc
      type: HtmlAgilityPack.HtmlDocument
      description: The HTML document that must be using the properties.
    - id: properties
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: A set of CSS property names (key) and values (value).
    - id: expected
      type: System.Int32
      description: Expected minimum amount of applied properties (0 for MAX).
    return:
      type: System.Collections.Generic.List{System.String}
      description: The list of errors found (the list will be empty it there&apos;s no errors).
    content.vb: Public Function CheckIfPropertyApplied(htmlDoc As HtmlDocument, properties As Dictionary(Of String, String), expected As Integer = 0) As List(Of String)
  overload: AutoCheck.Checkers.Css.CheckIfPropertyApplied*
  nameWithType.vb: Css.CheckIfPropertyApplied(HtmlDocument, Dictionary(Of String, String), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Checkers.Css.CheckIfPropertyApplied(HtmlAgilityPack.HtmlDocument, System.Collections.Generic.Dictionary(Of System.String, System.String), System.Int32)
  name.vb: CheckIfPropertyApplied(HtmlDocument, Dictionary(Of String, String), Int32)
references:
- uid: AutoCheck.Checkers
  commentId: N:AutoCheck.Checkers
  name: AutoCheck.Checkers
  nameWithType: AutoCheck.Checkers
  fullName: AutoCheck.Checkers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Checker
  commentId: T:AutoCheck.Core.Checker
  parent: AutoCheck.Core
  name: Checker
  nameWithType: Checker
  fullName: AutoCheck.Core.Checker
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32, Operator, Int32)
  nameWithType: Checker.CompareItems(String, Int32, Operator, Int32)
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32, AutoCheck.Core.Operator, System.Int32)
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32,AutoCheck.Core.Operator,System.Int32)
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  commentId: M:AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
  parent: AutoCheck.Core.Checker
  isExternal: true
  name: CompareItems(String, Int32[], Operator, Int32[])
  nameWithType: Checker.CompareItems(String, Int32[], Operator, Int32[])
  fullName: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32[], AutoCheck.Core.Operator, System.Int32[])
  nameWithType.vb: Checker.CompareItems(String, Int32(), Operator, Int32())
  fullName.vb: AutoCheck.Core.Checker.CompareItems(System.String, System.Int32(), AutoCheck.Core.Operator, System.Int32())
  name.vb: CompareItems(String, Int32(), Operator, Int32())
  spec.csharp:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.CompareItems(System.String,System.Int32[],AutoCheck.Core.Operator,System.Int32[])
    name: CompareItems
    nameWithType: Checker.CompareItems
    fullName: AutoCheck.Core.Checker.CompareItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoCheck.Core.Operator
    name: Operator
    nameWithType: Operator
    fullName: AutoCheck.Core.Operator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Checkers.Css.Connector*
  commentId: Overload:AutoCheck.Checkers.Css.Connector
  name: Connector
  nameWithType: Css.Connector
  fullName: AutoCheck.Checkers.Css.Connector
- uid: AutoCheck.Connectors.Css
  commentId: T:AutoCheck.Connectors.Css
  parent: AutoCheck.Connectors
  name: Css
  nameWithType: Css
  fullName: AutoCheck.Connectors.Css
- uid: AutoCheck.Connectors
  commentId: N:AutoCheck.Connectors
  name: AutoCheck.Connectors
  nameWithType: AutoCheck.Connectors
  fullName: AutoCheck.Connectors
- uid: AutoCheck.Checkers.Css.#ctor*
  commentId: Overload:AutoCheck.Checkers.Css.#ctor
  name: Css
  nameWithType: Css.Css
  fullName: AutoCheck.Checkers.Css.Css
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Checker.Dispose
  commentId: M:AutoCheck.Core.Checker.Dispose
  parent: AutoCheck.Core.Checker
  name: Dispose()
  nameWithType: Checker.Dispose()
  fullName: AutoCheck.Core.Checker.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Checker.Dispose
    name: Dispose
    nameWithType: Checker.Dispose
    fullName: AutoCheck.Core.Checker.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Checkers.Css.Dispose*
  commentId: Overload:AutoCheck.Checkers.Css.Dispose
  name: Dispose
  nameWithType: Css.Dispose
  fullName: AutoCheck.Checkers.Css.Dispose
- uid: AutoCheck.Checkers.Css.CheckIfPropertyApplied*
  commentId: Overload:AutoCheck.Checkers.Css.CheckIfPropertyApplied
  name: CheckIfPropertyApplied
  nameWithType: Css.CheckIfPropertyApplied
  fullName: AutoCheck.Checkers.Css.CheckIfPropertyApplied
- uid: HtmlAgilityPack.HtmlDocument
  commentId: T:HtmlAgilityPack.HtmlDocument
  parent: HtmlAgilityPack
  isExternal: true
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: HtmlAgilityPack.HtmlDocument
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: HtmlAgilityPack
  commentId: N:HtmlAgilityPack
  isExternal: true
  name: HtmlAgilityPack
  nameWithType: HtmlAgilityPack
  fullName: HtmlAgilityPack
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
