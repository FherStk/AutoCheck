### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Connectors.GDrive
  commentId: T:AutoCheck.Core.Connectors.GDrive
  id: GDrive
  parent: AutoCheck.Core.Connectors
  children:
  - AutoCheck.Core.Connectors.GDrive.#ctor(System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.CopyFile(Google.Apis.Drive.v3.Data.File,System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.CopyFile(System.String,System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.CopyFile(System.Uri,System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.CountFiles(System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.CountFolders(System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.CreateFile(System.String,System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String)
  - AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String)
  - AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String)
  - AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.Dispose
  - AutoCheck.Core.Connectors.GDrive.Download(Google.Apis.Drive.v3.Data.File,System.String)
  - AutoCheck.Core.Connectors.GDrive.Download(System.String,System.String)
  - AutoCheck.Core.Connectors.GDrive.Download(System.Uri,System.String)
  - AutoCheck.Core.Connectors.GDrive.Drive
  - AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String)
  - AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String,System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String)
  - AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String,System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.GetFile(System.String)
  - AutoCheck.Core.Connectors.GDrive.GetFile(System.String,System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.GetFolder(System.String)
  - AutoCheck.Core.Connectors.GDrive.GetFolder(System.String,System.String,System.Boolean)
  - AutoCheck.Core.Connectors.GDrive.Upload(System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: GDrive
  nameWithType: GDrive
  fullName: AutoCheck.Core.Connectors.GDrive
  type: Class
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: GDrive
    path: ../core/connectors/GDrive.cs
    startLine: 37
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nAllows in/out operations and/or data validations with a GDrive instance.\n"
  example: []
  syntax:
    content: 'public class GDrive : Base, IDisposable'
    content.vb: >-
      Public Class GDrive
          Inherits Base
          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Connectors.Base
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Connectors.GDrive.Drive
  commentId: P:AutoCheck.Core.Connectors.GDrive.Drive
  id: Drive
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Drive
  nameWithType: GDrive.Drive
  fullName: AutoCheck.Core.Connectors.GDrive.Drive
  type: Property
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Drive
    path: ../core/connectors/GDrive.cs
    startLine: 39
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public DriveService Drive { get; }
    parameters: []
    return:
      type: Google.Apis.Drive.v3.DriveService
    content.vb: Public ReadOnly Property Drive As DriveService
  overload: AutoCheck.Core.Connectors.GDrive.Drive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.GDrive.#ctor(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: GDrive(String, String)
  nameWithType: GDrive.GDrive(String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.GDrive(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/GDrive.cs
    startLine: 42
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public GDrive(string accountFilePath, string secretFilePath)
    parameters:
    - id: accountFilePath
      type: System.String
    - id: secretFilePath
      type: System.String
    content.vb: Public Sub New(accountFilePath As String, secretFilePath As String)
  overload: AutoCheck.Core.Connectors.GDrive.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.Dispose
  commentId: M:AutoCheck.Core.Connectors.GDrive.Dispose
  id: Dispose
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: GDrive.Dispose()
  fullName: AutoCheck.Core.Connectors.GDrive.Dispose()
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../core/connectors/GDrive.cs
    startLine: 56
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Connectors.Base.Dispose
  overload: AutoCheck.Core.Connectors.GDrive.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String)
  id: CreateFolder(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CreateFolder(String)
  nameWithType: GDrive.CreateFolder(String)
  fullName: AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateFolder
    path: ../core/connectors/GDrive.cs
    startLine: 65
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates the specified folder\n"
  example: []
  syntax:
    content: public File CreateFolder(string folder)
    parameters:
    - id: folder
      type: System.String
      description: The folder to create including its path (all needed subfolders will be created also).
    return:
      type: Google.Apis.Drive.v3.Data.File
    content.vb: Public Function CreateFolder(folder As String) As File
  overload: AutoCheck.Core.Connectors.GDrive.CreateFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String,System.String)
  id: CreateFolder(System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CreateFolder(String, String)
  nameWithType: GDrive.CreateFolder(String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.CreateFolder(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateFolder
    path: ../core/connectors/GDrive.cs
    startLine: 75
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates the specified folder\n"
  example: []
  syntax:
    content: public File CreateFolder(string path, string folder)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be created into.
    - id: folder
      type: System.String
      description: The folder to create (all needed subfolders will be created also).
    return:
      type: Google.Apis.Drive.v3.Data.File
    content.vb: Public Function CreateFolder(path As String, folder As String) As File
  overload: AutoCheck.Core.Connectors.GDrive.CreateFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.GetFolder(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.GetFolder(System.String)
  id: GetFolder(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: GetFolder(String)
  nameWithType: GDrive.GetFolder(String)
  fullName: AutoCheck.Core.Connectors.GDrive.GetFolder(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetFolder
    path: ../core/connectors/GDrive.cs
    startLine: 117
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns the selected folder\n"
  example: []
  syntax:
    content: public File GetFolder(string folder)
    parameters:
    - id: folder
      type: System.String
      description: The folder to get including its path.
    return:
      type: Google.Apis.Drive.v3.Data.File
    content.vb: Public Function GetFolder(folder As String) As File
  overload: AutoCheck.Core.Connectors.GDrive.GetFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.GetFolder(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.GetFolder(System.String,System.String,System.Boolean)
  id: GetFolder(System.String,System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: GetFolder(String, String, Boolean)
  nameWithType: GDrive.GetFolder(String, String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.GetFolder(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetFolder
    path: ../core/connectors/GDrive.cs
    startLine: 129
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns the selected folder\n"
  example: []
  syntax:
    content: public File GetFolder(string path, string folder, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be searched into.
    - id: folder
      type: System.String
      description: The folder to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: Google.Apis.Drive.v3.Data.File
      description: The selected folder.
    content.vb: Public Function GetFolder(path As String, folder As String, recursive As Boolean = True) As File
  overload: AutoCheck.Core.Connectors.GDrive.GetFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CountFolders(System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CountFolders(System.String,System.Boolean)
  id: CountFolders(System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CountFolders(String, Boolean)
  nameWithType: GDrive.CountFolders(String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.CountFolders(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountFolders
    path: ../core/connectors/GDrive.cs
    startLine: 140
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns how many folders has been found within the given path.\n"
  example: []
  syntax:
    content: public int CountFolders(string path, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the folders will be searched into.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Int32
      description: The amount of folders.
    content.vb: Public Function CountFolders(path As String, recursive As Boolean = True) As Integer
  overload: AutoCheck.Core.Connectors.GDrive.CountFolders*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String)
  id: DeleteFolder(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: DeleteFolder(String)
  nameWithType: GDrive.DeleteFolder(String)
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteFolder
    path: ../core/connectors/GDrive.cs
    startLine: 161
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDeletes the selected folder.\n"
  example: []
  syntax:
    content: public void DeleteFolder(string folder)
    parameters:
    - id: folder
      type: System.String
      description: The folder to get including its path.
    content.vb: Public Sub DeleteFolder(folder As String)
  overload: AutoCheck.Core.Connectors.GDrive.DeleteFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String,System.String)
  id: DeleteFolder(System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: DeleteFolder(String, String)
  nameWithType: GDrive.DeleteFolder(String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFolder(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteFolder
    path: ../core/connectors/GDrive.cs
    startLine: 171
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRemoves a remote folder\n"
  example: []
  syntax:
    content: public void DeleteFolder(string path, string folder)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be searched into.
    - id: folder
      type: System.String
      description: The folder to search.
    content.vb: Public Sub DeleteFolder(path As String, folder As String)
  overload: AutoCheck.Core.Connectors.GDrive.DeleteFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String)
  id: ExistsFolder(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: ExistsFolder(String)
  nameWithType: GDrive.ExistsFolder(String)
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsFolder
    path: ../core/connectors/GDrive.cs
    startLine: 184
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a folder exists.\n"
  example: []
  syntax:
    content: public bool ExistsFolder(string folder)
    parameters:
    - id: folder
      type: System.String
      description: The folder to get including its path.
    return:
      type: System.Boolean
    content.vb: Public Function ExistsFolder(folder As String) As Boolean
  overload: AutoCheck.Core.Connectors.GDrive.ExistsFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String,System.String,System.Boolean)
  id: ExistsFolder(System.String,System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: ExistsFolder(String, String, Boolean)
  nameWithType: GDrive.ExistsFolder(String, String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFolder(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsFolder
    path: ../core/connectors/GDrive.cs
    startLine: 196
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a folder exists.\n"
  example: []
  syntax:
    content: public bool ExistsFolder(string path, string folder, bool recursive = false)
    parameters:
    - id: path
      type: System.String
      description: Path where the folder will be searched into.
    - id: folder
      type: System.String
      description: The folder to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Boolean
      description: If the folder exists or not.
    content.vb: Public Function ExistsFolder(path As String, folder As String, recursive As Boolean = False) As Boolean
  overload: AutoCheck.Core.Connectors.GDrive.ExistsFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.GetFile(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.GetFile(System.String)
  id: GetFile(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: GetFile(String)
  nameWithType: GDrive.GetFile(String)
  fullName: AutoCheck.Core.Connectors.GDrive.GetFile(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetFile
    path: ../core/connectors/GDrive.cs
    startLine: 205
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns the selected file.\n"
  example: []
  syntax:
    content: public File GetFile(string file)
    parameters:
    - id: file
      type: System.String
      description: The file to get including its path.
    return:
      type: Google.Apis.Drive.v3.Data.File
    content.vb: Public Function GetFile(file As String) As File
  overload: AutoCheck.Core.Connectors.GDrive.GetFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.GetFile(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.GetFile(System.String,System.String,System.Boolean)
  id: GetFile(System.String,System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: GetFile(String, String, Boolean)
  nameWithType: GDrive.GetFile(String, String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.GetFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetFile
    path: ../core/connectors/GDrive.cs
    startLine: 216
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns the selected file.\n"
  example: []
  syntax:
    content: public File GetFile(string path, string file, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the file will be searched into.
    - id: file
      type: System.String
      description: The file to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: Google.Apis.Drive.v3.Data.File
      description: The selected file.
    content.vb: Public Function GetFile(path As String, file As String, recursive As Boolean = True) As File
  overload: AutoCheck.Core.Connectors.GDrive.GetFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CountFiles(System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CountFiles(System.String,System.Boolean)
  id: CountFiles(System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CountFiles(String, Boolean)
  nameWithType: GDrive.CountFiles(String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.CountFiles(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountFiles
    path: ../core/connectors/GDrive.cs
    startLine: 227
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nReturns how many folders has been found within the given path.\n"
  example: []
  syntax:
    content: public int CountFiles(string path, bool recursive = true)
    parameters:
    - id: path
      type: System.String
      description: Path where the folders will be searched into.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Int32
      description: The amount of folders.
    content.vb: Public Function CountFiles(path As String, recursive As Boolean = True) As Integer
  overload: AutoCheck.Core.Connectors.GDrive.CountFiles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CreateFile(System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CreateFile(System.String,System.String,System.String)
  id: CreateFile(System.String,System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CreateFile(String, String, String)
  nameWithType: GDrive.CreateFile(String, String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.CreateFile(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateFile
    path: ../core/connectors/GDrive.cs
    startLine: 251
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nUploads a local file to a remote Google Drive folder.\n"
  example: []
  syntax:
    content: public void CreateFile(string localFilePath, string remoteFilePath, string remoteFileName = null)
    parameters:
    - id: localFilePath
      type: System.String
      description: Local file path
    - id: remoteFilePath
      type: System.String
      description: Remote file path (will be created if not exists).
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub CreateFile(localFilePath As String, remoteFilePath As String, remoteFileName As String = Nothing)
  overload: AutoCheck.Core.Connectors.GDrive.CreateFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String)
  id: DeleteFile(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: DeleteFile(String)
  nameWithType: GDrive.DeleteFile(String)
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteFile
    path: ../core/connectors/GDrive.cs
    startLine: 303
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDeletes the selected file.\n"
  example: []
  syntax:
    content: public void DeleteFile(string file)
    parameters:
    - id: file
      type: System.String
      description: The folder to get including its path.
    content.vb: Public Sub DeleteFile(file As String)
  overload: AutoCheck.Core.Connectors.GDrive.DeleteFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String,System.String)
  id: DeleteFile(System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: DeleteFile(String, String)
  nameWithType: GDrive.DeleteFile(String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFile(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteFile
    path: ../core/connectors/GDrive.cs
    startLine: 312
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRemoves a remote file\n"
  example: []
  syntax:
    content: public void DeleteFile(string remoteFilePath, string remoteFileName)
    parameters:
    - id: remoteFilePath
      type: System.String
      description: Remote file path .
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub DeleteFile(remoteFilePath As String, remoteFileName As String)
  overload: AutoCheck.Core.Connectors.GDrive.DeleteFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CopyFile(System.Uri,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CopyFile(System.Uri,System.String,System.String)
  id: CopyFile(System.Uri,System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CopyFile(Uri, String, String)
  nameWithType: GDrive.CopyFile(Uri, String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.CopyFile(System.Uri, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CopyFile
    path: ../core/connectors/GDrive.cs
    startLine: 327
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCopy an external Google Drive file into the main account.\n"
  example: []
  syntax:
    content: public void CopyFile(Uri uri, string remoteFilePath, string remoteFileName = null)
    parameters:
    - id: uri
      type: System.Uri
      description: The Google Drive API file URI to copy.
    - id: remoteFilePath
      type: System.String
      description: Remote file path
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub CopyFile(uri As Uri, remoteFilePath As String, remoteFileName As String = Nothing)
  overload: AutoCheck.Core.Connectors.GDrive.CopyFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CopyFile(Google.Apis.Drive.v3.Data.File,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CopyFile(Google.Apis.Drive.v3.Data.File,System.String,System.String)
  id: CopyFile(Google.Apis.Drive.v3.Data.File,System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CopyFile(File, String, String)
  nameWithType: GDrive.CopyFile(File, String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.CopyFile(Google.Apis.Drive.v3.Data.File, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CopyFile
    path: ../core/connectors/GDrive.cs
    startLine: 338
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCopy an external Google Drive file into the main account.\n"
  example: []
  syntax:
    content: public void CopyFile(File file, string remoteFilePath, string remoteFileName = null)
    parameters:
    - id: file
      type: Google.Apis.Drive.v3.Data.File
      description: The Google Drive API file to copy.
    - id: remoteFilePath
      type: System.String
      description: Remote file path
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub CopyFile(file As File, remoteFilePath As String, remoteFileName As String = Nothing)
  overload: AutoCheck.Core.Connectors.GDrive.CopyFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.CopyFile(System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.CopyFile(System.String,System.String,System.String)
  id: CopyFile(System.String,System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: CopyFile(String, String, String)
  nameWithType: GDrive.CopyFile(String, String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.CopyFile(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: CopyFile
    path: ../core/connectors/GDrive.cs
    startLine: 348
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCopy an external Google Drive file into the main account.\n"
  example: []
  syntax:
    content: public void CopyFile(string fileID, string remoteFilePath, string remoteFileName = null)
    parameters:
    - id: fileID
      type: System.String
      description: The Google Drive API file&apos;s ID to copy.
    - id: remoteFilePath
      type: System.String
      description: Remote file path
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub CopyFile(fileID As String, remoteFilePath As String, remoteFileName As String = Nothing)
  overload: AutoCheck.Core.Connectors.GDrive.CopyFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.Upload(System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.Upload(System.String,System.String,System.String)
  id: Upload(System.String,System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Upload(String, String, String)
  nameWithType: GDrive.Upload(String, String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.Upload(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Upload
    path: ../core/connectors/GDrive.cs
    startLine: 383
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nUploads a local file to a remote Google Drive folder.\n"
  remarks: This method is an alias for CreateFile.
  example: []
  syntax:
    content: public void Upload(string localFilePath, string remoteFilePath, string remoteFileName = null)
    parameters:
    - id: localFilePath
      type: System.String
      description: Local file path
    - id: remoteFilePath
      type: System.String
      description: Remote file path (will be created if not exists).
    - id: remoteFileName
      type: System.String
      description: Remote file name (extenssion and/or name will be infered from source if not provided).
    content.vb: Public Sub Upload(localFilePath As String, remoteFilePath As String, remoteFileName As String = Nothing)
  overload: AutoCheck.Core.Connectors.GDrive.Upload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.Download(System.Uri,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.Download(System.Uri,System.String)
  id: Download(System.Uri,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Download(Uri, String)
  nameWithType: GDrive.Download(Uri, String)
  fullName: AutoCheck.Core.Connectors.GDrive.Download(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Download
    path: ../core/connectors/GDrive.cs
    startLine: 394
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public string Download(Uri uri, string savePath)
    parameters:
    - id: uri
      type: System.Uri
    - id: savePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Function Download(uri As Uri, savePath As String) As String
  overload: AutoCheck.Core.Connectors.GDrive.Download*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.Download(Google.Apis.Drive.v3.Data.File,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.Download(Google.Apis.Drive.v3.Data.File,System.String)
  id: Download(Google.Apis.Drive.v3.Data.File,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Download(File, String)
  nameWithType: GDrive.Download(File, String)
  fullName: AutoCheck.Core.Connectors.GDrive.Download(Google.Apis.Drive.v3.Data.File, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Download
    path: ../core/connectors/GDrive.cs
    startLine: 409
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public string Download(File file, string savePath)
    parameters:
    - id: file
      type: Google.Apis.Drive.v3.Data.File
    - id: savePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Function Download(file As File, savePath As String) As String
  overload: AutoCheck.Core.Connectors.GDrive.Download*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.Download(System.String,System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.Download(System.String,System.String)
  id: Download(System.String,System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: Download(String, String)
  nameWithType: GDrive.Download(String, String)
  fullName: AutoCheck.Core.Connectors.GDrive.Download(System.String, System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: Download
    path: ../core/connectors/GDrive.cs
    startLine: 421
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public string Download(string fileID, string savePath)
    parameters:
    - id: fileID
      type: System.String
    - id: savePath
      type: System.String
    return:
      type: System.String
    content.vb: Public Function Download(fileID As String, savePath As String) As String
  overload: AutoCheck.Core.Connectors.GDrive.Download*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String)
  commentId: M:AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String)
  id: ExistsFile(System.String)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: ExistsFile(String)
  nameWithType: GDrive.ExistsFile(String)
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsFile
    path: ../core/connectors/GDrive.cs
    startLine: 454
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a file exists.\n"
  example: []
  syntax:
    content: public bool ExistsFile(string file)
    parameters:
    - id: file
      type: System.String
      description: The file to get including its path.
    return:
      type: System.Boolean
    content.vb: Public Function ExistsFile(file As String) As Boolean
  overload: AutoCheck.Core.Connectors.GDrive.ExistsFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String,System.String,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String,System.String,System.Boolean)
  id: ExistsFile(System.String,System.String,System.Boolean)
  parent: AutoCheck.Core.Connectors.GDrive
  langs:
  - csharp
  - vb
  name: ExistsFile(String, String, Boolean)
  nameWithType: GDrive.ExistsFile(String, String, Boolean)
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/GDrive.cs
      branch: UnixPath
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsFile
    path: ../core/connectors/GDrive.cs
    startLine: 465
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDetermines if a file exists.\n"
  example: []
  syntax:
    content: public bool ExistsFile(string path, string file, bool recursive = false)
    parameters:
    - id: path
      type: System.String
      description: Path where the file will be searched into.
    - id: file
      type: System.String
      description: The file to search.
    - id: recursive
      type: System.Boolean
      description: Recursive deep search.
    return:
      type: System.Boolean
      description: If the file exists or not.
    content.vb: Public Function ExistsFile(path As String, file As String, recursive As Boolean = False) As Boolean
  overload: AutoCheck.Core.Connectors.GDrive.ExistsFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connectors.Base
  commentId: T:AutoCheck.Core.Connectors.Base
  parent: AutoCheck.Core.Connectors
  name: Base
  nameWithType: Base
  fullName: AutoCheck.Core.Connectors.Base
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core.Connectors.GDrive.Drive*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.Drive
  name: Drive
  nameWithType: GDrive.Drive
  fullName: AutoCheck.Core.Connectors.GDrive.Drive
- uid: Google.Apis.Drive.v3.DriveService
  commentId: T:Google.Apis.Drive.v3.DriveService
  parent: Google.Apis.Drive.v3
  isExternal: true
  name: DriveService
  nameWithType: DriveService
  fullName: Google.Apis.Drive.v3.DriveService
- uid: Google.Apis.Drive.v3
  commentId: N:Google.Apis.Drive.v3
  isExternal: true
  name: Google.Apis.Drive.v3
  nameWithType: Google.Apis.Drive.v3
  fullName: Google.Apis.Drive.v3
- uid: AutoCheck.Core.Connectors.GDrive.#ctor*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.#ctor
  name: GDrive
  nameWithType: GDrive.GDrive
  fullName: AutoCheck.Core.Connectors.GDrive.GDrive
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Connectors.Base.Dispose
  commentId: M:AutoCheck.Core.Connectors.Base.Dispose
  parent: AutoCheck.Core.Connectors.Base
  name: Dispose()
  nameWithType: Base.Dispose()
  fullName: AutoCheck.Core.Connectors.Base.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.GDrive.Dispose*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.Dispose
  name: Dispose
  nameWithType: GDrive.Dispose
  fullName: AutoCheck.Core.Connectors.GDrive.Dispose
- uid: AutoCheck.Core.Connectors.GDrive.CreateFolder*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.CreateFolder
  name: CreateFolder
  nameWithType: GDrive.CreateFolder
  fullName: AutoCheck.Core.Connectors.GDrive.CreateFolder
- uid: Google.Apis.Drive.v3.Data.File
  commentId: T:Google.Apis.Drive.v3.Data.File
  parent: Google.Apis.Drive.v3.Data
  isExternal: true
  name: File
  nameWithType: File
  fullName: Google.Apis.Drive.v3.Data.File
- uid: Google.Apis.Drive.v3.Data
  commentId: N:Google.Apis.Drive.v3.Data
  isExternal: true
  name: Google.Apis.Drive.v3.Data
  nameWithType: Google.Apis.Drive.v3.Data
  fullName: Google.Apis.Drive.v3.Data
- uid: AutoCheck.Core.Connectors.GDrive.GetFolder*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.GetFolder
  name: GetFolder
  nameWithType: GDrive.GetFolder
  fullName: AutoCheck.Core.Connectors.GDrive.GetFolder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Core.Connectors.GDrive.CountFolders*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.CountFolders
  name: CountFolders
  nameWithType: GDrive.CountFolders
  fullName: AutoCheck.Core.Connectors.GDrive.CountFolders
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFolder*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.DeleteFolder
  name: DeleteFolder
  nameWithType: GDrive.DeleteFolder
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFolder
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFolder*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.ExistsFolder
  name: ExistsFolder
  nameWithType: GDrive.ExistsFolder
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFolder
- uid: AutoCheck.Core.Connectors.GDrive.GetFile*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.GetFile
  name: GetFile
  nameWithType: GDrive.GetFile
  fullName: AutoCheck.Core.Connectors.GDrive.GetFile
- uid: AutoCheck.Core.Connectors.GDrive.CountFiles*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.CountFiles
  name: CountFiles
  nameWithType: GDrive.CountFiles
  fullName: AutoCheck.Core.Connectors.GDrive.CountFiles
- uid: AutoCheck.Core.Connectors.GDrive.CreateFile*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.CreateFile
  name: CreateFile
  nameWithType: GDrive.CreateFile
  fullName: AutoCheck.Core.Connectors.GDrive.CreateFile
- uid: AutoCheck.Core.Connectors.GDrive.DeleteFile*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.DeleteFile
  name: DeleteFile
  nameWithType: GDrive.DeleteFile
  fullName: AutoCheck.Core.Connectors.GDrive.DeleteFile
- uid: AutoCheck.Core.Connectors.GDrive.CopyFile*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.CopyFile
  name: CopyFile
  nameWithType: GDrive.CopyFile
  fullName: AutoCheck.Core.Connectors.GDrive.CopyFile
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: AutoCheck.Core.Connectors.GDrive.Upload*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.Upload
  name: Upload
  nameWithType: GDrive.Upload
  fullName: AutoCheck.Core.Connectors.GDrive.Upload
- uid: AutoCheck.Core.Connectors.GDrive.Download*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.Download
  name: Download
  nameWithType: GDrive.Download
  fullName: AutoCheck.Core.Connectors.GDrive.Download
- uid: AutoCheck.Core.Connectors.GDrive.ExistsFile*
  commentId: Overload:AutoCheck.Core.Connectors.GDrive.ExistsFile
  name: ExistsFile
  nameWithType: GDrive.ExistsFile
  fullName: AutoCheck.Core.Connectors.GDrive.ExistsFile
