### YamlMime:ManagedReference
items:
- uid: AutoCheck.Connectors.Postgres
  commentId: T:AutoCheck.Connectors.Postgres
  id: Postgres
  parent: AutoCheck.Connectors
  children:
  - AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  - AutoCheck.Connectors.Postgres.Conn
  - AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  - AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object)
  - AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  - AutoCheck.Connectors.Postgres.DBHost
  - AutoCheck.Connectors.Postgres.DBName
  - AutoCheck.Connectors.Postgres.DBUser
  - AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  - AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.Dispose
  - AutoCheck.Connectors.Postgres.DropDataBase(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteScalar(System.String)
  - AutoCheck.Connectors.Postgres.ExistsDataBase
  - AutoCheck.Connectors.Postgres.GetForeignKeys(System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetLastID(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetRoleMembership(System.String)
  - AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetViewDefinition(System.String,System.String)
  - AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.RevokeRole(System.String,System.String)
  - AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator,System.String[])
  - AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,System.String[])
  - AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.String[])
  - AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String[])
  - AutoCheck.Connectors.Postgres.Student
  - AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  - AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: Postgres
  nameWithType: Postgres
  fullName: AutoCheck.Connectors.Postgres
  type: Class
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Postgres
    path: ../connectors/Postgres.cs
    startLine: 32
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nAllows in/out operations and/or data validations with a PostgreSQL instance.\n"
  example: []
  syntax:
    content: 'public class Postgres : Connector, IDisposable'
    content.vb: >-
      Public Class Postgres
          Inherits Connector
          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Connector
  derivedClasses:
  - AutoCheck.Connectors.Odoo
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Connectors.Postgres.Conn
  commentId: P:AutoCheck.Connectors.Postgres.Conn
  id: Conn
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Conn
  nameWithType: Postgres.Conn
  fullName: AutoCheck.Connectors.Postgres.Conn
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Conn
    path: ../connectors/Postgres.cs
    startLine: 47
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe connection used for communication between PostgreSQL and the current application.\n"
  example: []
  syntax:
    content: public NpgsqlConnection Conn { get; }
    parameters: []
    return:
      type: Npgsql.NpgsqlConnection
      description: ''
    content.vb: Public ReadOnly Property Conn As NpgsqlConnection
  overload: AutoCheck.Connectors.Postgres.Conn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.DBHost
  commentId: P:AutoCheck.Connectors.Postgres.DBHost
  id: DBHost
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DBHost
  nameWithType: Postgres.DBHost
  fullName: AutoCheck.Connectors.Postgres.DBHost
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DBHost
    path: ../connectors/Postgres.cs
    startLine: 52
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nPostgreSQL host address.\n"
  example: []
  syntax:
    content: public string DBHost { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property DBHost As String
  overload: AutoCheck.Connectors.Postgres.DBHost*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.DBName
  commentId: P:AutoCheck.Connectors.Postgres.DBName
  id: DBName
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DBName
  nameWithType: Postgres.DBName
  fullName: AutoCheck.Connectors.Postgres.DBName
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DBName
    path: ../connectors/Postgres.cs
    startLine: 57
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe PostgreSQL database host address, with a running instance allowing remote connections.\n"
  example: []
  syntax:
    content: public string DBName { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property DBName As String
  overload: AutoCheck.Connectors.Postgres.DBName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.DBUser
  commentId: P:AutoCheck.Connectors.Postgres.DBUser
  id: DBUser
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DBUser
  nameWithType: Postgres.DBUser
  fullName: AutoCheck.Connectors.Postgres.DBUser
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DBUser
    path: ../connectors/Postgres.cs
    startLine: 62
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe PostgreSQL database username, which will be used to perform operations.\n"
  example: []
  syntax:
    content: public string DBUser { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property DBUser As String
  overload: AutoCheck.Connectors.Postgres.DBUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.Student
  commentId: P:AutoCheck.Connectors.Postgres.Student
  id: Student
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Connectors.Postgres.Student
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Student
    path: ../connectors/Postgres.cs
    startLine: 72
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe student name wich is the original database creator.\n"
  example: []
  syntax:
    content: public string Student { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Student As String
  overload: AutoCheck.Connectors.Postgres.Student*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Postgres(String, String, String, String)
  nameWithType: Postgres.Postgres(String, String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Postgres(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../connectors/Postgres.cs
    startLine: 84
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new connector instance.\n"
  example: []
  syntax:
    content: public Postgres(string host, string database, string username, string password)
    parameters:
    - id: host
      type: System.String
      description: Host address in order to connect with the running PostgreSQL service, wich contains the Odoo database.
    - id: database
      type: System.String
      description: The PostgreSQL database name.
    - id: username
      type: System.String
      description: The PostgreSQL database username, which will be used to perform operations.
    - id: password
      type: System.String
      description: The PostgreSQL database password, which will be used to perform operations.
    content.vb: Public Sub New(host As String, database As String, username As String, password As String)
  overload: AutoCheck.Connectors.Postgres.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Dispose
  commentId: M:AutoCheck.Connectors.Postgres.Dispose
  id: Dispose
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Postgres.Dispose()
  fullName: AutoCheck.Connectors.Postgres.Dispose()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../connectors/Postgres.cs
    startLine: 94
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCleans and releases memory for unnatended objects.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Connector.Dispose
  overload: AutoCheck.Connectors.Postgres.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,System.String[])
  id: SelectData(System.String,System.String,System.String,System.Object,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: SelectData(String, String, String, Object, String[])
  nameWithType: Postgres.SelectData(String, String, String, Object, String[])
  fullName: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.Object, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectData
    path: ../connectors/Postgres.cs
    startLine: 108
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects data from a single table, the &apos;ExecuteNonQuery&apos; method can be used for complex selects (union, join, etc.). \nThe filter operator &apos;=&apos; will be used.\n"
  example: []
  syntax:
    content: public DataSet SelectData(string schema, string table, string filterField, object filterValue, string[] fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: fields
      type: System.String[]
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Data.DataSet
      description: The data selected.
    content.vb: Public Function SelectData(schema As String, table As String, filterField As String, filterValue As Object, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.SelectData*
  nameWithType.vb: Postgres.SelectData(String, String, String, Object, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.Object, System.String())
  name.vb: SelectData(String, String, String, Object, String())
- uid: AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator,System.String[])
  id: SelectData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: SelectData(String, String, String, Object, Postgres.Operator, String[])
  nameWithType: Postgres.SelectData(String, String, String, Object, Postgres.Operator, String[])
  fullName: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.Object, AutoCheck.Connectors.Postgres.Operator, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectData
    path: ../connectors/Postgres.cs
    startLine: 121
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects data from a single table, the &apos;ExecuteNonQuery&apos; method can be used for complex selects (union, join, etc.).\n"
  example: []
  syntax:
    content: public DataSet SelectData(string schema, string table, string filterField, object filterValue, Postgres.Operator filterOperator, string[] fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Connectors.Postgres.Operator
      description: The operator to use, % for LIKE.
    - id: fields
      type: System.String[]
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Data.DataSet
      description: The data selected.
    content.vb: Public Function SelectData(schema As String, table As String, filterField As String, filterValue As Object, filterOperator As Postgres.Operator, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.SelectData*
  nameWithType.vb: Postgres.SelectData(String, String, String, Object, Postgres.Operator, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.Object, AutoCheck.Connectors.Postgres.Operator, System.String())
  name.vb: SelectData(String, String, String, Object, Postgres.Operator, String())
- uid: AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String,System.String[])
  id: SelectData(System.String,System.String,System.String,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: SelectData(String, String, String, String[])
  nameWithType: Postgres.SelectData(String, String, String, String[])
  fullName: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectData
    path: ../connectors/Postgres.cs
    startLine: 132
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects data from a single table, the &apos;ExecuteNonQuery&apos; method can be used for complex selects (union, join, etc.).\n"
  example: []
  syntax:
    content: public DataSet SelectData(string schema, string table, string filterCondition, string[] fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    - id: fields
      type: System.String[]
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Data.DataSet
      description: The data selected.
    content.vb: Public Function SelectData(schema As String, table As String, filterCondition As String, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.SelectData*
  nameWithType.vb: Postgres.SelectData(String, String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String, System.String())
  name.vb: SelectData(String, String, String, String())
- uid: AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.SelectData(System.String,System.String,System.String[])
  id: SelectData(System.String,System.String,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: SelectData(String, String, String[])
  nameWithType: Postgres.SelectData(String, String, String[])
  fullName: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectData
    path: ../connectors/Postgres.cs
    startLine: 142
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects data from a single table, the &apos;ExecuteNonQuery&apos; method can be used for complex selects (union, join, etc.).\n"
  example: []
  syntax:
    content: public DataSet SelectData(string source, string filterCondition, string[] fields)
    parameters:
    - id: source
      type: System.String
      description: 'Data origin: from, joins, etc.'
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    - id: fields
      type: System.String[]
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Data.DataSet
      description: The data selected.
    content.vb: Public Function SelectData(source As String, filterCondition As String, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.SelectData*
  nameWithType.vb: Postgres.SelectData(String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.SelectData(System.String, System.String, System.String())
  name.vb: SelectData(String, String, String())
- uid: AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: InsertData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: InsertData(String, String, Dictionary<String, Object>)
  nameWithType: Postgres.InsertData(String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.InsertData(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: InsertData
    path: ../connectors/Postgres.cs
    startLine: 153
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nInserts new data into a table.\n"
  example: []
  syntax:
    content: public void InsertData(string schema, string table, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    content.vb: Public Sub InsertData(schema As String, table As String, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.InsertData*
  nameWithType.vb: Postgres.InsertData(String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.InsertData(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: InsertData(String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.InsertData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: InsertData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: InsertData(String, String, String, Dictionary<String, Object>)
  nameWithType: Postgres.InsertData(String, String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.InsertData(System.String, System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: InsertData
    path: ../connectors/Postgres.cs
    startLine: 169
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nInserts new data into a table.\n"
  example: []
  syntax:
    content: public int InsertData(string schema, string table, string pkField, Dictionary<string, object> fields)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be added.
    - id: pkField
      type: System.String
      description: The primary key field name.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    return:
      type: System.Int32
      description: The primary key value for the new item.
    content.vb: Public Function InsertData(schema As String, table As String, pkField As String, fields As Dictionary(Of String, Object)) As Integer
  overload: AutoCheck.Connectors.Postgres.InsertData*
  nameWithType.vb: Postgres.InsertData(String, String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.InsertData(System.String, System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: InsertData(String, String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  commentId: M:AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  id: UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: UpdateData(Dictionary<String, Object>, String, String, String, Object, Postgres.Operator)
  nameWithType: Postgres.UpdateData(Dictionary<String, Object>, String, String, String, Object, Postgres.Operator)
  fullName: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, System.String, System.String, System.Object, AutoCheck.Connectors.Postgres.Operator)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: UpdateData
    path: ../connectors/Postgres.cs
    startLine: 182
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdate some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void UpdateData(Dictionary<string, object> fields, string schema, string table, string filterField, object filterValue, Postgres.Operator filterOperator = Postgres.Operator.EQUALS)
    parameters:
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Connectors.Postgres.Operator
      description: The operator to use, % for LIKE.
    content.vb: Public Sub UpdateData(fields As Dictionary(Of String, Object), schema As String, table As String, filterField As String, filterValue As Object, filterOperator As Postgres.Operator = Postgres.Operator.EQUALS)
  overload: AutoCheck.Connectors.Postgres.UpdateData*
  nameWithType.vb: Postgres.UpdateData(Dictionary(Of String, Object), String, String, String, Object, Postgres.Operator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, System.String, System.String, System.Object, AutoCheck.Connectors.Postgres.Operator)
  name.vb: UpdateData(Dictionary(Of String, Object), String, String, String, Object, Postgres.Operator)
- uid: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)
  id: UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: UpdateData(Dictionary<String, Object>, String, String, String)
  nameWithType: Postgres.UpdateData(Dictionary<String, Object>, String, String, String)
  fullName: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: UpdateData
    path: ../connectors/Postgres.cs
    startLine: 192
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdate some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void UpdateData(Dictionary<string, object> fields, string schema, string table, string filterCondition)
    parameters:
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    content.vb: Public Sub UpdateData(fields As Dictionary(Of String, Object), schema As String, table As String, filterCondition As String)
  overload: AutoCheck.Connectors.Postgres.UpdateData*
  nameWithType.vb: Postgres.UpdateData(Dictionary(Of String, Object), String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, System.String, System.String)
  name.vb: UpdateData(Dictionary(Of String, Object), String, String, String)
- uid: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String)
  id: UpdateData(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: UpdateData(Dictionary<String, Object>, String, String, String, String)
  nameWithType: Postgres.UpdateData(Dictionary<String, Object>, String, String, String, String)
  fullName: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: UpdateData
    path: ../connectors/Postgres.cs
    startLine: 203
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdate some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void UpdateData(Dictionary<string, object> fields, string schema, string table, string source, string filterCondition)
    parameters:
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: source
      type: System.String
      description: 'Data origin: from, joins, etc.'
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    content.vb: Public Sub UpdateData(fields As Dictionary(Of String, Object), schema As String, table As String, source As String, filterCondition As String)
  overload: AutoCheck.Connectors.Postgres.UpdateData*
  nameWithType.vb: Postgres.UpdateData(Dictionary(Of String, Object), String, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.UpdateData(System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, System.String, System.String, System.String)
  name.vb: UpdateData(Dictionary(Of String, Object), String, String, String, String)
- uid: AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  commentId: M:AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  id: DeleteData(System.String,System.String,System.String,System.Object,AutoCheck.Connectors.Postgres.Operator)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DeleteData(String, String, String, Object, Postgres.Operator)
  nameWithType: Postgres.DeleteData(String, String, String, Object, Postgres.Operator)
  fullName: AutoCheck.Connectors.Postgres.DeleteData(System.String, System.String, System.String, System.Object, AutoCheck.Connectors.Postgres.Operator)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteData
    path: ../connectors/Postgres.cs
    startLine: 225
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDelete some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void DeleteData(string schema, string table, string filterField, object filterValue, Postgres.Operator filterOperator = Postgres.Operator.EQUALS)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Connectors.Postgres.Operator
      description: The operator to use, % for LIKE.
    content.vb: Public Sub DeleteData(schema As String, table As String, filterField As String, filterValue As Object, filterOperator As Postgres.Operator = Postgres.Operator.EQUALS)
  overload: AutoCheck.Connectors.Postgres.DeleteData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String)
  id: DeleteData(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DeleteData(String, String, String)
  nameWithType: Postgres.DeleteData(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.DeleteData(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteData
    path: ../connectors/Postgres.cs
    startLine: 234
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDelete some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void DeleteData(string schema, string table, string filterCondition)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    content.vb: Public Sub DeleteData(schema As String, table As String, filterCondition As String)
  overload: AutoCheck.Connectors.Postgres.DeleteData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.DeleteData(System.String,System.String,System.String,System.String)
  id: DeleteData(System.String,System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DeleteData(String, String, String, String)
  nameWithType: Postgres.DeleteData(String, String, String, String)
  fullName: AutoCheck.Connectors.Postgres.DeleteData(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DeleteData
    path: ../connectors/Postgres.cs
    startLine: 247
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDelete some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void DeleteData(string schema, string table, string source, string filterCondition)
    parameters:
    - id: schema
      type: System.String
      description: Schema where the table is.
    - id: table
      type: System.String
      description: The table where the data will be updated.
    - id: source
      type: System.String
      description: 'Data origin: from, joins, etc.'
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    content.vb: Public Sub DeleteData(schema As String, table As String, source As String, filterCondition As String)
  overload: AutoCheck.Connectors.Postgres.DeleteData*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.RevokeRole(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.RevokeRole(System.String,System.String)
  id: RevokeRole(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: RevokeRole(String, String)
  nameWithType: Postgres.RevokeRole(String, String)
  fullName: AutoCheck.Connectors.Postgres.RevokeRole(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: RevokeRole
    path: ../connectors/Postgres.cs
    startLine: 259
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRevokes a role from a group or role or user.\n"
  example: []
  syntax:
    content: public void RevokeRole(string role, string item)
    parameters:
    - id: role
      type: System.String
      description: The role to revoke.
    - id: item
      type: System.String
      description: The group, role or user which role will be revoked.
    content.vb: Public Sub RevokeRole(role As String, item As String)
  overload: AutoCheck.Connectors.Postgres.RevokeRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  id: CompareSelects(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CompareSelects(String, String)
  nameWithType: Postgres.CompareSelects(String, String)
  fullName: AutoCheck.Connectors.Postgres.CompareSelects(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CompareSelects
    path: ../connectors/Postgres.cs
    startLine: 272
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDetermines if the database exists or not in the server.\n"
  example: []
  syntax:
    content: public bool CompareSelects(string expected, string compared)
    parameters:
    - id: expected
      type: System.String
      description: The left-side select query.
    - id: compared
      type: System.String
      description: The right-side select query.
    return:
      type: System.Boolean
      description: True if the database exists, False otherwise.
    content.vb: Public Function CompareSelects(expected As String, compared As String) As Boolean
  overload: AutoCheck.Connectors.Postgres.CompareSelects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExistsDataBase
  commentId: M:AutoCheck.Connectors.Postgres.ExistsDataBase
  id: ExistsDataBase
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExistsDataBase()
  nameWithType: Postgres.ExistsDataBase()
  fullName: AutoCheck.Connectors.Postgres.ExistsDataBase()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsDataBase
    path: ../connectors/Postgres.cs
    startLine: 279
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nChecks if the database exists.\n"
  example: []
  syntax:
    content: public bool ExistsDataBase()
    return:
      type: System.Boolean
      description: True if the database exists.
    content.vb: Public Function ExistsDataBase As Boolean
  overload: AutoCheck.Connectors.Postgres.ExistsDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  id: CreateDataBase(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateDataBase(String, String)
  nameWithType: Postgres.CreateDataBase(String, String)
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateDataBase
    path: ../connectors/Postgres.cs
    startLine: 298
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new database using a SQL Dump file.\n"
  example: []
  syntax:
    content: public void CreateDataBase(string sqlDumpFilePath, string binPath = "C:\\Program Files\\PostgreSQL\\10\\bin")
    parameters:
    - id: sqlDumpFilePath
      type: System.String
      description: The SQL Dump file path.
    - id: binPath
      type: System.String
      description: The path to the bin folder [only needed for windows systems].
    content.vb: Public Sub CreateDataBase(sqlDumpFilePath As String, binPath As String = "C:\Program Files\PostgreSQL\10\bin")
  overload: AutoCheck.Connectors.Postgres.CreateDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DropDataBase(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.DropDataBase(System.String)
  id: DropDataBase(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DropDataBase(String)
  nameWithType: Postgres.DropDataBase(String)
  fullName: AutoCheck.Connectors.Postgres.DropDataBase(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DropDataBase
    path: ../connectors/Postgres.cs
    startLine: 333
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDrops the current database.\n"
  example: []
  syntax:
    content: public void DropDataBase(string binPath = "C:\\Program Files\\PostgreSQL\\10\\bin")
    parameters:
    - id: binPath
      type: System.String
      description: The path to the bin folder [only needed for windows systems].
    content.vb: Public Sub DropDataBase(binPath As String = "C:\Program Files\PostgreSQL\10\bin")
  overload: AutoCheck.Connectors.Postgres.DropDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object)
  id: CountRegisters(System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(String, String, String, Postgres.Operator, Object)
  nameWithType: Postgres.CountRegisters(String, String, String, Postgres.Operator, Object)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(System.String, System.String, System.String, AutoCheck.Connectors.Postgres.Operator, System.Object)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 377
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table using the primary key as a filter, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public long CountRegisters(string schema, string table, string filterField, Postgres.Operator filterOperator, object filterValue)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Connectors.Postgres.Operator
      description: The operator to use, % for LIKE.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    return:
      type: System.Int64
      description: Number of items.
    content.vb: Public Function CountRegisters(schema As String, table As String, filterField As String, filterOperator As Postgres.Operator, filterValue As Object) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String,System.String)
  id: CountRegisters(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(String, String, String)
  nameWithType: Postgres.CountRegisters(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 387
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table using the primary key as a filter, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public long CountRegisters(string schema, string table, string filterCondition)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    return:
      type: System.Int64
      description: Number of items.
    content.vb: Public Function CountRegisters(schema As String, table As String, filterCondition As String) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  id: CountRegisters(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(String, String)
  nameWithType: Postgres.CountRegisters(String, String)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 396
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table using the primary key as a filter, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public long CountRegisters(string source, string filterCondition)
    parameters:
    - id: source
      type: System.String
      description: 'Data origin: from, joins, etc.'
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    return:
      type: System.Int64
      description: Number of items.
    content.vb: Public Function CountRegisters(source As String, filterCondition As String) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetLastID(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetLastID(System.String,System.String,System.String)
  id: GetLastID(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetLastID(String, String, String)
  nameWithType: Postgres.GetLastID(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.GetLastID(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetLastID
    path: ../connectors/Postgres.cs
    startLine: 409
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the higher value found once performed the query.\n"
  example: []
  syntax:
    content: public int GetLastID(string schema, string table, string pkField)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: pkField
      type: System.String
      description: The primary key field name.
    return:
      type: System.Int32
      description: The item ID, 0 if not found
    content.vb: Public Function GetLastID(schema As String, table As String, pkField As String) As Integer
  overload: AutoCheck.Connectors.Postgres.GetLastID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object,System.ComponentModel.ListSortDirection)
  id: GetID(System.String,System.String,System.String,System.String,AutoCheck.Connectors.Postgres.Operator,System.Object,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetID(String, String, String, String, Postgres.Operator, Object, ListSortDirection)
  nameWithType: Postgres.GetID(String, String, String, String, Postgres.Operator, Object, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetID(System.String, System.String, System.String, System.String, AutoCheck.Connectors.Postgres.Operator, System.Object, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetID
    path: ../connectors/Postgres.cs
    startLine: 423
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the first pkField found once performed the query.\n"
  example: []
  syntax:
    content: public int GetID(string schema, string table, string pkField, string filterField, Postgres.Operator filterOperator, object filterValue, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: pkField
      type: System.String
      description: The primary key field name.
    - id: filterField
      type: System.String
      description: The field name used to find the affected registries.
    - id: filterOperator
      type: AutoCheck.Connectors.Postgres.Operator
      description: The operator to use, % for LIKE.
    - id: filterValue
      type: System.Object
      description: The field value used to find the affected registries.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    return:
      type: System.Int32
      description: The item ID, 0 if not found
    content.vb: Public Function GetID(schema As String, table As String, pkField As String, filterField As String, filterOperator As Postgres.Operator, filterValue As Object, sort As ListSortDirection = ListSortDirection.Descending) As Integer
  overload: AutoCheck.Connectors.Postgres.GetID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  id: GetID(System.String,System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetID(String, String, String, String, ListSortDirection)
  nameWithType: Postgres.GetID(String, String, String, String, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetID(System.String, System.String, System.String, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetID
    path: ../connectors/Postgres.cs
    startLine: 435
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the first pkField found once performed the query.\n"
  example: []
  syntax:
    content: public int GetID(string schema, string table, string pkField, string filterCondition, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table to check.
    - id: pkField
      type: System.String
      description: The primary key field name.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    return:
      type: System.Int32
      description: The item ID, 0 if not found
    content.vb: Public Function GetID(schema As String, table As String, pkField As String, filterCondition As String, sort As ListSortDirection = ListSortDirection.Descending) As Integer
  overload: AutoCheck.Connectors.Postgres.GetID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetID(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  id: GetID(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetID(String, String, String, ListSortDirection)
  nameWithType: Postgres.GetID(String, String, String, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetID(System.String, System.String, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetID
    path: ../connectors/Postgres.cs
    startLine: 446
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the first pkField found once performed the query.\n"
  example: []
  syntax:
    content: public int GetID(string source, string pkField, string filterCondition, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: source
      type: System.String
      description: 'Data origin: from, joins, etc.'
    - id: pkField
      type: System.String
      description: The primary key field name.
    - id: filterCondition
      type: System.String
      description: The filter condition to use.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    return:
      type: System.Int32
      description: The item ID, 0 if not found
    content.vb: Public Function GetID(source As String, pkField As String, filterCondition As String, sort As ListSortDirection = ListSortDirection.Descending) As Integer
  overload: AutoCheck.Connectors.Postgres.GetID*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetViewDefinition(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetViewDefinition(System.String,System.String)
  id: GetViewDefinition(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetViewDefinition(String, String)
  nameWithType: Postgres.GetViewDefinition(String, String)
  fullName: AutoCheck.Connectors.Postgres.GetViewDefinition(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetViewDefinition
    path: ../connectors/Postgres.cs
    startLine: 461
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGiven a view, return its definition as a select query.\n"
  example: []
  syntax:
    content: public string GetViewDefinition(string schema, string view)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: view
      type: System.String
    return:
      type: System.String
      description: A select query.
    content.vb: Public Function GetViewDefinition(schema As String, view As String) As String
  overload: AutoCheck.Connectors.Postgres.GetViewDefinition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String,System.String)
  id: GetTablePrivileges(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetTablePrivileges(String, String, String)
  nameWithType: Postgres.GetTablePrivileges(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetTablePrivileges
    path: ../connectors/Postgres.cs
    startLine: 471
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the table privileges.\n"
  example: []
  syntax:
    content: public DataSet GetTablePrivileges(string role, string schema, string table)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: table
      type: System.String
      description: The table which privileges will be checked against the role&apos;s ones.
    return:
      type: System.Data.DataSet
      description: The table privileges.
    content.vb: Public Function GetTablePrivileges(role As String, schema As String, table As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetTablePrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  id: GetSchemaPrivileges(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetSchemaPrivileges(String, String)
  nameWithType: Postgres.GetSchemaPrivileges(String, String)
  fullName: AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetSchemaPrivileges
    path: ../connectors/Postgres.cs
    startLine: 480
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the schema privileges.\n"
  example: []
  syntax:
    content: public DataSet GetSchemaPrivileges(string role, string schema)
    parameters:
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    return:
      type: System.Data.DataSet
      description: The schema privileges.
    content.vb: Public Function GetSchemaPrivileges(role As String, schema As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetSchemaPrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetRoleMembership(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetRoleMembership(System.String)
  id: GetRoleMembership(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetRoleMembership(String)
  nameWithType: Postgres.GetRoleMembership(String)
  fullName: AutoCheck.Connectors.Postgres.GetRoleMembership(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetRoleMembership
    path: ../connectors/Postgres.cs
    startLine: 488
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGet a list of the groups and/or roles where the fiven role belongs.\n"
  example: []
  syntax:
    content: public DataSet GetRoleMembership(string role)
    parameters:
    - id: role
      type: System.String
      description: The role to check.
    return:
      type: System.Data.DataSet
      description: A set of groups and/or roles
    content.vb: Public Function GetRoleMembership(role As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetRoleMembership*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetForeignKeys(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetForeignKeys(System.String,System.String)
  id: GetForeignKeys(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetForeignKeys(String, String)
  nameWithType: Postgres.GetForeignKeys(String, String)
  fullName: AutoCheck.Connectors.Postgres.GetForeignKeys(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetForeignKeys
    path: ../connectors/Postgres.cs
    startLine: 497
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the information about all the foreign keys defined over a table.\n"
  example: []
  syntax:
    content: public DataSet GetForeignKeys(string schemaFrom, string tableFrom)
    parameters:
    - id: schemaFrom
      type: System.String
      description: The schema where the foreign has been defined.
    - id: tableFrom
      type: System.String
      description: The table where the foreign has been defined.
    return:
      type: System.Data.DataSet
      description: The foreign keys data.
    content.vb: Public Function GetForeignKeys(schemaFrom As String, tableFrom As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetForeignKeys*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  id: ExecuteNonQuery(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String)
  nameWithType: Postgres.ExecuteNonQuery(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteNonQuery
    path: ../connectors/Postgres.cs
    startLine: 508
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces no output.\n"
  example: []
  syntax:
    content: public void ExecuteNonQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    content.vb: Public Sub ExecuteNonQuery(query As String)
  overload: AutoCheck.Connectors.Postgres.ExecuteNonQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  id: ExecuteQuery(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteQuery(String)
  nameWithType: Postgres.ExecuteQuery(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteQuery
    path: ../connectors/Postgres.cs
    startLine: 524
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces an output as a set of data.\n"
  example: []
  syntax:
    content: public DataSet ExecuteQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    return:
      type: System.Data.DataSet
      description: The dataset containing all the output.
    content.vb: Public Function ExecuteQuery(query As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.ExecuteQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteScalar(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteScalar(System.String)
  id: ExecuteScalar(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteScalar(String)
  nameWithType: Postgres.ExecuteScalar(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteScalar(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteScalar
    path: ../connectors/Postgres.cs
    startLine: 551
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces an output as a single data.\n"
  example: []
  syntax:
    content: public object ExecuteScalar(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    return:
      type: System.Object
      description: The dataset containing all the output.
    content.vb: Public Function ExecuteScalar(query As String) As Object
  overload: AutoCheck.Connectors.Postgres.ExecuteScalar*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Connectors
  commentId: N:AutoCheck.Connectors
  name: AutoCheck.Connectors
  nameWithType: AutoCheck.Connectors
  fullName: AutoCheck.Connectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connector
  commentId: T:AutoCheck.Core.Connector
  parent: AutoCheck.Core
  name: Connector
  nameWithType: Connector
  fullName: AutoCheck.Core.Connector
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Connectors.Postgres.Conn*
  commentId: Overload:AutoCheck.Connectors.Postgres.Conn
  name: Conn
  nameWithType: Postgres.Conn
  fullName: AutoCheck.Connectors.Postgres.Conn
- uid: Npgsql.NpgsqlConnection
  commentId: T:Npgsql.NpgsqlConnection
  parent: Npgsql
  isExternal: true
  name: NpgsqlConnection
  nameWithType: NpgsqlConnection
  fullName: Npgsql.NpgsqlConnection
- uid: Npgsql
  commentId: N:Npgsql
  isExternal: true
  name: Npgsql
  nameWithType: Npgsql
  fullName: Npgsql
- uid: AutoCheck.Connectors.Postgres.DBHost*
  commentId: Overload:AutoCheck.Connectors.Postgres.DBHost
  name: DBHost
  nameWithType: Postgres.DBHost
  fullName: AutoCheck.Connectors.Postgres.DBHost
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Connectors.Postgres.DBName*
  commentId: Overload:AutoCheck.Connectors.Postgres.DBName
  name: DBName
  nameWithType: Postgres.DBName
  fullName: AutoCheck.Connectors.Postgres.DBName
- uid: AutoCheck.Connectors.Postgres.DBUser*
  commentId: Overload:AutoCheck.Connectors.Postgres.DBUser
  name: DBUser
  nameWithType: Postgres.DBUser
  fullName: AutoCheck.Connectors.Postgres.DBUser
- uid: AutoCheck.Connectors.Postgres.Student*
  commentId: Overload:AutoCheck.Connectors.Postgres.Student
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Connectors.Postgres.Student
- uid: AutoCheck.Connectors.Postgres.#ctor*
  commentId: Overload:AutoCheck.Connectors.Postgres.#ctor
  name: Postgres
  nameWithType: Postgres.Postgres
  fullName: AutoCheck.Connectors.Postgres.Postgres
- uid: AutoCheck.Core.Connector.Dispose
  commentId: M:AutoCheck.Core.Connector.Dispose
  parent: AutoCheck.Core.Connector
  name: Dispose()
  nameWithType: Connector.Dispose()
  fullName: AutoCheck.Core.Connector.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Connector.Dispose
    name: Dispose
    nameWithType: Connector.Dispose
    fullName: AutoCheck.Core.Connector.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connector.Dispose
    name: Dispose
    nameWithType: Connector.Dispose
    fullName: AutoCheck.Core.Connector.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Connectors.Postgres.Dispose*
  commentId: Overload:AutoCheck.Connectors.Postgres.Dispose
  name: Dispose
  nameWithType: Postgres.Dispose
  fullName: AutoCheck.Connectors.Postgres.Dispose
- uid: AutoCheck.Connectors.Postgres.SelectData*
  commentId: Overload:AutoCheck.Connectors.Postgres.SelectData
  name: SelectData
  nameWithType: Postgres.SelectData
  fullName: AutoCheck.Connectors.Postgres.SelectData
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data.DataSet
  commentId: T:System.Data.DataSet
  parent: System.Data
  isExternal: true
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: AutoCheck.Connectors.Postgres.Operator
  commentId: T:AutoCheck.Connectors.Postgres.Operator
  parent: AutoCheck.Connectors
  name: Postgres.Operator
  nameWithType: Postgres.Operator
  fullName: AutoCheck.Connectors.Postgres.Operator
- uid: AutoCheck.Connectors.Postgres.InsertData*
  commentId: Overload:AutoCheck.Connectors.Postgres.InsertData
  name: InsertData
  nameWithType: Postgres.InsertData
  fullName: AutoCheck.Connectors.Postgres.InsertData
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Connectors.Postgres.UpdateData*
  commentId: Overload:AutoCheck.Connectors.Postgres.UpdateData
  name: UpdateData
  nameWithType: Postgres.UpdateData
  fullName: AutoCheck.Connectors.Postgres.UpdateData
- uid: AutoCheck.Connectors.Postgres.DeleteData*
  commentId: Overload:AutoCheck.Connectors.Postgres.DeleteData
  name: DeleteData
  nameWithType: Postgres.DeleteData
  fullName: AutoCheck.Connectors.Postgres.DeleteData
- uid: AutoCheck.Connectors.Postgres.RevokeRole*
  commentId: Overload:AutoCheck.Connectors.Postgres.RevokeRole
  name: RevokeRole
  nameWithType: Postgres.RevokeRole
  fullName: AutoCheck.Connectors.Postgres.RevokeRole
- uid: AutoCheck.Connectors.Postgres.CompareSelects*
  commentId: Overload:AutoCheck.Connectors.Postgres.CompareSelects
  name: CompareSelects
  nameWithType: Postgres.CompareSelects
  fullName: AutoCheck.Connectors.Postgres.CompareSelects
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Connectors.Postgres.ExistsDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExistsDataBase
  name: ExistsDataBase
  nameWithType: Postgres.ExistsDataBase
  fullName: AutoCheck.Connectors.Postgres.ExistsDataBase
- uid: AutoCheck.Connectors.Postgres.CreateDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.CreateDataBase
  name: CreateDataBase
  nameWithType: Postgres.CreateDataBase
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase
- uid: AutoCheck.Connectors.Postgres.DropDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.DropDataBase
  name: DropDataBase
  nameWithType: Postgres.DropDataBase
  fullName: AutoCheck.Connectors.Postgres.DropDataBase
- uid: AutoCheck.Connectors.Postgres.CountRegisters*
  commentId: Overload:AutoCheck.Connectors.Postgres.CountRegisters
  name: CountRegisters
  nameWithType: Postgres.CountRegisters
  fullName: AutoCheck.Connectors.Postgres.CountRegisters
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: AutoCheck.Connectors.Postgres.GetLastID*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetLastID
  name: GetLastID
  nameWithType: Postgres.GetLastID
  fullName: AutoCheck.Connectors.Postgres.GetLastID
- uid: AutoCheck.Connectors.Postgres.GetID*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetID
  name: GetID
  nameWithType: Postgres.GetID
  fullName: AutoCheck.Connectors.Postgres.GetID
- uid: System.ComponentModel.ListSortDirection
  commentId: T:System.ComponentModel.ListSortDirection
  parent: System.ComponentModel
  isExternal: true
  name: ListSortDirection
  nameWithType: ListSortDirection
  fullName: System.ComponentModel.ListSortDirection
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: AutoCheck.Connectors.Postgres.GetViewDefinition*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetViewDefinition
  name: GetViewDefinition
  nameWithType: Postgres.GetViewDefinition
  fullName: AutoCheck.Connectors.Postgres.GetViewDefinition
- uid: AutoCheck.Connectors.Postgres.GetTablePrivileges*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetTablePrivileges
  name: GetTablePrivileges
  nameWithType: Postgres.GetTablePrivileges
  fullName: AutoCheck.Connectors.Postgres.GetTablePrivileges
- uid: AutoCheck.Connectors.Postgres.GetSchemaPrivileges*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetSchemaPrivileges
  name: GetSchemaPrivileges
  nameWithType: Postgres.GetSchemaPrivileges
  fullName: AutoCheck.Connectors.Postgres.GetSchemaPrivileges
- uid: AutoCheck.Connectors.Postgres.GetRoleMembership*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetRoleMembership
  name: GetRoleMembership
  nameWithType: Postgres.GetRoleMembership
  fullName: AutoCheck.Connectors.Postgres.GetRoleMembership
- uid: AutoCheck.Connectors.Postgres.GetForeignKeys*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetForeignKeys
  name: GetForeignKeys
  nameWithType: Postgres.GetForeignKeys
  fullName: AutoCheck.Connectors.Postgres.GetForeignKeys
- uid: AutoCheck.Connectors.Postgres.ExecuteNonQuery*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: Postgres.ExecuteNonQuery
  fullName: AutoCheck.Connectors.Postgres.ExecuteNonQuery
- uid: AutoCheck.Connectors.Postgres.ExecuteQuery*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteQuery
  name: ExecuteQuery
  nameWithType: Postgres.ExecuteQuery
  fullName: AutoCheck.Connectors.Postgres.ExecuteQuery
- uid: AutoCheck.Connectors.Postgres.ExecuteScalar*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteScalar
  name: ExecuteScalar
  nameWithType: Postgres.ExecuteScalar
  fullName: AutoCheck.Connectors.Postgres.ExecuteScalar
