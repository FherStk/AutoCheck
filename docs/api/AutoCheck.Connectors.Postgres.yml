### YamlMime:ManagedReference
items:
- uid: AutoCheck.Connectors.Postgres
  commentId: T:AutoCheck.Connectors.Postgres
  id: Postgres
  parent: AutoCheck.Connectors
  children:
  - AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.BinPath
  - AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  - AutoCheck.Connectors.Postgres.Conn
  - AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source)
  - AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  - AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  - AutoCheck.Connectors.Postgres.CountRoles
  - AutoCheck.Connectors.Postgres.CountUsers
  - AutoCheck.Connectors.Postgres.CreateDataBase
  - AutoCheck.Connectors.Postgres.CreateDataBase(System.String)
  - AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  - AutoCheck.Connectors.Postgres.CreateRole(System.String)
  - AutoCheck.Connectors.Postgres.CreateUser(System.String,System.String)
  - AutoCheck.Connectors.Postgres.Database
  - AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination)
  - AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter)
  - AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  - AutoCheck.Connectors.Postgres.Delete(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.Dispose
  - AutoCheck.Connectors.Postgres.DropDataBase
  - AutoCheck.Connectors.Postgres.DropRole(System.String)
  - AutoCheck.Connectors.Postgres.DropUser(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  - AutoCheck.Connectors.Postgres.ExecuteScalar``1(System.String)
  - AutoCheck.Connectors.Postgres.ExistsDataBase
  - AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,System.String,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetField``1(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  - AutoCheck.Connectors.Postgres.GetForeignKeys(AutoCheck.Connectors.Postgres.Source)
  - AutoCheck.Connectors.Postgres.GetForeignKeys(System.String)
  - AutoCheck.Connectors.Postgres.GetMembership(System.String)
  - AutoCheck.Connectors.Postgres.GetRoles
  - AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetTablePrivileges(AutoCheck.Connectors.Postgres.Source,System.String)
  - AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String)
  - AutoCheck.Connectors.Postgres.GetUsers
  - AutoCheck.Connectors.Postgres.GetViewDefinition(AutoCheck.Connectors.Postgres.Source)
  - AutoCheck.Connectors.Postgres.GetViewDefinition(System.String)
  - AutoCheck.Connectors.Postgres.Grant(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  - AutoCheck.Connectors.Postgres.Grant(System.String,System.String)
  - AutoCheck.Connectors.Postgres.Grant(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.Host
  - AutoCheck.Connectors.Postgres.ImportSqlFile(System.String)
  - AutoCheck.Connectors.Postgres.Insert(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Insert``1(AutoCheck.Connectors.Postgres.Destination,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Insert``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Password
  - AutoCheck.Connectors.Postgres.Revoke(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  - AutoCheck.Connectors.Postgres.Revoke(System.String,System.String)
  - AutoCheck.Connectors.Postgres.Revoke(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String)
  - AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String[])
  - AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String)
  - AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String[])
  - AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String)
  - AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String[])
  - AutoCheck.Connectors.Postgres.Student
  - AutoCheck.Connectors.Postgres.TestConnection
  - AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.Update(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - AutoCheck.Connectors.Postgres.User
  langs:
  - csharp
  - vb
  name: Postgres
  nameWithType: Postgres
  fullName: AutoCheck.Connectors.Postgres
  type: Class
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Postgres
    path: ../connectors/Postgres.cs
    startLine: 37
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nAllows in/out operations and/or data validations with a PostgreSQL instance.\n"
  example: []
  syntax:
    content: 'public class Postgres : Connector, IDisposable'
    content.vb: >-
      Public Class Postgres
          Inherits Connector
          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Connector
  derivedClasses:
  - AutoCheck.Connectors.Odoo
  implements:
  - System.IDisposable
  inheritedMembers:
  - AutoCheck.Core.Connector.CurrentOS
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Connectors.Postgres.Conn
  commentId: P:AutoCheck.Connectors.Postgres.Conn
  id: Conn
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Conn
  nameWithType: Postgres.Conn
  fullName: AutoCheck.Connectors.Postgres.Conn
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Conn
    path: ../connectors/Postgres.cs
    startLine: 160
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe connection used for communication between PostgreSQL and the current application.\n"
  example: []
  syntax:
    content: public NpgsqlConnection Conn { get; }
    parameters: []
    return:
      type: Npgsql.NpgsqlConnection
      description: ''
    content.vb: Public ReadOnly Property Conn As NpgsqlConnection
  overload: AutoCheck.Connectors.Postgres.Conn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.Host
  commentId: P:AutoCheck.Connectors.Postgres.Host
  id: Host
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: Postgres.Host
  fullName: AutoCheck.Connectors.Postgres.Host
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Host
    path: ../connectors/Postgres.cs
    startLine: 166
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nPostgreSQL host address.\n"
  example: []
  syntax:
    content: public string Host { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Host As String
  overload: AutoCheck.Connectors.Postgres.Host*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.Database
  commentId: P:AutoCheck.Connectors.Postgres.Database
  id: Database
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: Postgres.Database
  fullName: AutoCheck.Connectors.Postgres.Database
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Database
    path: ../connectors/Postgres.cs
    startLine: 172
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe PostgreSQL database host address, with a running instance allowing remote connections.\n"
  example: []
  syntax:
    content: public string Database { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Database As String
  overload: AutoCheck.Connectors.Postgres.Database*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.User
  commentId: P:AutoCheck.Connectors.Postgres.User
  id: User
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: User
  nameWithType: Postgres.User
  fullName: AutoCheck.Connectors.Postgres.User
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: User
    path: ../connectors/Postgres.cs
    startLine: 178
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe PostgreSQL database username, which will be used to perform operations.\n"
  example: []
  syntax:
    content: public string User { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property User As String
  overload: AutoCheck.Connectors.Postgres.User*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.Password
  commentId: P:AutoCheck.Connectors.Postgres.Password
  id: Password
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: Postgres.Password
  fullName: AutoCheck.Connectors.Postgres.Password
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Password
    path: ../connectors/Postgres.cs
    startLine: 185
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\n\nThe PostgreSQL database password, which will be used to perform operations.\n"
  example: []
  syntax:
    content: protected string Password { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Protected ReadOnly Property Password As String
  overload: AutoCheck.Connectors.Postgres.Password*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.BinPath
  commentId: P:AutoCheck.Connectors.Postgres.BinPath
  id: BinPath
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: BinPath
  nameWithType: Postgres.BinPath
  fullName: AutoCheck.Connectors.Postgres.BinPath
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: BinPath
    path: ../connectors/Postgres.cs
    startLine: 191
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe path to the bin folder [only needed for windows systems].\n"
  example: []
  syntax:
    content: public string BinPath { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property BinPath As String
  overload: AutoCheck.Connectors.Postgres.BinPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.Student
  commentId: P:AutoCheck.Connectors.Postgres.Student
  id: Student
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Connectors.Postgres.Student
  type: Property
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Student
    path: ../connectors/Postgres.cs
    startLine: 197
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nThe student name wich is the original database creator.\n"
  example: []
  syntax:
    content: public string Student { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Student As String
  overload: AutoCheck.Connectors.Postgres.Student*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Postgres(String, String, String, String, String)
  nameWithType: Postgres.Postgres(String, String, String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Postgres(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../connectors/Postgres.cs
    startLine: 212
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new connector instance.\n"
  example: []
  syntax:
    content: public Postgres(string host, string database, string username, string password = null, string binPath = "C:\\Program Files\\PostgreSQL\\10\\bin")
    parameters:
    - id: host
      type: System.String
      description: Host address in order to connect with the running PostgreSQL service.
    - id: database
      type: System.String
      description: The PostgreSQL database name.
    - id: username
      type: System.String
      description: The PostgreSQL database username, which will be used to perform operations.
    - id: password
      type: System.String
      description: The PostgreSQL database password, which will be used to perform operations.
    - id: binPath
      type: System.String
      description: The path to the bin folder [only needed for windows systems].
    content.vb: Public Sub New(host As String, database As String, username As String, password As String = Nothing, binPath As String = "C:\Program Files\PostgreSQL\10\bin")
  overload: AutoCheck.Connectors.Postgres.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Dispose
  commentId: M:AutoCheck.Connectors.Postgres.Dispose
  id: Dispose
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Postgres.Dispose()
  fullName: AutoCheck.Connectors.Postgres.Dispose()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../connectors/Postgres.cs
    startLine: 228
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCleans and releases memory for unnatended objects.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Connector.Dispose
  overload: AutoCheck.Connectors.Postgres.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Connectors.Postgres.TestConnection
  commentId: M:AutoCheck.Connectors.Postgres.TestConnection
  id: TestConnection
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: TestConnection()
  nameWithType: Postgres.TestConnection()
  fullName: AutoCheck.Connectors.Postgres.TestConnection()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: TestConnection
    path: ../connectors/Postgres.cs
    startLine: 236
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nTest the connection to the database, so an exception will be thrown if any problem occurs.\n"
  example: []
  syntax:
    content: public void TestConnection()
    content.vb: Public Sub TestConnection
  overload: AutoCheck.Connectors.Postgres.TestConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  id: ExecuteQuery(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteQuery(String)
  nameWithType: Postgres.ExecuteQuery(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteQuery(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteQuery
    path: ../connectors/Postgres.cs
    startLine: 252
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces an output as a set of data.\n"
  example: []
  syntax:
    content: public DataSet ExecuteQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    return:
      type: System.Data.DataSet
      description: The dataset containing all the output.
    content.vb: Public Function ExecuteQuery(query As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.ExecuteQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  id: ExecuteNonQuery(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(String)
  nameWithType: Postgres.ExecuteNonQuery(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteNonQuery(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteNonQuery
    path: ../connectors/Postgres.cs
    startLine: 290
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces no output.\n"
  example: []
  syntax:
    content: public void ExecuteNonQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    content.vb: Public Sub ExecuteNonQuery(query As String)
  overload: AutoCheck.Connectors.Postgres.ExecuteNonQuery*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ExecuteScalar``1(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ExecuteScalar``1(System.String)
  id: ExecuteScalar``1(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExecuteScalar<T>(String)
  nameWithType: Postgres.ExecuteScalar<T>(String)
  fullName: AutoCheck.Connectors.Postgres.ExecuteScalar<T>(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExecuteScalar
    path: ../connectors/Postgres.cs
    startLine: 312
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRuns a query that produces an output as a single data.\n"
  example: []
  syntax:
    content: public T ExecuteScalar<T>(string query)
    parameters:
    - id: query
      type: System.String
      description: The query to run.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The requested item.
    content.vb: Public Function ExecuteScalar(Of T)(query As String) As T
  overload: AutoCheck.Connectors.Postgres.ExecuteScalar*
  nameWithType.vb: Postgres.ExecuteScalar(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.ExecuteScalar(Of T)(System.String)
  name.vb: ExecuteScalar(Of T)(String)
- uid: AutoCheck.Connectors.Postgres.ExistsDataBase
  commentId: M:AutoCheck.Connectors.Postgres.ExistsDataBase
  id: ExistsDataBase
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ExistsDataBase()
  nameWithType: Postgres.ExistsDataBase()
  fullName: AutoCheck.Connectors.Postgres.ExistsDataBase()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ExistsDataBase
    path: ../connectors/Postgres.cs
    startLine: 334
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nChecks if the database exists.\n"
  example: []
  syntax:
    content: public bool ExistsDataBase()
    return:
      type: System.Boolean
      description: True if the database exists.
    content.vb: Public Function ExistsDataBase As Boolean
  overload: AutoCheck.Connectors.Postgres.ExistsDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CreateDataBase(System.String,System.String)
  id: CreateDataBase(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateDataBase(String, String)
  nameWithType: Postgres.CreateDataBase(String, String)
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateDataBase
    path: ../connectors/Postgres.cs
    startLine: 354
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new database using a SQL Dump file.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This overload has been deprecated, use other overloads and set the binPath (if needed) using the constructor.")]

      public void CreateDataBase(string filePath, string binPath)
    parameters:
    - id: filePath
      type: System.String
      description: The SQL Dump file path.
    - id: binPath
      type: System.String
      description: The path to the bin folder [only needed for windows systems].
    content.vb: >-
      <Obsolete("This overload has been deprecated, use other overloads and set the binPath (if needed) using the constructor.")>

      Public Sub CreateDataBase(filePath As String, binPath As String)
  overload: AutoCheck.Connectors.Postgres.CreateDataBase*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This overload has been deprecated, use other overloads and set the binPath (if needed) using the constructor.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateDataBase(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CreateDataBase(System.String)
  id: CreateDataBase(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateDataBase(String)
  nameWithType: Postgres.CreateDataBase(String)
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateDataBase
    path: ../connectors/Postgres.cs
    startLine: 366
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new database instance using an SQL Dump file.\n"
  example: []
  syntax:
    content: public void CreateDataBase(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: The SQL Dump file path.
    content.vb: Public Sub CreateDataBase(filePath As String)
  overload: AutoCheck.Connectors.Postgres.CreateDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateDataBase
  commentId: M:AutoCheck.Connectors.Postgres.CreateDataBase
  id: CreateDataBase
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateDataBase()
  nameWithType: Postgres.CreateDataBase()
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateDataBase
    path: ../connectors/Postgres.cs
    startLine: 376
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new and empty database.\n"
  example: []
  syntax:
    content: public void CreateDataBase()
    content.vb: Public Sub CreateDataBase
  overload: AutoCheck.Connectors.Postgres.CreateDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.ImportSqlFile(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.ImportSqlFile(System.String)
  id: ImportSqlFile(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: ImportSqlFile(String)
  nameWithType: Postgres.ImportSqlFile(String)
  fullName: AutoCheck.Connectors.Postgres.ImportSqlFile(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ImportSqlFile
    path: ../connectors/Postgres.cs
    startLine: 404
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nImports an SQL into the current database.\n"
  example: []
  syntax:
    content: public void ImportSqlFile(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: ''
    content.vb: Public Sub ImportSqlFile(filePath As String)
  overload: AutoCheck.Connectors.Postgres.ImportSqlFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DropDataBase
  commentId: M:AutoCheck.Connectors.Postgres.DropDataBase
  id: DropDataBase
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DropDataBase()
  nameWithType: Postgres.DropDataBase()
  fullName: AutoCheck.Connectors.Postgres.DropDataBase()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: DropDataBase
    path: ../connectors/Postgres.cs
    startLine: 435
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDrops the current database.\n"
  example: []
  syntax:
    content: public void DropDataBase()
    content.vb: Public Sub DropDataBase
  overload: AutoCheck.Connectors.Postgres.DropDataBase*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String)
  id: Select(AutoCheck.Connectors.Postgres.Source,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(Postgres.Source, String)
  nameWithType: Postgres.Select(Postgres.Source, String)
  fullName: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 491
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public DataSet Select(Postgres.Source source, string field = "*")
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: field
      type: System.String
      description: The field&apos;s data to load (a single one, or comma-separated set).
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As Postgres.Source, field As String = "*") As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,System.String[])
  id: Select(AutoCheck.Connectors.Postgres.Source,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(Postgres.Source, String[])
  nameWithType: Postgres.Select(Postgres.Source, String[])
  fullName: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 503
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public DataSet Select(Postgres.Source source, string[] fields)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: fields
      type: System.String[]
      description: The set of field&apos;s data to load.
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As Postgres.Source, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  nameWithType.vb: Postgres.Select(Postgres.Source, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, System.String())
  name.vb: Select(Postgres.Source, String())
- uid: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String)
  id: Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(Postgres.Source, Postgres.Filter, String)
  nameWithType: Postgres.Select(Postgres.Source, Postgres.Filter, String)
  fullName: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 516
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public DataSet Select(Postgres.Source source, Postgres.Filter filter, string field = "*")
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    - id: field
      type: System.String
      description: The field&apos;s data to load (a single one, or comma-separated set).
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As Postgres.Source, filter As Postgres.Filter, field As String = "*") As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String[])
  id: Select(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(Postgres.Source, Postgres.Filter, String[])
  nameWithType: Postgres.Select(Postgres.Source, Postgres.Filter, String[])
  fullName: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 531
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public DataSet Select(Postgres.Source source, Postgres.Filter filter, string[] fields)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    - id: fields
      type: System.String[]
      description: The set of field&apos;s data to load.
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As Postgres.Source, filter As Postgres.Filter, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  nameWithType.vb: Postgres.Select(Postgres.Source, Postgres.Filter, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Select(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.String())
  name.vb: Select(Postgres.Source, Postgres.Filter, String())
- uid: AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String)
  id: Select(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(String, String, String)
  nameWithType: Postgres.Select(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Select(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 545
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  example: []
  syntax:
    content: public DataSet Select(string source, string filter, string field = "*")
    parameters:
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    - id: field
      type: System.String
      description: The field&apos;s data to load (a single one, or comma-separated set).
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As String, filter As String, field As String = "*") As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String[])
  commentId: M:AutoCheck.Connectors.Postgres.Select(System.String,System.String,System.String[])
  id: Select(System.String,System.String,System.String[])
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Select(String, String, String[])
  nameWithType: Postgres.Select(String, String, String[])
  fullName: AutoCheck.Connectors.Postgres.Select(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Select
    path: ../connectors/Postgres.cs
    startLine: 557
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nSelects some data from the database.\n"
  example: []
  syntax:
    content: public DataSet Select(string source, string filter, string[] fields)
    parameters:
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    - id: fields
      type: System.String[]
      description: The set of field&apos;s data to load.
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data.
    content.vb: Public Function Select(source As String, filter As String, fields As String()) As DataSet
  overload: AutoCheck.Connectors.Postgres.Select*
  nameWithType.vb: Postgres.Select(String, String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Select(System.String, System.String, System.String())
  name.vb: Select(String, String, String())
- uid: AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,System.String,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,System.String,System.ComponentModel.ListSortDirection)
  id: GetField``1(AutoCheck.Connectors.Postgres.Source,System.String,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetField<T>(Postgres.Source, String, ListSortDirection)
  nameWithType: Postgres.GetField<T>(Postgres.Source, String, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetField<T>(AutoCheck.Connectors.Postgres.Source, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetField
    path: ../connectors/Postgres.cs
    startLine: 575
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the requested field&apos;s value for the first found item.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public T GetField<T>(Postgres.Source source, string field, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: field
      type: System.String
      description: The wanted field&apos;s name.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The item&apos;s field value, NULL if not found.
    content.vb: Public Function GetField(Of T)(source As Postgres.Source, field As String, sort As ListSortDirection = ListSortDirection.Descending) As T
  overload: AutoCheck.Connectors.Postgres.GetField*
  nameWithType.vb: Postgres.GetField(Of T)(Postgres.Source, String, ListSortDirection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.GetField(Of T)(AutoCheck.Connectors.Postgres.Source, System.String, System.ComponentModel.ListSortDirection)
  name.vb: GetField(Of T)(Postgres.Source, String, ListSortDirection)
- uid: AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetField``1(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String,System.ComponentModel.ListSortDirection)
  id: GetField``1(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.String,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetField<T>(Postgres.Source, Postgres.Filter, String, ListSortDirection)
  nameWithType: Postgres.GetField<T>(Postgres.Source, Postgres.Filter, String, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetField<T>(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetField
    path: ../connectors/Postgres.cs
    startLine: 589
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the requested field&apos;s value for the first found item.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public T GetField<T>(Postgres.Source source, Postgres.Filter filter, string field, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    - id: field
      type: System.String
      description: The wanted field&apos;s name.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The item&apos;s field value, NULL if not found.
    content.vb: Public Function GetField(Of T)(source As Postgres.Source, filter As Postgres.Filter, field As String, sort As ListSortDirection = ListSortDirection.Descending) As T
  overload: AutoCheck.Connectors.Postgres.GetField*
  nameWithType.vb: Postgres.GetField(Of T)(Postgres.Source, Postgres.Filter, String, ListSortDirection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.GetField(Of T)(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.String, System.ComponentModel.ListSortDirection)
  name.vb: GetField(Of T)(Postgres.Source, Postgres.Filter, String, ListSortDirection)
- uid: AutoCheck.Connectors.Postgres.GetField``1(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  commentId: M:AutoCheck.Connectors.Postgres.GetField``1(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  id: GetField``1(System.String,System.String,System.String,System.ComponentModel.ListSortDirection)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetField<T>(String, String, String, ListSortDirection)
  nameWithType: Postgres.GetField<T>(String, String, String, ListSortDirection)
  fullName: AutoCheck.Connectors.Postgres.GetField<T>(System.String, System.String, System.String, System.ComponentModel.ListSortDirection)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetField
    path: ../connectors/Postgres.cs
    startLine: 603
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the requested field&apos;s value for the first found item.\n"
  example: []
  syntax:
    content: public T GetField<T>(string source, string filter, string field, ListSortDirection sort = ListSortDirection.Descending)
    parameters:
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    - id: field
      type: System.String
      description: The wanted field&apos;s name.
    - id: sort
      type: System.ComponentModel.ListSortDirection
      description: Defines how to order the list, so the max value will be returned when &quot;descending&quot; and min value when &quot;ascending&quot;..
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The item&apos;s field value, NULL if not found.
    content.vb: Public Function GetField(Of T)(source As String, filter As String, field As String, sort As ListSortDirection = ListSortDirection.Descending) As T
  overload: AutoCheck.Connectors.Postgres.GetField*
  nameWithType.vb: Postgres.GetField(Of T)(String, String, String, ListSortDirection)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.GetField(Of T)(System.String, System.String, System.String, System.ComponentModel.ListSortDirection)
  name.vb: GetField(Of T)(String, String, String, ListSortDirection)
- uid: AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source)
  id: CountRegisters(AutoCheck.Connectors.Postgres.Source)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(Postgres.Source)
  nameWithType: Postgres.CountRegisters(Postgres.Source)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 617
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table.\n"
  example: []
  syntax:
    content: public long CountRegisters(Postgres.Source source)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    return:
      type: System.Int64
      description: Amount of registers found.
    content.vb: Public Function CountRegisters(source As Postgres.Source) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  id: CountRegisters(AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(Postgres.Source, Postgres.Filter)
  nameWithType: Postgres.CountRegisters(Postgres.Source, Postgres.Filter)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 628
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table.\n"
  example: []
  syntax:
    content: public long CountRegisters(Postgres.Source source, Postgres.Filter filter)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    return:
      type: System.Int64
      description: Amount of registers found.
    content.vb: Public Function CountRegisters(source As Postgres.Source, filter As Postgres.Filter) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CountRegisters(System.String,System.String)
  id: CountRegisters(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRegisters(String, String)
  nameWithType: Postgres.CountRegisters(String, String)
  fullName: AutoCheck.Connectors.Postgres.CountRegisters(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRegisters
    path: ../connectors/Postgres.cs
    startLine: 640
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many registers appears in a table.\n"
  example: []
  syntax:
    content: public long CountRegisters(string source, string filter = null)
    parameters:
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    return:
      type: System.Int64
      description: Amount of registers found.
    content.vb: Public Function CountRegisters(source As String, filter As String = Nothing) As Long
  overload: AutoCheck.Connectors.Postgres.CountRegisters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Insert``1(AutoCheck.Connectors.Postgres.Destination,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Insert``1(AutoCheck.Connectors.Postgres.Destination,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert``1(AutoCheck.Connectors.Postgres.Destination,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Insert<T>(Postgres.Destination, String, Dictionary<String, Object>)
  nameWithType: Postgres.Insert<T>(Postgres.Destination, String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Insert<T>(AutoCheck.Connectors.Postgres.Destination, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Insert
    path: ../connectors/Postgres.cs
    startLine: 659
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  syntax:
    content: public T Insert<T>(Postgres.Destination destination, string primaryKey, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
    - id: primaryKey
      type: System.String
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Insert(Of T)(destination As Postgres.Destination, primaryKey As String, fields As Dictionary(Of String, Object)) As T
  overload: AutoCheck.Connectors.Postgres.Insert*
  nameWithType.vb: Postgres.Insert(Of T)(Postgres.Destination, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Insert(Of T)(AutoCheck.Connectors.Postgres.Destination, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(Of T)(Postgres.Destination, String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Insert``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Insert``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Insert<T>(String, String, Dictionary<String, Object>)
  nameWithType: Postgres.Insert<T>(String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Insert<T>(System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Insert
    path: ../connectors/Postgres.cs
    startLine: 671
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  syntax:
    content: public T Insert<T>(string destination, string primaryKey, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: System.String
    - id: primaryKey
      type: System.String
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Insert(Of T)(destination As String, primaryKey As String, fields As Dictionary(Of String, Object)) As T
  overload: AutoCheck.Connectors.Postgres.Insert*
  nameWithType.vb: Postgres.Insert(Of T)(String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Insert(Of T)(System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(Of T)(String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Insert(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Insert(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Insert(Postgres.Destination, Dictionary<String, Object>)
  nameWithType: Postgres.Insert(Postgres.Destination, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Insert(AutoCheck.Connectors.Postgres.Destination, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Insert
    path: ../connectors/Postgres.cs
    startLine: 682
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nInserts new data into a table.\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public void Insert(Postgres.Destination destination, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries as values must start with @.
    content.vb: Public Sub Insert(destination As Postgres.Destination, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Insert*
  nameWithType.vb: Postgres.Insert(Postgres.Destination, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Insert(AutoCheck.Connectors.Postgres.Destination, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(Postgres.Destination, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Insert(String, Dictionary<String, Object>)
  nameWithType: Postgres.Insert(String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Insert(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Insert
    path: ../connectors/Postgres.cs
    startLine: 693
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nInserts new data into a table.\n"
  example: []
  syntax:
    content: public void Insert(string destination, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: System.String
      description: The schema and table where the data will be added, should be an SQL INTO sentence (schema.table).
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Insert(destination As String, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Insert*
  nameWithType.vb: Postgres.Insert(String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Insert(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Insert(String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(AutoCheck.Connectors.Postgres.Destination,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Update(Postgres.Destination, Dictionary<String, Object>)
  nameWithType: Postgres.Update(Postgres.Destination, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Update
    path: ../connectors/Postgres.cs
    startLine: 712
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdates some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public void Update(Postgres.Destination destination, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Update(destination As Postgres.Destination, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Update*
  nameWithType.vb: Postgres.Update(Postgres.Destination, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(Postgres.Destination, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Update(Postgres.Destination, Postgres.Filter, Dictionary<String, Object>)
  nameWithType: Postgres.Update(Postgres.Destination, Postgres.Filter, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Filter, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Update
    path: ../connectors/Postgres.cs
    startLine: 725
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdates some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public void Update(Postgres.Destination destination, Postgres.Filter filter, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Update(destination As Postgres.Destination, filter As Postgres.Filter, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Update*
  nameWithType.vb: Postgres.Update(Postgres.Destination, Postgres.Filter, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Filter, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(Postgres.Destination, Postgres.Filter, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Update(Postgres.Destination, Postgres.Source, Postgres.Filter, Dictionary<String, Object>)
  nameWithType: Postgres.Update(Postgres.Destination, Postgres.Source, Postgres.Filter, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Update
    path: ../connectors/Postgres.cs
    startLine: 740
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdates some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  remarks: Use the overload with only string parameters for complex queries.
  example: []
  syntax:
    content: public void Update(Postgres.Destination destination, Postgres.Source source, Postgres.Filter filter, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Update(destination As Postgres.Destination, source As Postgres.Source, filter As Postgres.Filter, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Update*
  nameWithType.vb: Postgres.Update(Postgres.Destination, Postgres.Source, Postgres.Filter, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Update(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(Postgres.Destination, Postgres.Source, Postgres.Filter, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Update(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:AutoCheck.Connectors.Postgres.Update(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: Update(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Update(String, String, String, Dictionary<String, Object>)
  nameWithType: Postgres.Update(String, String, String, Dictionary<String, Object>)
  fullName: AutoCheck.Connectors.Postgres.Update(System.String, System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Update
    path: ../connectors/Postgres.cs
    startLine: 755
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nUpdates some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void Update(string destination, string source, string filter, Dictionary<string, object> fields)
    parameters:
    - id: destination
      type: System.String
      description: The unique schema and table where the data will be added.
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    - id: fields
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Key-value pairs of data [field, value], subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Update(destination As String, source As String, filter As String, fields As Dictionary(Of String, Object))
  overload: AutoCheck.Connectors.Postgres.Update*
  nameWithType.vb: Postgres.Update(String, String, String, Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Connectors.Postgres.Update(System.String, System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Update(String, String, String, Dictionary(Of String, Object))
- uid: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination)
  commentId: M:AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination)
  id: Delete(AutoCheck.Connectors.Postgres.Destination)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Delete(Postgres.Destination)
  nameWithType: Postgres.Delete(Postgres.Destination)
  fullName: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Delete
    path: ../connectors/Postgres.cs
    startLine: 776
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDeletes some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void Delete(Postgres.Destination destination)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    content.vb: Public Sub Delete(destination As Postgres.Destination)
  overload: AutoCheck.Connectors.Postgres.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter)
  commentId: M:AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter)
  id: Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Filter)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Delete(Postgres.Destination, Postgres.Filter)
  nameWithType: Postgres.Delete(Postgres.Destination, Postgres.Filter)
  fullName: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Filter)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Delete
    path: ../connectors/Postgres.cs
    startLine: 786
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDeletes some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void Delete(Postgres.Destination destination, Postgres.Filter filter)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Delete(destination As Postgres.Destination, filter As Postgres.Filter)
  overload: AutoCheck.Connectors.Postgres.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  commentId: M:AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  id: Delete(AutoCheck.Connectors.Postgres.Destination,AutoCheck.Connectors.Postgres.Source,AutoCheck.Connectors.Postgres.Filter)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Delete(Postgres.Destination, Postgres.Source, Postgres.Filter)
  nameWithType: Postgres.Delete(Postgres.Destination, Postgres.Source, Postgres.Filter)
  fullName: AutoCheck.Connectors.Postgres.Delete(AutoCheck.Connectors.Postgres.Destination, AutoCheck.Connectors.Postgres.Source, AutoCheck.Connectors.Postgres.Filter)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Delete
    path: ../connectors/Postgres.cs
    startLine: 799
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDeletes some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void Delete(Postgres.Destination destination, Postgres.Source source, Postgres.Filter filter)
    parameters:
    - id: destination
      type: AutoCheck.Connectors.Postgres.Destination
      description: The unique schema and table where the data will be added.
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: AutoCheck.Connectors.Postgres.Filter
      description: A filter over a single field which will be used to screen the data, subqueries are allowed but must start with &apos;@&apos; and surrounded by parenthesis like &apos;@(SELECT MAX(id)+1 FROM t)&apos;.
    content.vb: Public Sub Delete(destination As Postgres.Destination, source As Postgres.Source, filter As Postgres.Filter)
  overload: AutoCheck.Connectors.Postgres.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Delete(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Delete(System.String,System.String,System.String)
  id: Delete(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Delete(String, String, String)
  nameWithType: Postgres.Delete(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Delete(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Delete
    path: ../connectors/Postgres.cs
    startLine: 813
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nDelete some data from a table, the &apos;ExecuteNonQuery&apos; method can be used for complex filters (and, or, etc.).\n"
  example: []
  syntax:
    content: public void Delete(string destination, string source, string filter)
    parameters:
    - id: destination
      type: System.String
      description: The unique schema and table where the data will be added.
    - id: source
      type: System.String
      description: The set of schemas and tables from which the data will be loaded, should be an SQL FROM sentence (without FROM) allowing joins and alisases.
    - id: filter
      type: System.String
      description: The set of filters which will be used to screen the data, should be an SQL WHERE sentence (without WHERE).
    content.vb: Public Sub Delete(destination As String, source As String, filter As String)
  overload: AutoCheck.Connectors.Postgres.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetUsers
  commentId: M:AutoCheck.Connectors.Postgres.GetUsers
  id: GetUsers
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetUsers()
  nameWithType: Postgres.GetUsers()
  fullName: AutoCheck.Connectors.Postgres.GetUsers()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetUsers
    path: ../connectors/Postgres.cs
    startLine: 829
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRequests for all the users created.\n"
  example: []
  syntax:
    content: public DataSet GetUsers()
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data (&apos;username&apos;, &apos;attributes&apos;).
    content.vb: Public Function GetUsers As DataSet
  overload: AutoCheck.Connectors.Postgres.GetUsers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountUsers
  commentId: M:AutoCheck.Connectors.Postgres.CountUsers
  id: CountUsers
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountUsers()
  nameWithType: Postgres.CountUsers()
  fullName: AutoCheck.Connectors.Postgres.CountUsers()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountUsers
    path: ../connectors/Postgres.cs
    startLine: 847
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many user accounts are in the database.\n"
  example: []
  syntax:
    content: public long CountUsers()
    return:
      type: System.Int64
      description: A dataset containing the requested data.
    content.vb: Public Function CountUsers As Long
  overload: AutoCheck.Connectors.Postgres.CountUsers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateUser(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CreateUser(System.String,System.String)
  id: CreateUser(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateUser(String, String)
  nameWithType: Postgres.CreateUser(String, String)
  fullName: AutoCheck.Connectors.Postgres.CreateUser(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateUser
    path: ../connectors/Postgres.cs
    startLine: 855
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new user.\n"
  example: []
  syntax:
    content: public void CreateUser(string user, string password = "")
    parameters:
    - id: user
      type: System.String
    - id: password
      type: System.String
    content.vb: Public Sub CreateUser(user As String, password As String = "")
  overload: AutoCheck.Connectors.Postgres.CreateUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DropUser(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.DropUser(System.String)
  id: DropUser(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DropUser(String)
  nameWithType: Postgres.DropUser(String)
  fullName: AutoCheck.Connectors.Postgres.DropUser(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: DropUser
    path: ../connectors/Postgres.cs
    startLine: 868
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRemoves an existing user.\n"
  example: []
  syntax:
    content: public void DropUser(string user)
    parameters:
    - id: user
      type: System.String
    content.vb: Public Sub DropUser(user As String)
  overload: AutoCheck.Connectors.Postgres.DropUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetRoles
  commentId: M:AutoCheck.Connectors.Postgres.GetRoles
  id: GetRoles
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetRoles()
  nameWithType: Postgres.GetRoles()
  fullName: AutoCheck.Connectors.Postgres.GetRoles()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetRoles
    path: ../connectors/Postgres.cs
    startLine: 878
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRequests for all the roles created.\n"
  example: []
  syntax:
    content: public DataSet GetRoles()
    return:
      type: System.Data.DataSet
      description: A dataset containing the requested data (&apos;rolname&apos;).
    content.vb: Public Function GetRoles As DataSet
  overload: AutoCheck.Connectors.Postgres.GetRoles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CountRoles
  commentId: M:AutoCheck.Connectors.Postgres.CountRoles
  id: CountRoles
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CountRoles()
  nameWithType: Postgres.CountRoles()
  fullName: AutoCheck.Connectors.Postgres.CountRoles()
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountRoles
    path: ../connectors/Postgres.cs
    startLine: 886
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCounts how many roles are in the database.\n"
  example: []
  syntax:
    content: public long CountRoles()
    return:
      type: System.Int64
      description: A dataset containing the requested data.
    content.vb: Public Function CountRoles As Long
  overload: AutoCheck.Connectors.Postgres.CountRoles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CreateRole(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CreateRole(String)
  nameWithType: Postgres.CreateRole(String)
  fullName: AutoCheck.Connectors.Postgres.CreateRole(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CreateRole
    path: ../connectors/Postgres.cs
    startLine: 894
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCreates a new role.\n"
  example: []
  syntax:
    content: public void CreateRole(string role)
    parameters:
    - id: role
      type: System.String
      description: The role name to create.
    content.vb: Public Sub CreateRole(role As String)
  overload: AutoCheck.Connectors.Postgres.CreateRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.DropRole(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.DropRole(System.String)
  id: DropRole(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: DropRole(String)
  nameWithType: Postgres.DropRole(String)
  fullName: AutoCheck.Connectors.Postgres.DropRole(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: DropRole
    path: ../connectors/Postgres.cs
    startLine: 904
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRemoves an existing role.\n"
  example: []
  syntax:
    content: public void DropRole(string role)
    parameters:
    - id: role
      type: System.String
      description: The role name to remove.
    content.vb: Public Sub DropRole(role As String)
  overload: AutoCheck.Connectors.Postgres.DropRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Grant(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Grant(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  id: Grant(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Grant(String, Postgres.Destination, String)
  nameWithType: Postgres.Grant(String, Postgres.Destination, String)
  fullName: AutoCheck.Connectors.Postgres.Grant(System.String, AutoCheck.Connectors.Postgres.Destination, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Grant
    path: ../connectors/Postgres.cs
    startLine: 918
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGrants an item (role, group or permission) to a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Grant(string what, Postgres.Destination where, string who)
    parameters:
    - id: what
      type: System.String
      description: What to grant (permission).
    - id: where
      type: AutoCheck.Connectors.Postgres.Destination
      description: Where to grant (table).
    - id: who
      type: System.String
      description: Who to grant (role, group or user).
    content.vb: Public Sub Grant(what As String, where As Postgres.Destination, who As String)
  overload: AutoCheck.Connectors.Postgres.Grant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Grant(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Grant(System.String,System.String,System.String)
  id: Grant(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Grant(String, String, String)
  nameWithType: Postgres.Grant(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Grant(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Grant
    path: ../connectors/Postgres.cs
    startLine: 929
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGrants an item (role, group or permission) to a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Grant(string what, string where, string who)
    parameters:
    - id: what
      type: System.String
      description: What to grant (permission).
    - id: where
      type: System.String
      description: Where to grant (schema).
    - id: who
      type: System.String
      description: Who to grant (role, group or user).
    content.vb: Public Sub Grant(what As String, where As String, who As String)
  overload: AutoCheck.Connectors.Postgres.Grant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Grant(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Grant(System.String,System.String)
  id: Grant(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Grant(String, String)
  nameWithType: Postgres.Grant(String, String)
  fullName: AutoCheck.Connectors.Postgres.Grant(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Grant
    path: ../connectors/Postgres.cs
    startLine: 942
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGrants an item (role, group or permissio) to a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Grant(string who, string where)
    parameters:
    - id: who
      type: System.String
      description: Who to grant (role, group or user) or the permission to grant as an SQL compatible statement like &apos;permission ON schema.table&apos;.
    - id: where
      type: System.String
      description: 'Where to grant (destination: role, group or user).'
    content.vb: Public Sub Grant(who As String, where As String)
  overload: AutoCheck.Connectors.Postgres.Grant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Revoke(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Revoke(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  id: Revoke(System.String,AutoCheck.Connectors.Postgres.Destination,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Revoke(String, Postgres.Destination, String)
  nameWithType: Postgres.Revoke(String, Postgres.Destination, String)
  fullName: AutoCheck.Connectors.Postgres.Revoke(System.String, AutoCheck.Connectors.Postgres.Destination, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Revoke
    path: ../connectors/Postgres.cs
    startLine: 955
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRevokes an item (role, group or permission) from a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Revoke(string what, Postgres.Destination where, string who)
    parameters:
    - id: what
      type: System.String
      description: What to revoke (permission).
    - id: where
      type: AutoCheck.Connectors.Postgres.Destination
      description: Where to revoke (schema).
    - id: who
      type: System.String
      description: Who to revoke (role, group or user).
    content.vb: Public Sub Revoke(what As String, where As Postgres.Destination, who As String)
  overload: AutoCheck.Connectors.Postgres.Revoke*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Revoke(System.String,System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Revoke(System.String,System.String,System.String)
  id: Revoke(System.String,System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Revoke(String, String, String)
  nameWithType: Postgres.Revoke(String, String, String)
  fullName: AutoCheck.Connectors.Postgres.Revoke(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Revoke
    path: ../connectors/Postgres.cs
    startLine: 966
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRevokes an item (role, group or permission) from a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Revoke(string what, string where, string who)
    parameters:
    - id: what
      type: System.String
      description: What to revoke (permission).
    - id: where
      type: System.String
      description: Where to revoke (schema).
    - id: who
      type: System.String
      description: Who to revoke (role, group or user).
    content.vb: Public Sub Revoke(what As String, where As String, who As String)
  overload: AutoCheck.Connectors.Postgres.Revoke*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.Revoke(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.Revoke(System.String,System.String)
  id: Revoke(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: Revoke(String, String)
  nameWithType: Postgres.Revoke(String, String)
  fullName: AutoCheck.Connectors.Postgres.Revoke(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Revoke
    path: ../connectors/Postgres.cs
    startLine: 979
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nRevokes an item (role, group or permissio) from a destination (role, group or user).\n"
  example: []
  syntax:
    content: public void Revoke(string who, string where)
    parameters:
    - id: who
      type: System.String
      description: Who to revoke (role, group or user) or the permission to revoke as an SQL compatible statement like &apos;permission FROM schema.table&apos;.
    - id: where
      type: System.String
      description: 'Where to revoke (destination: role, group or user).'
    content.vb: Public Sub Revoke(who As String, where As String)
  overload: AutoCheck.Connectors.Postgres.Revoke*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetMembership(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetMembership(System.String)
  id: GetMembership(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetMembership(String)
  nameWithType: Postgres.GetMembership(String)
  fullName: AutoCheck.Connectors.Postgres.GetMembership(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetMembership
    path: ../connectors/Postgres.cs
    startLine: 991
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGet a list of groups and roles where the given item (user, role or group) belongs.\n"
  example: []
  syntax:
    content: public DataSet GetMembership(string item)
    parameters:
    - id: item
      type: System.String
      description: The role to check.
    return:
      type: System.Data.DataSet
      description: The requested data (rolname, memberOf)
    content.vb: Public Function GetMembership(item As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetMembership*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetTablePrivileges(AutoCheck.Connectors.Postgres.Source,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetTablePrivileges(AutoCheck.Connectors.Postgres.Source,System.String)
  id: GetTablePrivileges(AutoCheck.Connectors.Postgres.Source,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetTablePrivileges(Postgres.Source, String)
  nameWithType: Postgres.GetTablePrivileges(Postgres.Source, String)
  fullName: AutoCheck.Connectors.Postgres.GetTablePrivileges(AutoCheck.Connectors.Postgres.Source, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetTablePrivileges
    path: ../connectors/Postgres.cs
    startLine: 1002
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the table privileges.\n"
  example: []
  syntax:
    content: public DataSet GetTablePrivileges(Postgres.Source source, string role = null)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The source which permissions will be requested.
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    return:
      type: System.Data.DataSet
      description: The requested data (grantee, privilege).
    content.vb: Public Function GetTablePrivileges(source As Postgres.Source, role As String = Nothing) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetTablePrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String,System.String)
  id: GetTablePrivileges(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetTablePrivileges(String, String)
  nameWithType: Postgres.GetTablePrivileges(String, String)
  fullName: AutoCheck.Connectors.Postgres.GetTablePrivileges(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetTablePrivileges
    path: ../connectors/Postgres.cs
    startLine: 1018
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the table privileges.\n"
  example: []
  syntax:
    content: public DataSet GetTablePrivileges(string source, string role = null)
    parameters:
    - id: source
      type: System.String
      description: The table which permissions will be requested as &apos;schema.table&apos;.
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    return:
      type: System.Data.DataSet
      description: The table privileges.
    content.vb: Public Function GetTablePrivileges(source As String, role As String = Nothing) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetTablePrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String,System.String)
  id: GetSchemaPrivileges(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetSchemaPrivileges(String, String)
  nameWithType: Postgres.GetSchemaPrivileges(String, String)
  fullName: AutoCheck.Connectors.Postgres.GetSchemaPrivileges(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetSchemaPrivileges
    path: ../connectors/Postgres.cs
    startLine: 1028
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the schema privileges.\n"
  example: []
  syntax:
    content: public DataSet GetSchemaPrivileges(string schema, string role = null)
    parameters:
    - id: schema
      type: System.String
      description: The schema containing the table to check.
    - id: role
      type: System.String
      description: The role which privileges will be checked.
    return:
      type: System.Data.DataSet
      description: The requested data (grantee, privilege).
    content.vb: Public Function GetSchemaPrivileges(schema As String, role As String = Nothing) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetSchemaPrivileges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  commentId: M:AutoCheck.Connectors.Postgres.CompareSelects(System.String,System.String)
  id: CompareSelects(System.String,System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: CompareSelects(String, String)
  nameWithType: Postgres.CompareSelects(String, String)
  fullName: AutoCheck.Connectors.Postgres.CompareSelects(System.String, System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: CompareSelects
    path: ../connectors/Postgres.cs
    startLine: 1044
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nCompares two select queries, executing them and comparing the exact amount of rows and its data.\n"
  example: []
  syntax:
    content: public bool CompareSelects(string expected, string compared)
    parameters:
    - id: expected
      type: System.String
      description: The left-side select query.
    - id: compared
      type: System.String
      description: The right-side select query.
    return:
      type: System.Boolean
      description: True if both select queries are equivalent (returns exactly the same rows).
    content.vb: Public Function CompareSelects(expected As String, compared As String) As Boolean
  overload: AutoCheck.Connectors.Postgres.CompareSelects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetViewDefinition(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetViewDefinition(System.String)
  id: GetViewDefinition(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetViewDefinition(String)
  nameWithType: Postgres.GetViewDefinition(String)
  fullName: AutoCheck.Connectors.Postgres.GetViewDefinition(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetViewDefinition
    path: ../connectors/Postgres.cs
    startLine: 1056
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGiven a view, return its definition as a select query.\n"
  example: []
  syntax:
    content: public string GetViewDefinition(string source)
    parameters:
    - id: source
      type: System.String
      description: The unique schema and table from which the data will be loaded, as &apos;schema.table&apos;.
    return:
      type: System.String
      description: The view definition as an SQL SELECT query.
    content.vb: Public Function GetViewDefinition(source As String) As String
  overload: AutoCheck.Connectors.Postgres.GetViewDefinition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetViewDefinition(AutoCheck.Connectors.Postgres.Source)
  commentId: M:AutoCheck.Connectors.Postgres.GetViewDefinition(AutoCheck.Connectors.Postgres.Source)
  id: GetViewDefinition(AutoCheck.Connectors.Postgres.Source)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetViewDefinition(Postgres.Source)
  nameWithType: Postgres.GetViewDefinition(Postgres.Source)
  fullName: AutoCheck.Connectors.Postgres.GetViewDefinition(AutoCheck.Connectors.Postgres.Source)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetViewDefinition
    path: ../connectors/Postgres.cs
    startLine: 1065
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nGiven a view, return its definition as a select query.\n"
  example: []
  syntax:
    content: public string GetViewDefinition(Postgres.Source source)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the data will be loaded.
    return:
      type: System.String
      description: The view definition as an SQL SELECT query.
    content.vb: Public Function GetViewDefinition(source As Postgres.Source) As String
  overload: AutoCheck.Connectors.Postgres.GetViewDefinition*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetForeignKeys(System.String)
  commentId: M:AutoCheck.Connectors.Postgres.GetForeignKeys(System.String)
  id: GetForeignKeys(System.String)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetForeignKeys(String)
  nameWithType: Postgres.GetForeignKeys(String)
  fullName: AutoCheck.Connectors.Postgres.GetForeignKeys(System.String)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetForeignKeys
    path: ../connectors/Postgres.cs
    startLine: 1077
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the information about all the foreign keys defined over a table.\n"
  example: []
  syntax:
    content: public DataSet GetForeignKeys(string source)
    parameters:
    - id: source
      type: System.String
      description: The unique schema and table from which the foreign keys will be loaded, as &apos;schema.table&apos;.
    return:
      type: System.Data.DataSet
      description: The foreign keys data.
    content.vb: Public Function GetForeignKeys(source As String) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetForeignKeys*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Connectors.Postgres.GetForeignKeys(AutoCheck.Connectors.Postgres.Source)
  commentId: M:AutoCheck.Connectors.Postgres.GetForeignKeys(AutoCheck.Connectors.Postgres.Source)
  id: GetForeignKeys(AutoCheck.Connectors.Postgres.Source)
  parent: AutoCheck.Connectors.Postgres
  langs:
  - csharp
  - vb
  name: GetForeignKeys(Postgres.Source)
  nameWithType: Postgres.GetForeignKeys(Postgres.Source)
  fullName: AutoCheck.Connectors.Postgres.GetForeignKeys(AutoCheck.Connectors.Postgres.Source)
  type: Method
  source:
    remote:
      path: connectors/Postgres.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetForeignKeys
    path: ../connectors/Postgres.cs
    startLine: 1086
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Connectors
  summary: "\nReturns the information about all the foreign keys defined over a table.\n"
  example: []
  syntax:
    content: public DataSet GetForeignKeys(Postgres.Source source)
    parameters:
    - id: source
      type: AutoCheck.Connectors.Postgres.Source
      description: The unique schema and table from which the foreign keys will be loaded.
    return:
      type: System.Data.DataSet
      description: The view definition as an SQL SELECT query.
    content.vb: Public Function GetForeignKeys(source As Postgres.Source) As DataSet
  overload: AutoCheck.Connectors.Postgres.GetForeignKeys*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Connectors
  commentId: N:AutoCheck.Connectors
  name: AutoCheck.Connectors
  nameWithType: AutoCheck.Connectors
  fullName: AutoCheck.Connectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connector
  commentId: T:AutoCheck.Core.Connector
  parent: AutoCheck.Core
  name: Connector
  nameWithType: Connector
  fullName: AutoCheck.Core.Connector
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: AutoCheck.Core.Connector.CurrentOS
  commentId: P:AutoCheck.Core.Connector.CurrentOS
  parent: AutoCheck.Core.Connector
  name: CurrentOS
  nameWithType: Connector.CurrentOS
  fullName: AutoCheck.Core.Connector.CurrentOS
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: AutoCheck.Connectors.Postgres.Conn*
  commentId: Overload:AutoCheck.Connectors.Postgres.Conn
  name: Conn
  nameWithType: Postgres.Conn
  fullName: AutoCheck.Connectors.Postgres.Conn
- uid: Npgsql.NpgsqlConnection
  commentId: T:Npgsql.NpgsqlConnection
  parent: Npgsql
  isExternal: true
  name: NpgsqlConnection
  nameWithType: NpgsqlConnection
  fullName: Npgsql.NpgsqlConnection
- uid: Npgsql
  commentId: N:Npgsql
  isExternal: true
  name: Npgsql
  nameWithType: Npgsql
  fullName: Npgsql
- uid: AutoCheck.Connectors.Postgres.Host*
  commentId: Overload:AutoCheck.Connectors.Postgres.Host
  name: Host
  nameWithType: Postgres.Host
  fullName: AutoCheck.Connectors.Postgres.Host
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Connectors.Postgres.Database*
  commentId: Overload:AutoCheck.Connectors.Postgres.Database
  name: Database
  nameWithType: Postgres.Database
  fullName: AutoCheck.Connectors.Postgres.Database
- uid: AutoCheck.Connectors.Postgres.User*
  commentId: Overload:AutoCheck.Connectors.Postgres.User
  name: User
  nameWithType: Postgres.User
  fullName: AutoCheck.Connectors.Postgres.User
- uid: AutoCheck.Connectors.Postgres.Password*
  commentId: Overload:AutoCheck.Connectors.Postgres.Password
  name: Password
  nameWithType: Postgres.Password
  fullName: AutoCheck.Connectors.Postgres.Password
- uid: AutoCheck.Connectors.Postgres.BinPath*
  commentId: Overload:AutoCheck.Connectors.Postgres.BinPath
  name: BinPath
  nameWithType: Postgres.BinPath
  fullName: AutoCheck.Connectors.Postgres.BinPath
- uid: AutoCheck.Connectors.Postgres.Student*
  commentId: Overload:AutoCheck.Connectors.Postgres.Student
  name: Student
  nameWithType: Postgres.Student
  fullName: AutoCheck.Connectors.Postgres.Student
- uid: AutoCheck.Connectors.Postgres.#ctor*
  commentId: Overload:AutoCheck.Connectors.Postgres.#ctor
  name: Postgres
  nameWithType: Postgres.Postgres
  fullName: AutoCheck.Connectors.Postgres.Postgres
- uid: AutoCheck.Core.Connector.Dispose
  commentId: M:AutoCheck.Core.Connector.Dispose
  parent: AutoCheck.Core.Connector
  name: Dispose()
  nameWithType: Connector.Dispose()
  fullName: AutoCheck.Core.Connector.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Connector.Dispose
    name: Dispose
    nameWithType: Connector.Dispose
    fullName: AutoCheck.Core.Connector.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connector.Dispose
    name: Dispose
    nameWithType: Connector.Dispose
    fullName: AutoCheck.Core.Connector.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Connectors.Postgres.Dispose*
  commentId: Overload:AutoCheck.Connectors.Postgres.Dispose
  name: Dispose
  nameWithType: Postgres.Dispose
  fullName: AutoCheck.Connectors.Postgres.Dispose
- uid: AutoCheck.Connectors.Postgres.TestConnection*
  commentId: Overload:AutoCheck.Connectors.Postgres.TestConnection
  name: TestConnection
  nameWithType: Postgres.TestConnection
  fullName: AutoCheck.Connectors.Postgres.TestConnection
- uid: AutoCheck.Connectors.Postgres.ExecuteQuery*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteQuery
  name: ExecuteQuery
  nameWithType: Postgres.ExecuteQuery
  fullName: AutoCheck.Connectors.Postgres.ExecuteQuery
- uid: System.Data.DataSet
  commentId: T:System.Data.DataSet
  parent: System.Data
  isExternal: true
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: AutoCheck.Connectors.Postgres.ExecuteNonQuery*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteNonQuery
  name: ExecuteNonQuery
  nameWithType: Postgres.ExecuteNonQuery
  fullName: AutoCheck.Connectors.Postgres.ExecuteNonQuery
- uid: AutoCheck.Connectors.Postgres.ExecuteScalar*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExecuteScalar
  name: ExecuteScalar
  nameWithType: Postgres.ExecuteScalar
  fullName: AutoCheck.Connectors.Postgres.ExecuteScalar
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: AutoCheck.Connectors.Postgres.ExistsDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.ExistsDataBase
  name: ExistsDataBase
  nameWithType: Postgres.ExistsDataBase
  fullName: AutoCheck.Connectors.Postgres.ExistsDataBase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Connectors.Postgres.CreateDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.CreateDataBase
  name: CreateDataBase
  nameWithType: Postgres.CreateDataBase
  fullName: AutoCheck.Connectors.Postgres.CreateDataBase
- uid: AutoCheck.Connectors.Postgres.ImportSqlFile*
  commentId: Overload:AutoCheck.Connectors.Postgres.ImportSqlFile
  name: ImportSqlFile
  nameWithType: Postgres.ImportSqlFile
  fullName: AutoCheck.Connectors.Postgres.ImportSqlFile
- uid: AutoCheck.Connectors.Postgres.DropDataBase*
  commentId: Overload:AutoCheck.Connectors.Postgres.DropDataBase
  name: DropDataBase
  nameWithType: Postgres.DropDataBase
  fullName: AutoCheck.Connectors.Postgres.DropDataBase
- uid: AutoCheck.Connectors.Postgres.Select*
  commentId: Overload:AutoCheck.Connectors.Postgres.Select
  name: Select
  nameWithType: Postgres.Select
  fullName: AutoCheck.Connectors.Postgres.Select
- uid: AutoCheck.Connectors.Postgres.Source
  commentId: T:AutoCheck.Connectors.Postgres.Source
  parent: AutoCheck.Connectors
  name: Postgres.Source
  nameWithType: Postgres.Source
  fullName: AutoCheck.Connectors.Postgres.Source
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Connectors.Postgres.Filter
  commentId: T:AutoCheck.Connectors.Postgres.Filter
  parent: AutoCheck.Connectors
  name: Postgres.Filter
  nameWithType: Postgres.Filter
  fullName: AutoCheck.Connectors.Postgres.Filter
- uid: AutoCheck.Connectors.Postgres.GetField*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetField
  name: GetField
  nameWithType: Postgres.GetField
  fullName: AutoCheck.Connectors.Postgres.GetField
- uid: System.ComponentModel.ListSortDirection
  commentId: T:System.ComponentModel.ListSortDirection
  parent: System.ComponentModel
  isExternal: true
  name: ListSortDirection
  nameWithType: ListSortDirection
  fullName: System.ComponentModel.ListSortDirection
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: AutoCheck.Connectors.Postgres.CountRegisters*
  commentId: Overload:AutoCheck.Connectors.Postgres.CountRegisters
  name: CountRegisters
  nameWithType: Postgres.CountRegisters
  fullName: AutoCheck.Connectors.Postgres.CountRegisters
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: AutoCheck.Connectors.Postgres.Insert*
  commentId: Overload:AutoCheck.Connectors.Postgres.Insert
  name: Insert
  nameWithType: Postgres.Insert
  fullName: AutoCheck.Connectors.Postgres.Insert
- uid: AutoCheck.Connectors.Postgres.Destination
  commentId: T:AutoCheck.Connectors.Postgres.Destination
  parent: AutoCheck.Connectors
  name: Postgres.Destination
  nameWithType: Postgres.Destination
  fullName: AutoCheck.Connectors.Postgres.Destination
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutoCheck.Connectors.Postgres.Update*
  commentId: Overload:AutoCheck.Connectors.Postgres.Update
  name: Update
  nameWithType: Postgres.Update
  fullName: AutoCheck.Connectors.Postgres.Update
- uid: AutoCheck.Connectors.Postgres.Delete*
  commentId: Overload:AutoCheck.Connectors.Postgres.Delete
  name: Delete
  nameWithType: Postgres.Delete
  fullName: AutoCheck.Connectors.Postgres.Delete
- uid: AutoCheck.Connectors.Postgres.GetUsers*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetUsers
  name: GetUsers
  nameWithType: Postgres.GetUsers
  fullName: AutoCheck.Connectors.Postgres.GetUsers
- uid: AutoCheck.Connectors.Postgres.CountUsers*
  commentId: Overload:AutoCheck.Connectors.Postgres.CountUsers
  name: CountUsers
  nameWithType: Postgres.CountUsers
  fullName: AutoCheck.Connectors.Postgres.CountUsers
- uid: AutoCheck.Connectors.Postgres.CreateUser*
  commentId: Overload:AutoCheck.Connectors.Postgres.CreateUser
  name: CreateUser
  nameWithType: Postgres.CreateUser
  fullName: AutoCheck.Connectors.Postgres.CreateUser
- uid: AutoCheck.Connectors.Postgres.DropUser*
  commentId: Overload:AutoCheck.Connectors.Postgres.DropUser
  name: DropUser
  nameWithType: Postgres.DropUser
  fullName: AutoCheck.Connectors.Postgres.DropUser
- uid: AutoCheck.Connectors.Postgres.GetRoles*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetRoles
  name: GetRoles
  nameWithType: Postgres.GetRoles
  fullName: AutoCheck.Connectors.Postgres.GetRoles
- uid: AutoCheck.Connectors.Postgres.CountRoles*
  commentId: Overload:AutoCheck.Connectors.Postgres.CountRoles
  name: CountRoles
  nameWithType: Postgres.CountRoles
  fullName: AutoCheck.Connectors.Postgres.CountRoles
- uid: AutoCheck.Connectors.Postgres.CreateRole*
  commentId: Overload:AutoCheck.Connectors.Postgres.CreateRole
  name: CreateRole
  nameWithType: Postgres.CreateRole
  fullName: AutoCheck.Connectors.Postgres.CreateRole
- uid: AutoCheck.Connectors.Postgres.DropRole*
  commentId: Overload:AutoCheck.Connectors.Postgres.DropRole
  name: DropRole
  nameWithType: Postgres.DropRole
  fullName: AutoCheck.Connectors.Postgres.DropRole
- uid: AutoCheck.Connectors.Postgres.Grant*
  commentId: Overload:AutoCheck.Connectors.Postgres.Grant
  name: Grant
  nameWithType: Postgres.Grant
  fullName: AutoCheck.Connectors.Postgres.Grant
- uid: AutoCheck.Connectors.Postgres.Revoke*
  commentId: Overload:AutoCheck.Connectors.Postgres.Revoke
  name: Revoke
  nameWithType: Postgres.Revoke
  fullName: AutoCheck.Connectors.Postgres.Revoke
- uid: AutoCheck.Connectors.Postgres.GetMembership*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetMembership
  name: GetMembership
  nameWithType: Postgres.GetMembership
  fullName: AutoCheck.Connectors.Postgres.GetMembership
- uid: AutoCheck.Connectors.Postgres.GetTablePrivileges*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetTablePrivileges
  name: GetTablePrivileges
  nameWithType: Postgres.GetTablePrivileges
  fullName: AutoCheck.Connectors.Postgres.GetTablePrivileges
- uid: AutoCheck.Connectors.Postgres.GetSchemaPrivileges*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetSchemaPrivileges
  name: GetSchemaPrivileges
  nameWithType: Postgres.GetSchemaPrivileges
  fullName: AutoCheck.Connectors.Postgres.GetSchemaPrivileges
- uid: AutoCheck.Connectors.Postgres.CompareSelects*
  commentId: Overload:AutoCheck.Connectors.Postgres.CompareSelects
  name: CompareSelects
  nameWithType: Postgres.CompareSelects
  fullName: AutoCheck.Connectors.Postgres.CompareSelects
- uid: AutoCheck.Connectors.Postgres.GetViewDefinition*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetViewDefinition
  name: GetViewDefinition
  nameWithType: Postgres.GetViewDefinition
  fullName: AutoCheck.Connectors.Postgres.GetViewDefinition
- uid: AutoCheck.Connectors.Postgres.GetForeignKeys*
  commentId: Overload:AutoCheck.Connectors.Postgres.GetForeignKeys
  name: GetForeignKeys
  nameWithType: Postgres.GetForeignKeys
  fullName: AutoCheck.Connectors.Postgres.GetForeignKeys
