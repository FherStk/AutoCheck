### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Script`1
  commentId: T:AutoCheck.Core.Script`1
  id: Script`1
  parent: AutoCheck.Core
  children:
  - AutoCheck.Core.Script`1.#ctor(System.String[])
  - AutoCheck.Core.Script`1.Batch
  - AutoCheck.Core.Script`1.CancelQuestion
  - AutoCheck.Core.Script`1.Clean
  - AutoCheck.Core.Script`1.CloseQuestion(System.String)
  - AutoCheck.Core.Script`1.CpThresh
  - AutoCheck.Core.Script`1.DefaultArguments
  - AutoCheck.Core.Script`1.EvalQuestion
  - AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  - AutoCheck.Core.Script`1.IsQuestionOpen
  - AutoCheck.Core.Script`1.MaxScore
  - AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  - AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  - AutoCheck.Core.Script`1.Path
  - AutoCheck.Core.Script`1.PrintScore
  - AutoCheck.Core.Script`1.Run
  - AutoCheck.Core.Script`1.Score
  langs:
  - csharp
  - vb
  name: Script<T>
  nameWithType: Script<T>
  fullName: AutoCheck.Core.Script<T>
  type: Class
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Script
    path: ../core/Script.cs
    startLine: 32
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThis class must be inherited in order to develop a generic custom script.\nThe script is the main container for a set of instructions, which will test the correctness of an assignement.\n"
  example: []
  syntax:
    content: >-
      public abstract class Script<T>
          where T : CopyDetector, new()
    typeParameters:
    - id: T
      description: The copy detector that will be automatically used within the script.
    content.vb: Public MustInherit Class Script(Of T As {CopyDetector, New})
  inheritance:
  - System.Object
  derivedClasses:
  - AutoCheck.Core.ScriptDB`1
  - AutoCheck.Core.ScriptFiles`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Script(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: AutoCheck.Core.Script(Of T)
  name.vb: Script(Of T)
- uid: AutoCheck.Core.Script`1.Path
  commentId: P:AutoCheck.Core.Script`1.Path
  id: Path
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: Script<T>.Path
  fullName: AutoCheck.Core.Script<T>.Path
  type: Property
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Path
    path: ../core/Script.cs
    startLine: 37
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nCurrent path being used within an execution, automatically updated and mantained.\n"
  example: []
  syntax:
    content: protected string Path { get; set; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Protected Property Path As String
  overload: AutoCheck.Core.Script`1.Path*
  nameWithType.vb: Script(Of T).Path
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).Path
- uid: AutoCheck.Core.Script`1.CpThresh
  commentId: P:AutoCheck.Core.Script`1.CpThresh
  id: CpThresh
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: CpThresh
  nameWithType: Script<T>.CpThresh
  fullName: AutoCheck.Core.Script<T>.CpThresh
  type: Property
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CpThresh
    path: ../core/Script.cs
    startLine: 43
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThe copy thresshold value, a copy will be detected if its matching value is equal or higher to this one.\nIt must be set up on DefaultArguments().\n"
  example: []
  syntax:
    content: protected float CpThresh { get; set; }
    parameters: []
    return:
      type: System.Single
      description: ''
    content.vb: Protected Property CpThresh As Single
  overload: AutoCheck.Core.Script`1.CpThresh*
  nameWithType.vb: Script(Of T).CpThresh
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).CpThresh
- uid: AutoCheck.Core.Script`1.MaxScore
  commentId: P:AutoCheck.Core.Script`1.MaxScore
  id: MaxScore
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: MaxScore
  nameWithType: Script<T>.MaxScore
  fullName: AutoCheck.Core.Script<T>.MaxScore
  type: Property
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: MaxScore
    path: ../core/Script.cs
    startLine: 52
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nMaximum score possible\n"
  example: []
  syntax:
    content: protected float MaxScore { get; set; }
    parameters: []
    return:
      type: System.Single
      description: ''
    content.vb: Protected Property MaxScore As Single
  overload: AutoCheck.Core.Script`1.MaxScore*
  nameWithType.vb: Script(Of T).MaxScore
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).MaxScore
- uid: AutoCheck.Core.Script`1.Score
  commentId: P:AutoCheck.Core.Script`1.Score
  id: Score
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Score
  nameWithType: Script<T>.Score
  fullName: AutoCheck.Core.Script<T>.Score
  type: Property
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Score
    path: ../core/Script.cs
    startLine: 57
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThe accumulated score (over 10 points), which will be updated on each CloseQuestion() call.\n"
  example: []
  syntax:
    content: public float Score { get; }
    parameters: []
    return:
      type: System.Single
      description: ''
    content.vb: Public ReadOnly Property Score As Single
  overload: AutoCheck.Core.Script`1.Score*
  nameWithType.vb: Script(Of T).Score
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: AutoCheck.Core.Script(Of T).Score
- uid: AutoCheck.Core.Script`1.IsQuestionOpen
  commentId: P:AutoCheck.Core.Script`1.IsQuestionOpen
  id: IsQuestionOpen
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: IsQuestionOpen
  nameWithType: Script<T>.IsQuestionOpen
  fullName: AutoCheck.Core.Script<T>.IsQuestionOpen
  type: Property
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: IsQuestionOpen
    path: ../core/Script.cs
    startLine: 62
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nReturns if there&apos;s an open question in progress.\n"
  example: []
  syntax:
    content: public bool IsQuestionOpen { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property IsQuestionOpen As Boolean
  overload: AutoCheck.Core.Script`1.IsQuestionOpen*
  nameWithType.vb: Script(Of T).IsQuestionOpen
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: AutoCheck.Core.Script(Of T).IsQuestionOpen
- uid: AutoCheck.Core.Script`1.#ctor(System.String[])
  commentId: M:AutoCheck.Core.Script`1.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Script(String[])
  nameWithType: Script<T>.Script(String[])
  fullName: AutoCheck.Core.Script<T>.Script(System.String[])
  type: Constructor
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/Script.cs
    startLine: 71
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nCreates a new script instance.\n"
  example: []
  syntax:
    content: public Script(string[] args)
    parameters:
    - id: args
      type: System.String[]
      description: Argument list, loaded from the command line, on which one will be stored into its equivalent local property.
    content.vb: Public Sub New(args As String())
  overload: AutoCheck.Core.Script`1.#ctor*
  nameWithType.vb: Script(Of T).Script(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Script(Of T).Script(System.String())
  name.vb: Script(String())
- uid: AutoCheck.Core.Script`1.DefaultArguments
  commentId: M:AutoCheck.Core.Script`1.DefaultArguments
  id: DefaultArguments
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: DefaultArguments()
  nameWithType: Script<T>.DefaultArguments()
  fullName: AutoCheck.Core.Script<T>.DefaultArguments()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: DefaultArguments
    path: ../core/Script.cs
    startLine: 78
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nSets up the default arguments values, can be overwrited if custom arguments are needed.\n"
  example: []
  syntax:
    content: protected virtual void DefaultArguments()
    content.vb: Protected Overridable Sub DefaultArguments
  overload: AutoCheck.Core.Script`1.DefaultArguments*
  nameWithType.vb: Script(Of T).DefaultArguments()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: AutoCheck.Core.Script(Of T).DefaultArguments()
- uid: AutoCheck.Core.Script`1.Batch
  commentId: M:AutoCheck.Core.Script`1.Batch
  id: Batch
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Batch()
  nameWithType: Script<T>.Batch()
  fullName: AutoCheck.Core.Script<T>.Batch()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Batch
    path: ../core/Script.cs
    startLine: 106
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThis method will loop through a set of students assignments, running the script for all of them.\nAll the assignments will be unziped, loaded into the local copy detector, and all the data from previos executions will be restored prior the script execution.\nIf a potential copy is detected, the script execution will be skipped.\n"
  example: []
  syntax:
    content: public virtual void Batch()
    content.vb: Public Overridable Sub Batch
  overload: AutoCheck.Core.Script`1.Batch*
  nameWithType.vb: Script(Of T).Batch()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: AutoCheck.Core.Script(Of T).Batch()
- uid: AutoCheck.Core.Script`1.Run
  commentId: M:AutoCheck.Core.Script`1.Run
  id: Run
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: Script<T>.Run()
  fullName: AutoCheck.Core.Script<T>.Run()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Run
    path: ../core/Script.cs
    startLine: 159
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThis method contains the main script to run for a single student.\n"
  example: []
  syntax:
    content: public virtual void Run()
    content.vb: Public Overridable Sub Run
  overload: AutoCheck.Core.Script`1.Run*
  nameWithType.vb: Script(Of T).Run()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: AutoCheck.Core.Script(Of T).Run()
- uid: AutoCheck.Core.Script`1.Clean
  commentId: M:AutoCheck.Core.Script`1.Clean
  id: Clean
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: Clean()
  nameWithType: Script<T>.Clean()
  fullName: AutoCheck.Core.Script<T>.Clean()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: Clean
    path: ../core/Script.cs
    startLine: 167
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThis method can be used in order to clean data before running a script for a single student.\nIt will be automatically invoked if needed, so forced calls should be avoided.\n"
  example: []
  syntax:
    content: protected virtual void Clean()
    content.vb: Protected Overridable Sub Clean
  overload: AutoCheck.Core.Script`1.Clean*
  nameWithType.vb: Script(Of T).Clean()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: AutoCheck.Core.Script(Of T).Clean()
- uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  commentId: M:AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  id: OpenQuestion(System.String,System.Single)
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: OpenQuestion(String, Single)
  nameWithType: Script<T>.OpenQuestion(String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.Single)
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: OpenQuestion
    path: ../core/Script.cs
    startLine: 181
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nOpens a new question, so all the computed score within &quot;EvalQuestion&quot; method will belong to this one.\nWarning: It will cancell any previous question if it&apos;s open, so its computed score will be lost.\n"
  example: []
  syntax:
    content: protected void OpenQuestion(string caption, float score = 0F)
    parameters:
    - id: caption
      type: System.String
      description: The question caption to display.
    - id: score
      type: System.Single
      description: The current question score, no errors must be found when evaluating in order to compute.
    content.vb: Protected Sub OpenQuestion(caption As String, score As Single = 0F)
  overload: AutoCheck.Core.Script`1.OpenQuestion*
  nameWithType.vb: Script(Of T).OpenQuestion(String, Single)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.Single)
- uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  commentId: M:AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  id: OpenQuestion(System.String,System.String,System.Single)
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: OpenQuestion(String, String, Single)
  nameWithType: Script<T>.OpenQuestion(String, String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.String, System.Single)
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: OpenQuestion
    path: ../core/Script.cs
    startLine: 191
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nOpens a new question, so all the computed score within &quot;EvalQuestion&quot; method will belong to this one.\nWarning: It will cancell any previous question if it&apos;s open, so its computed score will be lost.\n"
  example: []
  syntax:
    content: protected void OpenQuestion(string caption, string description, float score = 0F)
    parameters:
    - id: caption
      type: System.String
      description: The question caption to display.
    - id: description
      type: System.String
      description: The question description to display.
    - id: score
      type: System.Single
      description: The current question score, no errors must be found when evaluating in order to compute.
    content.vb: Protected Sub OpenQuestion(caption As String, description As String, score As Single = 0F)
  overload: AutoCheck.Core.Script`1.OpenQuestion*
  nameWithType.vb: Script(Of T).OpenQuestion(String, String, Single)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.String, System.Single)
- uid: AutoCheck.Core.Script`1.CancelQuestion
  commentId: M:AutoCheck.Core.Script`1.CancelQuestion
  id: CancelQuestion
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: CancelQuestion()
  nameWithType: Script<T>.CancelQuestion()
  fullName: AutoCheck.Core.Script<T>.CancelQuestion()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CancelQuestion
    path: ../core/Script.cs
    startLine: 208
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nCancels the current question, so no score will be computed.\n"
  example: []
  syntax:
    content: protected void CancelQuestion()
    content.vb: Protected Sub CancelQuestion
  overload: AutoCheck.Core.Script`1.CancelQuestion*
  nameWithType.vb: Script(Of T).CancelQuestion()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).CancelQuestion()
- uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
  commentId: M:AutoCheck.Core.Script`1.CloseQuestion(System.String)
  id: CloseQuestion(System.String)
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: CloseQuestion(String)
  nameWithType: Script<T>.CloseQuestion(String)
  fullName: AutoCheck.Core.Script<T>.CloseQuestion(System.String)
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: CloseQuestion
    path: ../core/Script.cs
    startLine: 215
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nCloses the currently open question and computes the score, which has been setup when opening the question.\n"
  example: []
  syntax:
    content: protected void CloseQuestion(string caption = null)
    parameters:
    - id: caption
      type: System.String
      description: The closing caption to display.
    content.vb: Protected Sub CloseQuestion(caption As String = Nothing)
  overload: AutoCheck.Core.Script`1.CloseQuestion*
  nameWithType.vb: Script(Of T).CloseQuestion(String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).CloseQuestion(System.String)
- uid: AutoCheck.Core.Script`1.EvalQuestion
  commentId: M:AutoCheck.Core.Script`1.EvalQuestion
  id: EvalQuestion
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: EvalQuestion()
  nameWithType: Script<T>.EvalQuestion()
  fullName: AutoCheck.Core.Script<T>.EvalQuestion()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: EvalQuestion
    path: ../core/Script.cs
    startLine: 234
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nAdds a correct execution result (usually a checker&apos;s method one) for the current opened question, so its value will be computed once the question is closed.\n"
  example: []
  syntax:
    content: protected void EvalQuestion()
    content.vb: Protected Sub EvalQuestion
  overload: AutoCheck.Core.Script`1.EvalQuestion*
  nameWithType.vb: Script(Of T).EvalQuestion()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion()
- uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  commentId: M:AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  id: EvalQuestion(System.Collections.Generic.List{System.String})
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: EvalQuestion(List<String>)
  nameWithType: Script<T>.EvalQuestion(List<String>)
  fullName: AutoCheck.Core.Script<T>.EvalQuestion(System.Collections.Generic.List<System.String>)
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: EvalQuestion
    path: ../core/Script.cs
    startLine: 241
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nAdds an execution result (usually a checker&apos;s method one) for the current opened question, so its value will be computed once the question is closed.\n"
  example: []
  syntax:
    content: protected void EvalQuestion(List<string> errors)
    parameters:
    - id: errors
      type: System.Collections.Generic.List{System.String}
      description: A list of errors, an empty one will be considered as correct, otherwise it will be considered as a incorrect.
    content.vb: Protected Sub EvalQuestion(errors As List(Of String))
  overload: AutoCheck.Core.Script`1.EvalQuestion*
  nameWithType.vb: Script(Of T).EvalQuestion(List(Of String))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion(System.Collections.Generic.List(Of System.String))
  name.vb: EvalQuestion(List(Of String))
- uid: AutoCheck.Core.Script`1.PrintScore
  commentId: M:AutoCheck.Core.Script`1.PrintScore
  id: PrintScore
  parent: AutoCheck.Core.Script`1
  langs:
  - csharp
  - vb
  name: PrintScore()
  nameWithType: Script<T>.PrintScore()
  fullName: AutoCheck.Core.Script<T>.PrintScore()
  type: Method
  source:
    remote:
      path: core/Script.cs
      branch: bash
      repo: https://github.com/FherStk/AutoCheck.git
    id: PrintScore
    path: ../core/Script.cs
    startLine: 250
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nPrints the score to the output.\n"
  example: []
  syntax:
    content: protected void PrintScore()
    content.vb: Protected Sub PrintScore
  overload: AutoCheck.Core.Script`1.PrintScore*
  nameWithType.vb: Script(Of T).PrintScore()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.Script(Of T).PrintScore()
references:
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core.Script`1.Path*
  commentId: Overload:AutoCheck.Core.Script`1.Path
  name: Path
  nameWithType: Script<T>.Path
  fullName: AutoCheck.Core.Script<T>.Path
  nameWithType.vb: Script(Of T).Path
  fullName.vb: AutoCheck.Core.Script(Of T).Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Script`1.CpThresh*
  commentId: Overload:AutoCheck.Core.Script`1.CpThresh
  name: CpThresh
  nameWithType: Script<T>.CpThresh
  fullName: AutoCheck.Core.Script<T>.CpThresh
  nameWithType.vb: Script(Of T).CpThresh
  fullName.vb: AutoCheck.Core.Script(Of T).CpThresh
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: AutoCheck.Core.Script`1.MaxScore*
  commentId: Overload:AutoCheck.Core.Script`1.MaxScore
  name: MaxScore
  nameWithType: Script<T>.MaxScore
  fullName: AutoCheck.Core.Script<T>.MaxScore
  nameWithType.vb: Script(Of T).MaxScore
  fullName.vb: AutoCheck.Core.Script(Of T).MaxScore
- uid: AutoCheck.Core.Script`1.Score*
  commentId: Overload:AutoCheck.Core.Script`1.Score
  name: Score
  nameWithType: Script<T>.Score
  fullName: AutoCheck.Core.Script<T>.Score
  nameWithType.vb: Script(Of T).Score
  fullName.vb: AutoCheck.Core.Script(Of T).Score
- uid: AutoCheck.Core.Script`1.IsQuestionOpen*
  commentId: Overload:AutoCheck.Core.Script`1.IsQuestionOpen
  name: IsQuestionOpen
  nameWithType: Script<T>.IsQuestionOpen
  fullName: AutoCheck.Core.Script<T>.IsQuestionOpen
  nameWithType.vb: Script(Of T).IsQuestionOpen
  fullName.vb: AutoCheck.Core.Script(Of T).IsQuestionOpen
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Core.Script`1.#ctor*
  commentId: Overload:AutoCheck.Core.Script`1.#ctor
  name: Script
  nameWithType: Script<T>.Script
  fullName: AutoCheck.Core.Script<T>.Script
  nameWithType.vb: Script(Of T).Script
  fullName.vb: AutoCheck.Core.Script(Of T).Script
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.Script`1.DefaultArguments*
  commentId: Overload:AutoCheck.Core.Script`1.DefaultArguments
  name: DefaultArguments
  nameWithType: Script<T>.DefaultArguments
  fullName: AutoCheck.Core.Script<T>.DefaultArguments
  nameWithType.vb: Script(Of T).DefaultArguments
  fullName.vb: AutoCheck.Core.Script(Of T).DefaultArguments
- uid: AutoCheck.Core.Script`1.Batch*
  commentId: Overload:AutoCheck.Core.Script`1.Batch
  name: Batch
  nameWithType: Script<T>.Batch
  fullName: AutoCheck.Core.Script<T>.Batch
  nameWithType.vb: Script(Of T).Batch
  fullName.vb: AutoCheck.Core.Script(Of T).Batch
- uid: AutoCheck.Core.Script`1.Run*
  commentId: Overload:AutoCheck.Core.Script`1.Run
  name: Run
  nameWithType: Script<T>.Run
  fullName: AutoCheck.Core.Script<T>.Run
  nameWithType.vb: Script(Of T).Run
  fullName.vb: AutoCheck.Core.Script(Of T).Run
- uid: AutoCheck.Core.Script`1.Clean*
  commentId: Overload:AutoCheck.Core.Script`1.Clean
  name: Clean
  nameWithType: Script<T>.Clean
  fullName: AutoCheck.Core.Script<T>.Clean
  nameWithType.vb: Script(Of T).Clean
  fullName.vb: AutoCheck.Core.Script(Of T).Clean
- uid: AutoCheck.Core.Script`1.OpenQuestion*
  commentId: Overload:AutoCheck.Core.Script`1.OpenQuestion
  name: OpenQuestion
  nameWithType: Script<T>.OpenQuestion
  fullName: AutoCheck.Core.Script<T>.OpenQuestion
  nameWithType.vb: Script(Of T).OpenQuestion
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion
- uid: AutoCheck.Core.Script`1.CancelQuestion*
  commentId: Overload:AutoCheck.Core.Script`1.CancelQuestion
  name: CancelQuestion
  nameWithType: Script<T>.CancelQuestion
  fullName: AutoCheck.Core.Script<T>.CancelQuestion
  nameWithType.vb: Script(Of T).CancelQuestion
  fullName.vb: AutoCheck.Core.Script(Of T).CancelQuestion
- uid: AutoCheck.Core.Script`1.CloseQuestion*
  commentId: Overload:AutoCheck.Core.Script`1.CloseQuestion
  name: CloseQuestion
  nameWithType: Script<T>.CloseQuestion
  fullName: AutoCheck.Core.Script<T>.CloseQuestion
  nameWithType.vb: Script(Of T).CloseQuestion
  fullName.vb: AutoCheck.Core.Script(Of T).CloseQuestion
- uid: AutoCheck.Core.Script`1.EvalQuestion*
  commentId: Overload:AutoCheck.Core.Script`1.EvalQuestion
  name: EvalQuestion
  nameWithType: Script<T>.EvalQuestion
  fullName: AutoCheck.Core.Script<T>.EvalQuestion
  nameWithType.vb: Script(Of T).EvalQuestion
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutoCheck.Core.Script`1.PrintScore*
  commentId: Overload:AutoCheck.Core.Script`1.PrintScore
  name: PrintScore
  nameWithType: Script<T>.PrintScore
  fullName: AutoCheck.Core.Script<T>.PrintScore
  nameWithType.vb: Script(Of T).PrintScore
  fullName.vb: AutoCheck.Core.Script(Of T).PrintScore
