### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.ScriptGDrive`1
  commentId: T:AutoCheck.Core.ScriptGDrive`1
  id: ScriptGDrive`1
  parent: AutoCheck.Core
  children:
  - AutoCheck.Core.ScriptGDrive`1.#ctor(System.String[])
  - AutoCheck.Core.ScriptGDrive`1.DefaultArguments
  - AutoCheck.Core.ScriptGDrive`1.GDriveFolder
  - AutoCheck.Core.ScriptGDrive`1.Secret
  - AutoCheck.Core.ScriptGDrive`1.SetUp
  - AutoCheck.Core.ScriptGDrive`1.Username
  langs:
  - csharp
  - vb
  name: ScriptGDrive<T>
  nameWithType: ScriptGDrive<T>
  fullName: AutoCheck.Core.ScriptGDrive<T>
  type: Class
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: ScriptGDrive
    path: ../core/ScriptGDrive.cs
    startLine: 30
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThis class must be inherited in order to develop a database oriented custom script.\nThe script is the main container for a set of instructions, which will test the correctness of an assignement.\n"
  example: []
  syntax:
    content: 'public abstract class ScriptGDrive<T> : ScriptFiles<T> where T : CopyDetector, new()'
    typeParameters:
    - id: T
      description: The copy detector that will be automatically used within the script.
    content.vb: >-
      Public MustInherit Class ScriptGDrive(Of T As {CopyDetector, New})
          Inherits ScriptFiles(Of T)
  inheritance:
  - System.Object
  - AutoCheck.Core.Script{{T}}
  - AutoCheck.Core.ScriptFiles{{T}}
  derivedClasses:
  - AutoCheck.Scripts.GENERIC_GoogleDriveImporter
  inheritedMembers:
  - AutoCheck.Core.ScriptFiles{{T}}.Student
  - AutoCheck.Core.ScriptFiles{{T}}.Run
  - AutoCheck.Core.Script{{T}}.Path
  - AutoCheck.Core.Script{{T}}.CpThresh
  - AutoCheck.Core.Script{{T}}.MaxScore
  - AutoCheck.Core.Script{{T}}.Score
  - AutoCheck.Core.Script{{T}}.IsQuestionOpen
  - AutoCheck.Core.Script{{T}}.Batch
  - AutoCheck.Core.Script{{T}}.OpenQuestion(System.String,System.Single)
  - AutoCheck.Core.Script{{T}}.OpenQuestion(System.String,System.String,System.Single)
  - AutoCheck.Core.Script{{T}}.CancelQuestion
  - AutoCheck.Core.Script{{T}}.CloseQuestion(System.String)
  - AutoCheck.Core.Script{{T}}.EvalQuestion
  - AutoCheck.Core.Script{{T}}.EvalQuestion(System.Collections.Generic.List{System.String})
  - AutoCheck.Core.Script{{T}}.PrintScore
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ScriptGDrive(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T)
  name.vb: ScriptGDrive(Of T)
- uid: AutoCheck.Core.ScriptGDrive`1.Secret
  commentId: P:AutoCheck.Core.ScriptGDrive`1.Secret
  id: Secret
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: Secret
  nameWithType: ScriptGDrive<T>.Secret
  fullName: AutoCheck.Core.ScriptGDrive<T>.Secret
  type: Property
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Secret
    path: ../core/ScriptGDrive.cs
    startLine: 35
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThe json file (client_secret.json) containing the credentials needed to communicate with the Google Drive&apos;s API.\n"
  example: []
  syntax:
    content: protected string Secret { get; set; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Protected Property Secret As String
  overload: AutoCheck.Core.ScriptGDrive`1.Secret*
  nameWithType.vb: ScriptGDrive(Of T).Secret
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).Secret
- uid: AutoCheck.Core.ScriptGDrive`1.Username
  commentId: P:AutoCheck.Core.ScriptGDrive`1.Username
  id: Username
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: Username
  nameWithType: ScriptGDrive<T>.Username
  fullName: AutoCheck.Core.ScriptGDrive<T>.Username
  type: Property
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: Username
    path: ../core/ScriptGDrive.cs
    startLine: 41
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nThe Google Drive&apos;s API account\n"
  example: []
  syntax:
    content: protected string Username { get; set; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Protected Property Username As String
  overload: AutoCheck.Core.ScriptGDrive`1.Username*
  nameWithType.vb: ScriptGDrive(Of T).Username
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).Username
- uid: AutoCheck.Core.ScriptGDrive`1.GDriveFolder
  commentId: P:AutoCheck.Core.ScriptGDrive`1.GDriveFolder
  id: GDriveFolder
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: GDriveFolder
  nameWithType: ScriptGDrive<T>.GDriveFolder
  fullName: AutoCheck.Core.ScriptGDrive<T>.GDriveFolder
  type: Property
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: GDriveFolder
    path: ../core/ScriptGDrive.cs
    startLine: 43
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  syntax:
    content: protected string GDriveFolder { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected ReadOnly Property GDriveFolder As String
  overload: AutoCheck.Core.ScriptGDrive`1.GDriveFolder*
  nameWithType.vb: ScriptGDrive(Of T).GDriveFolder
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).GDriveFolder
- uid: AutoCheck.Core.ScriptGDrive`1.#ctor(System.String[])
  commentId: M:AutoCheck.Core.ScriptGDrive`1.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: ScriptGDrive(String[])
  nameWithType: ScriptGDrive<T>.ScriptGDrive(String[])
  fullName: AutoCheck.Core.ScriptGDrive<T>.ScriptGDrive(System.String[])
  type: Constructor
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/ScriptGDrive.cs
    startLine: 50
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nCreates a new script instance.\n"
  example: []
  syntax:
    content: public ScriptGDrive(string[] args)
    parameters:
    - id: args
      type: System.String[]
      description: Argument list, loaded from the command line, on which one will be stored into its equivalent local property.
    content.vb: Public Sub New(args As String())
  overload: AutoCheck.Core.ScriptGDrive`1.#ctor*
  nameWithType.vb: ScriptGDrive(Of T).ScriptGDrive(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).ScriptGDrive(System.String())
  name.vb: ScriptGDrive(String())
- uid: AutoCheck.Core.ScriptGDrive`1.DefaultArguments
  commentId: M:AutoCheck.Core.ScriptGDrive`1.DefaultArguments
  id: DefaultArguments
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: DefaultArguments()
  nameWithType: ScriptGDrive<T>.DefaultArguments()
  fullName: AutoCheck.Core.ScriptGDrive<T>.DefaultArguments()
  type: Method
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: DefaultArguments
    path: ../core/ScriptGDrive.cs
    startLine: 56
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  summary: "\nSets up the default arguments values, can be overwrited if custom arguments are needed.\n"
  example: []
  syntax:
    content: protected override void DefaultArguments()
    content.vb: Protected Overrides Sub DefaultArguments
  overridden: AutoCheck.Core.ScriptFiles{{T}}.DefaultArguments
  overload: AutoCheck.Core.ScriptGDrive`1.DefaultArguments*
  nameWithType.vb: ScriptGDrive(Of T).DefaultArguments()
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).DefaultArguments()
- uid: AutoCheck.Core.ScriptGDrive`1.SetUp
  commentId: M:AutoCheck.Core.ScriptGDrive`1.SetUp
  id: SetUp
  parent: AutoCheck.Core.ScriptGDrive`1
  langs:
  - csharp
  - vb
  name: SetUp()
  nameWithType: ScriptGDrive<T>.SetUp()
  fullName: AutoCheck.Core.ScriptGDrive<T>.SetUp()
  type: Method
  source:
    remote:
      path: core/ScriptGDrive.cs
      branch: UnitTest
      repo: https://github.com/FherStk/AutoCheck.git
    id: SetUp
    path: ../core/ScriptGDrive.cs
    startLine: 70
  assemblies:
  - AutoCheck
  namespace: AutoCheck.Core
  syntax:
    content: protected override void SetUp()
    content.vb: Protected Overrides Sub SetUp
  overridden: AutoCheck.Core.Script{{T}}.SetUp
  overload: AutoCheck.Core.ScriptGDrive`1.SetUp*
  nameWithType.vb: ScriptGDrive(Of T).SetUp()
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).SetUp()
references:
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Script{{T}}
  commentId: T:AutoCheck.Core.Script{`0}
  parent: AutoCheck.Core
  definition: AutoCheck.Core.Script`1
  name: Script<T>
  nameWithType: Script<T>
  fullName: AutoCheck.Core.Script<T>
  nameWithType.vb: Script(Of T)
  fullName.vb: AutoCheck.Core.Script(Of T)
  name.vb: Script(Of T)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1
    name: Script
    nameWithType: Script
    fullName: AutoCheck.Core.Script
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoCheck.Core.Script`1
    name: Script
    nameWithType: Script
    fullName: AutoCheck.Core.Script
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptFiles{{T}}
  commentId: T:AutoCheck.Core.ScriptFiles{`0}
  parent: AutoCheck.Core
  definition: AutoCheck.Core.ScriptFiles`1
  name: ScriptFiles<T>
  nameWithType: ScriptFiles<T>
  fullName: AutoCheck.Core.ScriptFiles<T>
  nameWithType.vb: ScriptFiles(Of T)
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T)
  name.vb: ScriptFiles(Of T)
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1
    name: ScriptFiles
    nameWithType: ScriptFiles
    fullName: AutoCheck.Core.ScriptFiles
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1
    name: ScriptFiles
    nameWithType: ScriptFiles
    fullName: AutoCheck.Core.ScriptFiles
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptFiles{{T}}.Student
  commentId: P:AutoCheck.Core.ScriptFiles{`0}.Student
  parent: AutoCheck.Core.ScriptFiles{{T}}
  definition: AutoCheck.Core.ScriptFiles`1.Student
  name: Student
  nameWithType: ScriptFiles<T>.Student
  fullName: AutoCheck.Core.ScriptFiles<T>.Student
  nameWithType.vb: ScriptFiles(Of T).Student
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).Student
- uid: AutoCheck.Core.ScriptFiles{{T}}.Run
  commentId: M:AutoCheck.Core.ScriptFiles{`0}.Run
  parent: AutoCheck.Core.ScriptFiles{{T}}
  definition: AutoCheck.Core.ScriptFiles`1.Run
  name: Run()
  nameWithType: ScriptFiles<T>.Run()
  fullName: AutoCheck.Core.ScriptFiles<T>.Run()
  nameWithType.vb: ScriptFiles(Of T).Run()
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).Run()
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1.Run
    name: Run
    nameWithType: ScriptFiles<T>.Run
    fullName: AutoCheck.Core.ScriptFiles<T>.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1.Run
    name: Run
    nameWithType: ScriptFiles(Of T).Run
    fullName: AutoCheck.Core.ScriptFiles(Of T).Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.Path
  commentId: P:AutoCheck.Core.Script{`0}.Path
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.Path
  name: Path
  nameWithType: Script<T>.Path
  fullName: AutoCheck.Core.Script<T>.Path
  nameWithType.vb: Script(Of T).Path
  fullName.vb: AutoCheck.Core.Script(Of T).Path
- uid: AutoCheck.Core.Script{{T}}.CpThresh
  commentId: P:AutoCheck.Core.Script{`0}.CpThresh
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.CpThresh
  name: CpThresh
  nameWithType: Script<T>.CpThresh
  fullName: AutoCheck.Core.Script<T>.CpThresh
  nameWithType.vb: Script(Of T).CpThresh
  fullName.vb: AutoCheck.Core.Script(Of T).CpThresh
- uid: AutoCheck.Core.Script{{T}}.MaxScore
  commentId: P:AutoCheck.Core.Script{`0}.MaxScore
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.MaxScore
  name: MaxScore
  nameWithType: Script<T>.MaxScore
  fullName: AutoCheck.Core.Script<T>.MaxScore
  nameWithType.vb: Script(Of T).MaxScore
  fullName.vb: AutoCheck.Core.Script(Of T).MaxScore
- uid: AutoCheck.Core.Script{{T}}.Score
  commentId: P:AutoCheck.Core.Script{`0}.Score
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.Score
  name: Score
  nameWithType: Script<T>.Score
  fullName: AutoCheck.Core.Script<T>.Score
  nameWithType.vb: Script(Of T).Score
  fullName.vb: AutoCheck.Core.Script(Of T).Score
- uid: AutoCheck.Core.Script{{T}}.IsQuestionOpen
  commentId: P:AutoCheck.Core.Script{`0}.IsQuestionOpen
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.IsQuestionOpen
  name: IsQuestionOpen
  nameWithType: Script<T>.IsQuestionOpen
  fullName: AutoCheck.Core.Script<T>.IsQuestionOpen
  nameWithType.vb: Script(Of T).IsQuestionOpen
  fullName.vb: AutoCheck.Core.Script(Of T).IsQuestionOpen
- uid: AutoCheck.Core.Script{{T}}.Batch
  commentId: M:AutoCheck.Core.Script{`0}.Batch
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.Batch
  name: Batch()
  nameWithType: Script<T>.Batch()
  fullName: AutoCheck.Core.Script<T>.Batch()
  nameWithType.vb: Script(Of T).Batch()
  fullName.vb: AutoCheck.Core.Script(Of T).Batch()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.Batch
    name: Batch
    nameWithType: Script<T>.Batch
    fullName: AutoCheck.Core.Script<T>.Batch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.Batch
    name: Batch
    nameWithType: Script(Of T).Batch
    fullName: AutoCheck.Core.Script(Of T).Batch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.OpenQuestion(System.String,System.Single)
  commentId: M:AutoCheck.Core.Script{`0}.OpenQuestion(System.String,System.Single)
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  name: OpenQuestion(String, Single)
  nameWithType: Script<T>.OpenQuestion(String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.Single)
  nameWithType.vb: Script(Of T).OpenQuestion(String, Single)
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.Single)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script<T>.OpenQuestion
    fullName: AutoCheck.Core.Script<T>.OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script(Of T).OpenQuestion
    fullName: AutoCheck.Core.Script(Of T).OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.OpenQuestion(System.String,System.String,System.Single)
  commentId: M:AutoCheck.Core.Script{`0}.OpenQuestion(System.String,System.String,System.Single)
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  name: OpenQuestion(String, String, Single)
  nameWithType: Script<T>.OpenQuestion(String, String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.String, System.Single)
  nameWithType.vb: Script(Of T).OpenQuestion(String, String, Single)
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.String, System.Single)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script<T>.OpenQuestion
    fullName: AutoCheck.Core.Script<T>.OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script(Of T).OpenQuestion
    fullName: AutoCheck.Core.Script(Of T).OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.CancelQuestion
  commentId: M:AutoCheck.Core.Script{`0}.CancelQuestion
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.CancelQuestion
  name: CancelQuestion()
  nameWithType: Script<T>.CancelQuestion()
  fullName: AutoCheck.Core.Script<T>.CancelQuestion()
  nameWithType.vb: Script(Of T).CancelQuestion()
  fullName.vb: AutoCheck.Core.Script(Of T).CancelQuestion()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.CancelQuestion
    name: CancelQuestion
    nameWithType: Script<T>.CancelQuestion
    fullName: AutoCheck.Core.Script<T>.CancelQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.CancelQuestion
    name: CancelQuestion
    nameWithType: Script(Of T).CancelQuestion
    fullName: AutoCheck.Core.Script(Of T).CancelQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.CloseQuestion(System.String)
  commentId: M:AutoCheck.Core.Script{`0}.CloseQuestion(System.String)
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.CloseQuestion(System.String)
  name: CloseQuestion(String)
  nameWithType: Script<T>.CloseQuestion(String)
  fullName: AutoCheck.Core.Script<T>.CloseQuestion(System.String)
  nameWithType.vb: Script(Of T).CloseQuestion(String)
  fullName.vb: AutoCheck.Core.Script(Of T).CloseQuestion(System.String)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
    name: CloseQuestion
    nameWithType: Script<T>.CloseQuestion
    fullName: AutoCheck.Core.Script<T>.CloseQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
    name: CloseQuestion
    nameWithType: Script(Of T).CloseQuestion
    fullName: AutoCheck.Core.Script(Of T).CloseQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.EvalQuestion
  commentId: M:AutoCheck.Core.Script{`0}.EvalQuestion
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.EvalQuestion
  name: EvalQuestion()
  nameWithType: Script<T>.EvalQuestion()
  fullName: AutoCheck.Core.Script<T>.EvalQuestion()
  nameWithType.vb: Script(Of T).EvalQuestion()
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.EvalQuestion
    name: EvalQuestion
    nameWithType: Script<T>.EvalQuestion
    fullName: AutoCheck.Core.Script<T>.EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.EvalQuestion
    name: EvalQuestion
    nameWithType: Script(Of T).EvalQuestion
    fullName: AutoCheck.Core.Script(Of T).EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.EvalQuestion(System.Collections.Generic.List{System.String})
  commentId: M:AutoCheck.Core.Script{`0}.EvalQuestion(System.Collections.Generic.List{System.String})
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  name: EvalQuestion(List<String>)
  nameWithType: Script<T>.EvalQuestion(List<String>)
  fullName: AutoCheck.Core.Script<T>.EvalQuestion(System.Collections.Generic.List<System.String>)
  nameWithType.vb: Script(Of T).EvalQuestion(List(Of String))
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion(System.Collections.Generic.List(Of System.String))
  name.vb: EvalQuestion(List(Of String))
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
    name: EvalQuestion
    nameWithType: Script<T>.EvalQuestion
    fullName: AutoCheck.Core.Script<T>.EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
    name: EvalQuestion
    nameWithType: Script(Of T).EvalQuestion
    fullName: AutoCheck.Core.Script(Of T).EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.PrintScore
  commentId: M:AutoCheck.Core.Script{`0}.PrintScore
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.PrintScore
  name: PrintScore()
  nameWithType: Script<T>.PrintScore()
  fullName: AutoCheck.Core.Script<T>.PrintScore()
  nameWithType.vb: Script(Of T).PrintScore()
  fullName.vb: AutoCheck.Core.Script(Of T).PrintScore()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.PrintScore
    name: PrintScore
    nameWithType: Script<T>.PrintScore
    fullName: AutoCheck.Core.Script<T>.PrintScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.PrintScore
    name: PrintScore
    nameWithType: Script(Of T).PrintScore
    fullName: AutoCheck.Core.Script(Of T).PrintScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core.Script`1
  commentId: T:AutoCheck.Core.Script`1
  name: Script<T>
  nameWithType: Script<T>
  fullName: AutoCheck.Core.Script<T>
  nameWithType.vb: Script(Of T)
  fullName.vb: AutoCheck.Core.Script(Of T)
  name.vb: Script(Of T)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1
    name: Script
    nameWithType: Script
    fullName: AutoCheck.Core.Script
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoCheck.Core.Script`1
    name: Script
    nameWithType: Script
    fullName: AutoCheck.Core.Script
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptFiles`1
  commentId: T:AutoCheck.Core.ScriptFiles`1
  name: ScriptFiles<T>
  nameWithType: ScriptFiles<T>
  fullName: AutoCheck.Core.ScriptFiles<T>
  nameWithType.vb: ScriptFiles(Of T)
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T)
  name.vb: ScriptFiles(Of T)
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1
    name: ScriptFiles
    nameWithType: ScriptFiles
    fullName: AutoCheck.Core.ScriptFiles
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1
    name: ScriptFiles
    nameWithType: ScriptFiles
    fullName: AutoCheck.Core.ScriptFiles
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptFiles`1.Student
  commentId: P:AutoCheck.Core.ScriptFiles`1.Student
  name: Student
  nameWithType: ScriptFiles<T>.Student
  fullName: AutoCheck.Core.ScriptFiles<T>.Student
  nameWithType.vb: ScriptFiles(Of T).Student
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).Student
- uid: AutoCheck.Core.ScriptFiles`1.Run
  commentId: M:AutoCheck.Core.ScriptFiles`1.Run
  name: Run()
  nameWithType: ScriptFiles<T>.Run()
  fullName: AutoCheck.Core.ScriptFiles<T>.Run()
  nameWithType.vb: ScriptFiles(Of T).Run()
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).Run()
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1.Run
    name: Run
    nameWithType: ScriptFiles<T>.Run
    fullName: AutoCheck.Core.ScriptFiles<T>.Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1.Run
    name: Run
    nameWithType: ScriptFiles(Of T).Run
    fullName: AutoCheck.Core.ScriptFiles(Of T).Run
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.Path
  commentId: P:AutoCheck.Core.Script`1.Path
  name: Path
  nameWithType: Script<T>.Path
  fullName: AutoCheck.Core.Script<T>.Path
  nameWithType.vb: Script(Of T).Path
  fullName.vb: AutoCheck.Core.Script(Of T).Path
- uid: AutoCheck.Core.Script`1.CpThresh
  commentId: P:AutoCheck.Core.Script`1.CpThresh
  name: CpThresh
  nameWithType: Script<T>.CpThresh
  fullName: AutoCheck.Core.Script<T>.CpThresh
  nameWithType.vb: Script(Of T).CpThresh
  fullName.vb: AutoCheck.Core.Script(Of T).CpThresh
- uid: AutoCheck.Core.Script`1.MaxScore
  commentId: P:AutoCheck.Core.Script`1.MaxScore
  name: MaxScore
  nameWithType: Script<T>.MaxScore
  fullName: AutoCheck.Core.Script<T>.MaxScore
  nameWithType.vb: Script(Of T).MaxScore
  fullName.vb: AutoCheck.Core.Script(Of T).MaxScore
- uid: AutoCheck.Core.Script`1.Score
  commentId: P:AutoCheck.Core.Script`1.Score
  name: Score
  nameWithType: Script<T>.Score
  fullName: AutoCheck.Core.Script<T>.Score
  nameWithType.vb: Script(Of T).Score
  fullName.vb: AutoCheck.Core.Script(Of T).Score
- uid: AutoCheck.Core.Script`1.IsQuestionOpen
  commentId: P:AutoCheck.Core.Script`1.IsQuestionOpen
  name: IsQuestionOpen
  nameWithType: Script<T>.IsQuestionOpen
  fullName: AutoCheck.Core.Script<T>.IsQuestionOpen
  nameWithType.vb: Script(Of T).IsQuestionOpen
  fullName.vb: AutoCheck.Core.Script(Of T).IsQuestionOpen
- uid: AutoCheck.Core.Script`1.Batch
  commentId: M:AutoCheck.Core.Script`1.Batch
  name: Batch()
  nameWithType: Script<T>.Batch()
  fullName: AutoCheck.Core.Script<T>.Batch()
  nameWithType.vb: Script(Of T).Batch()
  fullName.vb: AutoCheck.Core.Script(Of T).Batch()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.Batch
    name: Batch
    nameWithType: Script<T>.Batch
    fullName: AutoCheck.Core.Script<T>.Batch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.Batch
    name: Batch
    nameWithType: Script(Of T).Batch
    fullName: AutoCheck.Core.Script(Of T).Batch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  commentId: M:AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
  isExternal: true
  name: OpenQuestion(String, Single)
  nameWithType: Script<T>.OpenQuestion(String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.Single)
  nameWithType.vb: Script(Of T).OpenQuestion(String, Single)
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.Single)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script<T>.OpenQuestion
    fullName: AutoCheck.Core.Script<T>.OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script(Of T).OpenQuestion
    fullName: AutoCheck.Core.Script(Of T).OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  commentId: M:AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
  isExternal: true
  name: OpenQuestion(String, String, Single)
  nameWithType: Script<T>.OpenQuestion(String, String, Single)
  fullName: AutoCheck.Core.Script<T>.OpenQuestion(System.String, System.String, System.Single)
  nameWithType.vb: Script(Of T).OpenQuestion(String, String, Single)
  fullName.vb: AutoCheck.Core.Script(Of T).OpenQuestion(System.String, System.String, System.Single)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script<T>.OpenQuestion
    fullName: AutoCheck.Core.Script<T>.OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.OpenQuestion(System.String,System.String,System.Single)
    name: OpenQuestion
    nameWithType: Script(Of T).OpenQuestion
    fullName: AutoCheck.Core.Script(Of T).OpenQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.CancelQuestion
  commentId: M:AutoCheck.Core.Script`1.CancelQuestion
  name: CancelQuestion()
  nameWithType: Script<T>.CancelQuestion()
  fullName: AutoCheck.Core.Script<T>.CancelQuestion()
  nameWithType.vb: Script(Of T).CancelQuestion()
  fullName.vb: AutoCheck.Core.Script(Of T).CancelQuestion()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.CancelQuestion
    name: CancelQuestion
    nameWithType: Script<T>.CancelQuestion
    fullName: AutoCheck.Core.Script<T>.CancelQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.CancelQuestion
    name: CancelQuestion
    nameWithType: Script(Of T).CancelQuestion
    fullName: AutoCheck.Core.Script(Of T).CancelQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
  commentId: M:AutoCheck.Core.Script`1.CloseQuestion(System.String)
  isExternal: true
  name: CloseQuestion(String)
  nameWithType: Script<T>.CloseQuestion(String)
  fullName: AutoCheck.Core.Script<T>.CloseQuestion(System.String)
  nameWithType.vb: Script(Of T).CloseQuestion(String)
  fullName.vb: AutoCheck.Core.Script(Of T).CloseQuestion(System.String)
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
    name: CloseQuestion
    nameWithType: Script<T>.CloseQuestion
    fullName: AutoCheck.Core.Script<T>.CloseQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.CloseQuestion(System.String)
    name: CloseQuestion
    nameWithType: Script(Of T).CloseQuestion
    fullName: AutoCheck.Core.Script(Of T).CloseQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.EvalQuestion
  commentId: M:AutoCheck.Core.Script`1.EvalQuestion
  name: EvalQuestion()
  nameWithType: Script<T>.EvalQuestion()
  fullName: AutoCheck.Core.Script<T>.EvalQuestion()
  nameWithType.vb: Script(Of T).EvalQuestion()
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.EvalQuestion
    name: EvalQuestion
    nameWithType: Script<T>.EvalQuestion
    fullName: AutoCheck.Core.Script<T>.EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.EvalQuestion
    name: EvalQuestion
    nameWithType: Script(Of T).EvalQuestion
    fullName: AutoCheck.Core.Script(Of T).EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  commentId: M:AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
  isExternal: true
  name: EvalQuestion(List<String>)
  nameWithType: Script<T>.EvalQuestion(List<String>)
  fullName: AutoCheck.Core.Script<T>.EvalQuestion(System.Collections.Generic.List<System.String>)
  nameWithType.vb: Script(Of T).EvalQuestion(List(Of String))
  fullName.vb: AutoCheck.Core.Script(Of T).EvalQuestion(System.Collections.Generic.List(Of System.String))
  name.vb: EvalQuestion(List(Of String))
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
    name: EvalQuestion
    nameWithType: Script<T>.EvalQuestion
    fullName: AutoCheck.Core.Script<T>.EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.EvalQuestion(System.Collections.Generic.List{System.String})
    name: EvalQuestion
    nameWithType: Script(Of T).EvalQuestion
    fullName: AutoCheck.Core.Script(Of T).EvalQuestion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script`1.PrintScore
  commentId: M:AutoCheck.Core.Script`1.PrintScore
  name: PrintScore()
  nameWithType: Script<T>.PrintScore()
  fullName: AutoCheck.Core.Script<T>.PrintScore()
  nameWithType.vb: Script(Of T).PrintScore()
  fullName.vb: AutoCheck.Core.Script(Of T).PrintScore()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.PrintScore
    name: PrintScore
    nameWithType: Script<T>.PrintScore
    fullName: AutoCheck.Core.Script<T>.PrintScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.PrintScore
    name: PrintScore
    nameWithType: Script(Of T).PrintScore
    fullName: AutoCheck.Core.Script(Of T).PrintScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptGDrive`1.Secret*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.Secret
  name: Secret
  nameWithType: ScriptGDrive<T>.Secret
  fullName: AutoCheck.Core.ScriptGDrive<T>.Secret
  nameWithType.vb: ScriptGDrive(Of T).Secret
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).Secret
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.ScriptGDrive`1.Username*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.Username
  name: Username
  nameWithType: ScriptGDrive<T>.Username
  fullName: AutoCheck.Core.ScriptGDrive<T>.Username
  nameWithType.vb: ScriptGDrive(Of T).Username
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).Username
- uid: AutoCheck.Core.ScriptGDrive`1.GDriveFolder*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.GDriveFolder
  name: GDriveFolder
  nameWithType: ScriptGDrive<T>.GDriveFolder
  fullName: AutoCheck.Core.ScriptGDrive<T>.GDriveFolder
  nameWithType.vb: ScriptGDrive(Of T).GDriveFolder
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).GDriveFolder
- uid: AutoCheck.Core.ScriptGDrive`1.#ctor*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.#ctor
  name: ScriptGDrive
  nameWithType: ScriptGDrive<T>.ScriptGDrive
  fullName: AutoCheck.Core.ScriptGDrive<T>.ScriptGDrive
  nameWithType.vb: ScriptGDrive(Of T).ScriptGDrive
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).ScriptGDrive
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.ScriptFiles{{T}}.DefaultArguments
  commentId: M:AutoCheck.Core.ScriptFiles{`0}.DefaultArguments
  parent: AutoCheck.Core.ScriptFiles{{T}}
  definition: AutoCheck.Core.ScriptFiles`1.DefaultArguments
  name: DefaultArguments()
  nameWithType: ScriptFiles<T>.DefaultArguments()
  fullName: AutoCheck.Core.ScriptFiles<T>.DefaultArguments()
  nameWithType.vb: ScriptFiles(Of T).DefaultArguments()
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).DefaultArguments()
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1.DefaultArguments
    name: DefaultArguments
    nameWithType: ScriptFiles<T>.DefaultArguments
    fullName: AutoCheck.Core.ScriptFiles<T>.DefaultArguments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1.DefaultArguments
    name: DefaultArguments
    nameWithType: ScriptFiles(Of T).DefaultArguments
    fullName: AutoCheck.Core.ScriptFiles(Of T).DefaultArguments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptGDrive`1.DefaultArguments*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.DefaultArguments
  name: DefaultArguments
  nameWithType: ScriptGDrive<T>.DefaultArguments
  fullName: AutoCheck.Core.ScriptGDrive<T>.DefaultArguments
  nameWithType.vb: ScriptGDrive(Of T).DefaultArguments
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).DefaultArguments
- uid: AutoCheck.Core.ScriptFiles`1.DefaultArguments
  commentId: M:AutoCheck.Core.ScriptFiles`1.DefaultArguments
  name: DefaultArguments()
  nameWithType: ScriptFiles<T>.DefaultArguments()
  fullName: AutoCheck.Core.ScriptFiles<T>.DefaultArguments()
  nameWithType.vb: ScriptFiles(Of T).DefaultArguments()
  fullName.vb: AutoCheck.Core.ScriptFiles(Of T).DefaultArguments()
  spec.csharp:
  - uid: AutoCheck.Core.ScriptFiles`1.DefaultArguments
    name: DefaultArguments
    nameWithType: ScriptFiles<T>.DefaultArguments
    fullName: AutoCheck.Core.ScriptFiles<T>.DefaultArguments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.ScriptFiles`1.DefaultArguments
    name: DefaultArguments
    nameWithType: ScriptFiles(Of T).DefaultArguments
    fullName: AutoCheck.Core.ScriptFiles(Of T).DefaultArguments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Script{{T}}.SetUp
  commentId: M:AutoCheck.Core.Script{`0}.SetUp
  parent: AutoCheck.Core.Script{{T}}
  definition: AutoCheck.Core.Script`1.SetUp
  name: SetUp()
  nameWithType: Script<T>.SetUp()
  fullName: AutoCheck.Core.Script<T>.SetUp()
  nameWithType.vb: Script(Of T).SetUp()
  fullName.vb: AutoCheck.Core.Script(Of T).SetUp()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.SetUp
    name: SetUp
    nameWithType: Script<T>.SetUp
    fullName: AutoCheck.Core.Script<T>.SetUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.SetUp
    name: SetUp
    nameWithType: Script(Of T).SetUp
    fullName: AutoCheck.Core.Script(Of T).SetUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.ScriptGDrive`1.SetUp*
  commentId: Overload:AutoCheck.Core.ScriptGDrive`1.SetUp
  name: SetUp
  nameWithType: ScriptGDrive<T>.SetUp
  fullName: AutoCheck.Core.ScriptGDrive<T>.SetUp
  nameWithType.vb: ScriptGDrive(Of T).SetUp
  fullName.vb: AutoCheck.Core.ScriptGDrive(Of T).SetUp
- uid: AutoCheck.Core.Script`1.SetUp
  commentId: M:AutoCheck.Core.Script`1.SetUp
  name: SetUp()
  nameWithType: Script<T>.SetUp()
  fullName: AutoCheck.Core.Script<T>.SetUp()
  nameWithType.vb: Script(Of T).SetUp()
  fullName.vb: AutoCheck.Core.Script(Of T).SetUp()
  spec.csharp:
  - uid: AutoCheck.Core.Script`1.SetUp
    name: SetUp
    nameWithType: Script<T>.SetUp
    fullName: AutoCheck.Core.Script<T>.SetUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Script`1.SetUp
    name: SetUp
    nameWithType: Script(Of T).SetUp
    fullName: AutoCheck.Core.Script(Of T).SetUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
