### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Output
  commentId: T:AutoCheck.Core.Output
  id: Output
  parent: AutoCheck.Core
  children:
  - AutoCheck.Core.Output.#ctor(System.Boolean)
  - AutoCheck.Core.Output.BreakLine(System.Int32)
  - AutoCheck.Core.Output.CloseLog
  - AutoCheck.Core.Output.CurrentIndent
  - AutoCheck.Core.Output.GetLog
  - AutoCheck.Core.Output.Indent
  - AutoCheck.Core.Output.ResetIndent
  - AutoCheck.Core.Output.SendToTerminal(AutoCheck.Core.Output.Log)
  - AutoCheck.Core.Output.SingleIndent
  - AutoCheck.Core.Output.ToJson
  - AutoCheck.Core.Output.ToString
  - AutoCheck.Core.Output.UnIndent
  - AutoCheck.Core.Output.Write(System.String,AutoCheck.Core.Output.Style)
  - AutoCheck.Core.Output.WriteLine(System.String,AutoCheck.Core.Output.Style)
  - AutoCheck.Core.Output.WriteResponse(List{System.String},System.String,System.String)
  - AutoCheck.Core.Output.WriteResponse(System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: Output
  nameWithType: Output
  fullName: AutoCheck.Core.Output
  type: Class
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Output
    path: ../core/main/Output.cs
    startLine: 34
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nThis class is in charge of writing the output into the terminal.    \n"
  remarks: Should be a singletone but cannot be due testing...
  example: []
  syntax:
    content: 'public class Output : object'
    content.vb: >-
      Public Class Output
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - AutoCheck.Core.Output.ObjectExtensions.DeepClone``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Output.SingleIndent
  commentId: F:AutoCheck.Core.Output.SingleIndent
  id: SingleIndent
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: SingleIndent
  nameWithType: Output.SingleIndent
  fullName: AutoCheck.Core.Output.SingleIndent
  type: Field
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: SingleIndent
    path: ../core/main/Output.cs
    startLine: 115
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  syntax:
    content: public const string SingleIndent = null
    return:
      type: System.String
    content.vb: Public Const SingleIndent As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: AutoCheck.Core.Output.CurrentIndent
  commentId: P:AutoCheck.Core.Output.CurrentIndent
  id: CurrentIndent
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: CurrentIndent
  nameWithType: Output.CurrentIndent
  fullName: AutoCheck.Core.Output.CurrentIndent
  type: Property
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: CurrentIndent
    path: ../core/main/Output.cs
    startLine: 117
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  syntax:
    content: public string CurrentIndent { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CurrentIndent As String
  overload: AutoCheck.Core.Output.CurrentIndent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Output.#ctor(System.Boolean)
  commentId: M:AutoCheck.Core.Output.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: Output(Boolean)
  nameWithType: Output.Output(Boolean)
  fullName: AutoCheck.Core.Output.Output(System.Boolean)
  type: Constructor
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/main/Output.cs
    startLine: 132
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nCreates the new Output instance\n"
  example: []
  syntax:
    content: public Output(bool redirectToTerminal = false)
    parameters:
    - id: redirectToTerminal
      type: System.Boolean
      description: When enabled, every log entry will be send to the terminal
    content.vb: Public Sub New(redirectToTerminal As Boolean = False)
  overload: AutoCheck.Core.Output.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.Write(System.String,AutoCheck.Core.Output.Style)
  commentId: M:AutoCheck.Core.Output.Write(System.String,AutoCheck.Core.Output.Style)
  id: Write(System.String,AutoCheck.Core.Output.Style)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: Write(String, Output.Style)
  nameWithType: Output.Write(String, Output.Style)
  fullName: AutoCheck.Core.Output.Write(System.String, AutoCheck.Core.Output.Style)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Write
    path: ../core/main/Output.cs
    startLine: 158
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nSend new text to the output, no breakline will be added to the end.\nThe text will be printed in gray, and everything between &apos;~&apos; symbols will be printed using a secondary color (or till the last &apos;:&apos; or &apos;...&apos; symbols).\n"
  example: []
  syntax:
    content: public void Write(string text, Output.Style style = Output.Style.DEFAULT)
    parameters:
    - id: text
      type: System.String
      description: The text to display
    - id: style
      type: AutoCheck.Core.Output.Style
      description: Which stuyle will be applied in order to print using colors.
    content.vb: Public Sub Write(text As String, style As Output.Style = Output.Style.DEFAULT)
  overload: AutoCheck.Core.Output.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.WriteLine(System.String,AutoCheck.Core.Output.Style)
  commentId: M:AutoCheck.Core.Output.WriteLine(System.String,AutoCheck.Core.Output.Style)
  id: WriteLine(System.String,AutoCheck.Core.Output.Style)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: WriteLine(String, Output.Style)
  nameWithType: Output.WriteLine(String, Output.Style)
  fullName: AutoCheck.Core.Output.WriteLine(System.String, AutoCheck.Core.Output.Style)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: WriteLine
    path: ../core/main/Output.cs
    startLine: 168
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nSend new text to the output, a breakline will be added to the end.\nThe text will be printed in gray, and everything between &apos;~&apos; symbols will be printed using a secondary color (or till the last &apos;:&apos; or &apos;...&apos; symbols).\n"
  example: []
  syntax:
    content: public void WriteLine(string text, Output.Style style = Output.Style.DEFAULT)
    parameters:
    - id: text
      type: System.String
      description: The text to display
    - id: style
      type: AutoCheck.Core.Output.Style
      description: Which stuyle will be applied in order to print using colors.
    content.vb: Public Sub WriteLine(text As String, style As Output.Style = Output.Style.DEFAULT)
  overload: AutoCheck.Core.Output.WriteLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.WriteResponse(List{System.String},System.String,System.String)
  commentId: M:AutoCheck.Core.Output.WriteResponse(List{System.String},System.String,System.String)
  id: WriteResponse(List{System.String},System.String,System.String)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: WriteResponse(List<String>, String, String)
  nameWithType: Output.WriteResponse(List<String>, String, String)
  fullName: AutoCheck.Core.Output.WriteResponse(List<System.String>, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: WriteResponse
    path: ../core/main/Output.cs
    startLine: 177
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nGiven a list of strings containing the errors found during a script execution (usually the return of a checker&apos;s method), the output will be as follows:\n&apos;OK&apos; in green if the errors list is empty; &apos;ERROR&apos; in red, followed by all the errors descriptions (as a list), otherwise.\n"
  example: []
  syntax:
    content: public void WriteResponse(List<string> errors = null, string captionOk = "OK", string captionError = "ERROR")
    parameters:
    - id: errors
      type: List{System.String}
      description: A list of errors, usually the return of a checker&apos;s method.
    - id: captionOk
      type: System.String
    - id: captionError
      type: System.String
    content.vb: Public Sub WriteResponse(errors As List(Of String) = Nothing, captionOk As String = "OK", captionError As String = "ERROR")
  overload: AutoCheck.Core.Output.WriteResponse*
  nameWithType.vb: Output.WriteResponse(List(Of String), String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: AutoCheck.Core.Output.WriteResponse(List(Of System.String), System.String, System.String)
  name.vb: WriteResponse(List(Of String), String, String)
- uid: AutoCheck.Core.Output.WriteResponse(System.String,System.String,System.String)
  commentId: M:AutoCheck.Core.Output.WriteResponse(System.String,System.String,System.String)
  id: WriteResponse(System.String,System.String,System.String)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: WriteResponse(String, String, String)
  nameWithType: Output.WriteResponse(String, String, String)
  fullName: AutoCheck.Core.Output.WriteResponse(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: WriteResponse
    path: ../core/main/Output.cs
    startLine: 193
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nGiven a string containing an error description, the output will be as follows:\n&apos;ERROR&apos; in red, followed by the errors description if the error is not empty; just &apos;ERROR&apos; in red otherwise.\n"
  example: []
  syntax:
    content: public void WriteResponse(string error, string captionOk = "OK", string captionError = "ERROR")
    parameters:
    - id: error
      type: System.String
    - id: captionOk
      type: System.String
    - id: captionError
      type: System.String
    content.vb: Public Sub WriteResponse(error As String, captionOk As String = "OK", captionError As String = "ERROR")
  overload: AutoCheck.Core.Output.WriteResponse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.Indent
  commentId: M:AutoCheck.Core.Output.Indent
  id: Indent
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: Indent()
  nameWithType: Output.Indent()
  fullName: AutoCheck.Core.Output.Indent()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: Indent
    path: ../core/main/Output.cs
    startLine: 200
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nAdds an indentation (3 whitespaces) to the output.\n"
  example: []
  syntax:
    content: public void Indent()
    content.vb: Public Sub Indent
  overload: AutoCheck.Core.Output.Indent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.UnIndent
  commentId: M:AutoCheck.Core.Output.UnIndent
  id: UnIndent
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: UnIndent()
  nameWithType: Output.UnIndent()
  fullName: AutoCheck.Core.Output.UnIndent()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: UnIndent
    path: ../core/main/Output.cs
    startLine: 207
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nRemoves an indentation (3 whitespaces) from the output.\n"
  example: []
  syntax:
    content: public void UnIndent()
    content.vb: Public Sub UnIndent
  overload: AutoCheck.Core.Output.UnIndent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.ResetIndent
  commentId: M:AutoCheck.Core.Output.ResetIndent
  id: ResetIndent
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: ResetIndent()
  nameWithType: Output.ResetIndent()
  fullName: AutoCheck.Core.Output.ResetIndent()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ResetIndent
    path: ../core/main/Output.cs
    startLine: 214
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nResets the output indentation.\n"
  example: []
  syntax:
    content: public void ResetIndent()
    content.vb: Public Sub ResetIndent
  overload: AutoCheck.Core.Output.ResetIndent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.BreakLine(System.Int32)
  commentId: M:AutoCheck.Core.Output.BreakLine(System.Int32)
  id: BreakLine(System.Int32)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: BreakLine(Int32)
  nameWithType: Output.BreakLine(Int32)
  fullName: AutoCheck.Core.Output.BreakLine(System.Int32)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: BreakLine
    path: ../core/main/Output.cs
    startLine: 223
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nWrites a set of breakline into the output.\n"
  example: []
  syntax:
    content: public void BreakLine(int lines = 1)
    parameters:
    - id: lines
      type: System.Int32
      description: The amount of breaklines.
    content.vb: Public Sub BreakLine(lines As Integer = 1)
  overload: AutoCheck.Core.Output.BreakLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.CloseLog
  commentId: M:AutoCheck.Core.Output.CloseLog
  id: CloseLog
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: CloseLog()
  nameWithType: Output.CloseLog()
  fullName: AutoCheck.Core.Output.CloseLog()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: CloseLog
    path: ../core/main/Output.cs
    startLine: 233
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nThe current log will be closed, so a new empty one will be ready to start logging again.\n"
  example: []
  syntax:
    content: public Output.Log CloseLog()
    return:
      type: AutoCheck.Core.Output.Log
      description: The closed log
    content.vb: Public Function CloseLog As Output.Log
  overload: AutoCheck.Core.Output.CloseLog*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.GetLog
  commentId: M:AutoCheck.Core.Output.GetLog
  id: GetLog
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: GetLog()
  nameWithType: Output.GetLog()
  fullName: AutoCheck.Core.Output.GetLog()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: GetLog
    path: ../core/main/Output.cs
    startLine: 245
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the complete log files for each batch (or single) execution (header + setup + script + teardown).\n"
  example: []
  syntax:
    content: public Output.Log[] GetLog()
    return:
      type: AutoCheck.Core.Output.Log[]
    content.vb: Public Function GetLog As Output.Log()
  overload: AutoCheck.Core.Output.GetLog*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.ToString
  commentId: M:AutoCheck.Core.Output.ToString
  id: ToString
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Output.ToString()
  fullName: AutoCheck.Core.Output.ToString()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ToString
    path: ../core/main/Output.cs
    startLine: 276
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the Output history as an string, using \\r\\n as breaklines.\n"
  example: []
  syntax:
    content: public string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToString As String
  overload: AutoCheck.Core.Output.ToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.ToJson
  commentId: M:AutoCheck.Core.Output.ToJson
  id: ToJson
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: ToJson()
  nameWithType: Output.ToJson()
  fullName: AutoCheck.Core.Output.ToJson()
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: ToJson
    path: ../core/main/Output.cs
    startLine: 284
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nReturns the Output history as an string, using \\r\\n as breaklines.\n"
  example: []
  syntax:
    content: public string ToJson()
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToJson As String
  overload: AutoCheck.Core.Output.ToJson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Output.SendToTerminal(AutoCheck.Core.Output.Log)
  commentId: M:AutoCheck.Core.Output.SendToTerminal(AutoCheck.Core.Output.Log)
  id: SendToTerminal(AutoCheck.Core.Output.Log)
  parent: AutoCheck.Core.Output
  langs:
  - csharp
  - vb
  name: SendToTerminal(Output.Log)
  nameWithType: Output.SendToTerminal(Output.Log)
  fullName: AutoCheck.Core.Output.SendToTerminal(AutoCheck.Core.Output.Log)
  type: Method
  source:
    remote:
      path: core/main/Output.cs
      branch: v2.13.0
      repo: https://github.com/FherStk/AutoCheck.git
    id: SendToTerminal
    path: ../core/main/Output.cs
    startLine: 292
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core
  summary: "\nSends the given log to the terminal.\n"
  example: []
  syntax:
    content: public void SendToTerminal(Output.Log log)
    parameters:
    - id: log
      type: AutoCheck.Core.Output.Log
      description: The log to print.
    content.vb: Public Sub SendToTerminal(log As Output.Log)
  overload: AutoCheck.Core.Output.SendToTerminal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Core
  commentId: N:AutoCheck.Core
  name: AutoCheck.Core
  nameWithType: AutoCheck.Core
  fullName: AutoCheck.Core
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Output.ObjectExtensions.DeepClone``1
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  parent: ObjectExtensions
  definition: ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<Output>()
  nameWithType: ObjectExtensions.DeepClone<Output>()
  fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Output>()
  nameWithType.vb: ObjectExtensions.DeepClone(Of Output)()
  fullName.vb: ObjectExtensions.DeepClone(Of AutoCheck.Core.Output)()
  name.vb: DeepClone(Of Output)()
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone<Output>
    nameWithType: ObjectExtensions.DeepClone<Output>
    fullName: ObjectExtensions.DeepClone<AutoCheck.Core.Output>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1
    name: DeepClone(Of Output)
    nameWithType: ObjectExtensions.DeepClone(Of Output)
    fullName: ObjectExtensions.DeepClone(Of AutoCheck.Core.Output)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions.DeepClone``1(``0)
  commentId: M:ObjectExtensions.DeepClone``1(``0)
  name: DeepClone<T>(T)
  nameWithType: ObjectExtensions.DeepClone<T>(T)
  fullName: ObjectExtensions.DeepClone<T>(T)
  nameWithType.vb: ObjectExtensions.DeepClone(Of T)(T)
  fullName.vb: ObjectExtensions.DeepClone(Of T)(T)
  name.vb: DeepClone(Of T)(T)
  spec.csharp:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone<T>
    nameWithType: ObjectExtensions.DeepClone<T>
    fullName: ObjectExtensions.DeepClone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: ObjectExtensions.DeepClone``1(``0)
    name: DeepClone(Of T)
    nameWithType: ObjectExtensions.DeepClone(Of T)
    fullName: ObjectExtensions.DeepClone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ObjectExtensions
  commentId: T:ObjectExtensions
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: ObjectExtensions
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AutoCheck.Core.Output.CurrentIndent*
  commentId: Overload:AutoCheck.Core.Output.CurrentIndent
  name: CurrentIndent
  nameWithType: Output.CurrentIndent
  fullName: AutoCheck.Core.Output.CurrentIndent
- uid: AutoCheck.Core.Output.#ctor*
  commentId: Overload:AutoCheck.Core.Output.#ctor
  name: Output
  nameWithType: Output.Output
  fullName: AutoCheck.Core.Output.Output
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Core.Output.Write*
  commentId: Overload:AutoCheck.Core.Output.Write
  name: Write
  nameWithType: Output.Write
  fullName: AutoCheck.Core.Output.Write
- uid: AutoCheck.Core.Output.Style
  commentId: T:AutoCheck.Core.Output.Style
  parent: AutoCheck.Core
  name: Output.Style
  nameWithType: Output.Style
  fullName: AutoCheck.Core.Output.Style
- uid: AutoCheck.Core.Output.WriteLine*
  commentId: Overload:AutoCheck.Core.Output.WriteLine
  name: WriteLine
  nameWithType: Output.WriteLine
  fullName: AutoCheck.Core.Output.WriteLine
- uid: AutoCheck.Core.Output.WriteResponse*
  commentId: Overload:AutoCheck.Core.Output.WriteResponse
  name: WriteResponse
  nameWithType: Output.WriteResponse
  fullName: AutoCheck.Core.Output.WriteResponse
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Output.Indent*
  commentId: Overload:AutoCheck.Core.Output.Indent
  name: Indent
  nameWithType: Output.Indent
  fullName: AutoCheck.Core.Output.Indent
- uid: AutoCheck.Core.Output.UnIndent*
  commentId: Overload:AutoCheck.Core.Output.UnIndent
  name: UnIndent
  nameWithType: Output.UnIndent
  fullName: AutoCheck.Core.Output.UnIndent
- uid: AutoCheck.Core.Output.ResetIndent*
  commentId: Overload:AutoCheck.Core.Output.ResetIndent
  name: ResetIndent
  nameWithType: Output.ResetIndent
  fullName: AutoCheck.Core.Output.ResetIndent
- uid: AutoCheck.Core.Output.BreakLine*
  commentId: Overload:AutoCheck.Core.Output.BreakLine
  name: BreakLine
  nameWithType: Output.BreakLine
  fullName: AutoCheck.Core.Output.BreakLine
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Output.CloseLog*
  commentId: Overload:AutoCheck.Core.Output.CloseLog
  name: CloseLog
  nameWithType: Output.CloseLog
  fullName: AutoCheck.Core.Output.CloseLog
- uid: AutoCheck.Core.Output.Log
  commentId: T:AutoCheck.Core.Output.Log
  parent: AutoCheck.Core
  name: Output.Log
  nameWithType: Output.Log
  fullName: AutoCheck.Core.Output.Log
- uid: AutoCheck.Core.Output.GetLog*
  commentId: Overload:AutoCheck.Core.Output.GetLog
  name: GetLog
  nameWithType: Output.GetLog
  fullName: AutoCheck.Core.Output.GetLog
- uid: AutoCheck.Core.Output.Log[]
  isExternal: true
  name: Output.Log[]
  nameWithType: Output.Log[]
  fullName: AutoCheck.Core.Output.Log[]
  nameWithType.vb: Output.Log()
  fullName.vb: AutoCheck.Core.Output.Log()
  name.vb: Output.Log()
  spec.csharp:
  - uid: AutoCheck.Core.Output.Log
    name: Output.Log
    nameWithType: Output.Log
    fullName: AutoCheck.Core.Output.Log
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: AutoCheck.Core.Output.Log
    name: Output.Log
    nameWithType: Output.Log
    fullName: AutoCheck.Core.Output.Log
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.Output.ToString*
  commentId: Overload:AutoCheck.Core.Output.ToString
  name: ToString
  nameWithType: Output.ToString
  fullName: AutoCheck.Core.Output.ToString
- uid: AutoCheck.Core.Output.ToJson*
  commentId: Overload:AutoCheck.Core.Output.ToJson
  name: ToJson
  nameWithType: Output.ToJson
  fullName: AutoCheck.Core.Output.ToJson
- uid: AutoCheck.Core.Output.SendToTerminal*
  commentId: Overload:AutoCheck.Core.Output.SendToTerminal
  name: SendToTerminal
  nameWithType: Output.SendToTerminal
  fullName: AutoCheck.Core.Output.SendToTerminal
