### YamlMime:ManagedReference
items:
- uid: AutoCheck.Core.Connectors.Xml
  commentId: T:AutoCheck.Core.Connectors.Xml
  id: Xml
  parent: AutoCheck.Core.Connectors
  children:
  - AutoCheck.Core.Connectors.Xml.#ctor(System.String,System.String,System.Xml.ValidationType)
  - AutoCheck.Core.Connectors.Xml.Comments
  - AutoCheck.Core.Connectors.Xml.CountNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  - AutoCheck.Core.Connectors.Xml.CountNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  - AutoCheck.Core.Connectors.Xml.Dispose
  - AutoCheck.Core.Connectors.Xml.Equals(AutoCheck.Core.Connectors.Xml,System.Boolean)
  - AutoCheck.Core.Connectors.Xml.Equals(System.Xml.XmlDocument,System.Boolean)
  - AutoCheck.Core.Connectors.Xml.SelectNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  - AutoCheck.Core.Connectors.Xml.SelectNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  - AutoCheck.Core.Connectors.Xml.XmlDoc
  langs:
  - csharp
  - vb
  name: Xml
  nameWithType: Xml
  fullName: AutoCheck.Core.Connectors.Xml
  type: Class
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: Xml
    path: ../core/connectors/Xml.cs
    startLine: 34
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nAllows in/out operations and/or data validations with XML files.\n"
  example: []
  syntax:
    content: 'public class Xml : Base, IDisposable'
    content.vb: >-
      Public Class Xml
          Inherits Base
          Implements IDisposable
  inheritance:
  - System.Object
  - AutoCheck.Core.Connectors.Base
  implements:
  - System.IDisposable
  inheritedMembers:
  - AutoCheck.Core.Connectors.Base.CurrentOS
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutoCheck.Core.Connectors.Xml.Comments
  commentId: P:AutoCheck.Core.Connectors.Xml.Comments
  id: Comments
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: Comments
  nameWithType: Xml.Comments
  fullName: AutoCheck.Core.Connectors.Xml.Comments
  type: Property
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: Comments
    path: ../core/connectors/Xml.cs
    startLine: 42
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  syntax:
    content: public string[] Comments { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Comments As String()
  overload: AutoCheck.Core.Connectors.Xml.Comments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.Xml.XmlDoc
  commentId: P:AutoCheck.Core.Connectors.Xml.XmlDoc
  id: XmlDoc
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: XmlDoc
  nameWithType: Xml.XmlDoc
  fullName: AutoCheck.Core.Connectors.Xml.XmlDoc
  type: Property
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: XmlDoc
    path: ../core/connectors/Xml.cs
    startLine: 48
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nThe XML document content.\n"
  example: []
  syntax:
    content: public XmlDocument XmlDoc { get; }
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: ''
    content.vb: Public ReadOnly Property XmlDoc As XmlDocument
  overload: AutoCheck.Core.Connectors.Xml.XmlDoc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: AutoCheck.Core.Connectors.Xml.#ctor(System.String,System.String,System.Xml.ValidationType)
  commentId: M:AutoCheck.Core.Connectors.Xml.#ctor(System.String,System.String,System.Xml.ValidationType)
  id: '#ctor(System.String,System.String,System.Xml.ValidationType)'
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: Xml(String, String, ValidationType)
  nameWithType: Xml.Xml(String, String, ValidationType)
  fullName: AutoCheck.Core.Connectors.Xml.Xml(System.String, System.String, System.Xml.ValidationType)
  type: Constructor
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: .ctor
    path: ../core/connectors/Xml.cs
    startLine: 57
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nCreates a new connector instance.\n"
  example: []
  syntax:
    content: public Xml(string folder, string file, ValidationType validation = ValidationType.None)
    parameters:
    - id: folder
      type: System.String
      description: The folder containing the files.
    - id: file
      type: System.String
      description: CSV file name.
    - id: validation
      type: System.Xml.ValidationType
    content.vb: Public Sub New(folder As String, file As String, validation As ValidationType = ValidationType.None)
  overload: AutoCheck.Core.Connectors.Xml.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.Dispose
  commentId: M:AutoCheck.Core.Connectors.Xml.Dispose
  id: Dispose
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Xml.Dispose()
  fullName: AutoCheck.Core.Connectors.Xml.Dispose()
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: Dispose
    path: ../core/connectors/Xml.cs
    startLine: 100
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nDisposes the object releasing its unmanaged properties.\n"
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  overridden: AutoCheck.Core.Connectors.Base.Dispose
  overload: AutoCheck.Core.Connectors.Xml.Dispose*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: AutoCheck.Core.Connectors.Xml.SelectNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  commentId: M:AutoCheck.Core.Connectors.Xml.SelectNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  id: SelectNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: SelectNodes(String, Xml.XmlNodeType)
  nameWithType: Xml.SelectNodes(String, Xml.XmlNodeType)
  fullName: AutoCheck.Core.Connectors.Xml.SelectNodes(System.String, AutoCheck.Core.Connectors.Xml.XmlNodeType)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectNodes
    path: ../core/connectors/Xml.cs
    startLine: 108
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRequests for a set of nodes.\n"
  example: []
  syntax:
    content: public List<XPathNavigator> SelectNodes(string xpath, Xml.XmlNodeType type = Xml.XmlNodeType.ALL)
    parameters:
    - id: xpath
      type: System.String
      description: XPath expression.
    - id: type
      type: AutoCheck.Core.Connectors.Xml.XmlNodeType
    return:
      type: System.Collections.Generic.List{System.Xml.XPath.XPathNavigator}
      description: A list of nodes.
    content.vb: Public Function SelectNodes(xpath As String, type As Xml.XmlNodeType = Xml.XmlNodeType.ALL) As List(Of XPathNavigator)
  overload: AutoCheck.Core.Connectors.Xml.SelectNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.SelectNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  commentId: M:AutoCheck.Core.Connectors.Xml.SelectNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  id: SelectNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: SelectNodes(XmlNode, String, Xml.XmlNodeType)
  nameWithType: Xml.SelectNodes(XmlNode, String, Xml.XmlNodeType)
  fullName: AutoCheck.Core.Connectors.Xml.SelectNodes(System.Xml.XmlNode, System.String, AutoCheck.Core.Connectors.Xml.XmlNodeType)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: SelectNodes
    path: ../core/connectors/Xml.cs
    startLine: 118
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRequests for a set of nodes.\n"
  example: []
  syntax:
    content: public List<XPathNavigator> SelectNodes(XmlNode root, string xpath, Xml.XmlNodeType type = Xml.XmlNodeType.ALL)
    parameters:
    - id: root
      type: System.Xml.XmlNode
      description: Root node from where the XPath expression will be evaluated.
    - id: xpath
      type: System.String
      description: XPath expression.
    - id: type
      type: AutoCheck.Core.Connectors.Xml.XmlNodeType
    return:
      type: System.Collections.Generic.List{System.Xml.XPath.XPathNavigator}
      description: A list of nodes.
    content.vb: Public Function SelectNodes(root As XmlNode, xpath As String, type As Xml.XmlNodeType = Xml.XmlNodeType.ALL) As List(Of XPathNavigator)
  overload: AutoCheck.Core.Connectors.Xml.SelectNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.CountNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  commentId: M:AutoCheck.Core.Connectors.Xml.CountNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  id: CountNodes(System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: CountNodes(String, Xml.XmlNodeType)
  nameWithType: Xml.CountNodes(String, Xml.XmlNodeType)
  fullName: AutoCheck.Core.Connectors.Xml.CountNodes(System.String, AutoCheck.Core.Connectors.Xml.XmlNodeType)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountNodes
    path: ../core/connectors/Xml.cs
    startLine: 169
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRequests for the amount of nodes.\n"
  example: []
  syntax:
    content: public int CountNodes(string xpath, Xml.XmlNodeType type = Xml.XmlNodeType.ALL)
    parameters:
    - id: xpath
      type: System.String
      description: XPath expression.
    - id: type
      type: AutoCheck.Core.Connectors.Xml.XmlNodeType
    return:
      type: System.Int32
      description: The amount of nodes.
    content.vb: Public Function CountNodes(xpath As String, type As Xml.XmlNodeType = Xml.XmlNodeType.ALL) As Integer
  overload: AutoCheck.Core.Connectors.Xml.CountNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.CountNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  commentId: M:AutoCheck.Core.Connectors.Xml.CountNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  id: CountNodes(System.Xml.XmlNode,System.String,AutoCheck.Core.Connectors.Xml.XmlNodeType)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: CountNodes(XmlNode, String, Xml.XmlNodeType)
  nameWithType: Xml.CountNodes(XmlNode, String, Xml.XmlNodeType)
  fullName: AutoCheck.Core.Connectors.Xml.CountNodes(System.Xml.XmlNode, System.String, AutoCheck.Core.Connectors.Xml.XmlNodeType)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: CountNodes
    path: ../core/connectors/Xml.cs
    startLine: 179
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\nRequests for the amount of nodes.\n"
  example: []
  syntax:
    content: public int CountNodes(XmlNode root, string xpath, Xml.XmlNodeType type = Xml.XmlNodeType.ALL)
    parameters:
    - id: root
      type: System.Xml.XmlNode
      description: Root node from where the XPath expression will be evaluated.
    - id: xpath
      type: System.String
      description: XPath expression.
    - id: type
      type: AutoCheck.Core.Connectors.Xml.XmlNodeType
    return:
      type: System.Int32
      description: The amount of nodes.
    content.vb: Public Function CountNodes(root As XmlNode, xpath As String, type As Xml.XmlNodeType = Xml.XmlNodeType.ALL) As Integer
  overload: AutoCheck.Core.Connectors.Xml.CountNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.Equals(System.Xml.XmlDocument,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.Xml.Equals(System.Xml.XmlDocument,System.Boolean)
  id: Equals(System.Xml.XmlDocument,System.Boolean)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: Equals(XmlDocument, Boolean)
  nameWithType: Xml.Equals(XmlDocument, Boolean)
  fullName: AutoCheck.Core.Connectors.Xml.Equals(System.Xml.XmlDocument, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: Equals
    path: ../core/connectors/Xml.cs
    startLine: 188
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Equals(XmlDocument xmlDoc, bool ignoreSchema = true)
    parameters:
    - id: xmlDoc
      type: System.Xml.XmlDocument
      description: ''
    - id: ignoreSchema
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(xmlDoc As XmlDocument, ignoreSchema As Boolean = True) As Boolean
  overload: AutoCheck.Core.Connectors.Xml.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: AutoCheck.Core.Connectors.Xml.Equals(AutoCheck.Core.Connectors.Xml,System.Boolean)
  commentId: M:AutoCheck.Core.Connectors.Xml.Equals(AutoCheck.Core.Connectors.Xml,System.Boolean)
  id: Equals(AutoCheck.Core.Connectors.Xml,System.Boolean)
  parent: AutoCheck.Core.Connectors.Xml
  langs:
  - csharp
  - vb
  name: Equals(Xml, Boolean)
  nameWithType: Xml.Equals(Xml, Boolean)
  fullName: AutoCheck.Core.Connectors.Xml.Equals(AutoCheck.Core.Connectors.Xml, System.Boolean)
  type: Method
  source:
    remote:
      path: core/connectors/Xml.cs
      branch: PreForCopyDetector
      repo: https://github.com/FherStk/AutoCheck.git
    id: Equals
    path: ../core/connectors/Xml.cs
    startLine: 197
  assemblies:
  - AutoCheck.Core
  namespace: AutoCheck.Core.Connectors
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Equals(Xml xmlConn, bool ignoreSchema = true)
    parameters:
    - id: xmlConn
      type: AutoCheck.Core.Connectors.Xml
    - id: ignoreSchema
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(xmlConn As Xml, ignoreSchema As Boolean = True) As Boolean
  overload: AutoCheck.Core.Connectors.Xml.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: AutoCheck.Core.Connectors
  commentId: N:AutoCheck.Core.Connectors
  name: AutoCheck.Core.Connectors
  nameWithType: AutoCheck.Core.Connectors
  fullName: AutoCheck.Core.Connectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: AutoCheck.Core.Connectors.Base
  commentId: T:AutoCheck.Core.Connectors.Base
  parent: AutoCheck.Core.Connectors
  name: Base
  nameWithType: Base
  fullName: AutoCheck.Core.Connectors.Base
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: AutoCheck.Core.Connectors.Base.CurrentOS
  commentId: P:AutoCheck.Core.Connectors.Base.CurrentOS
  parent: AutoCheck.Core.Connectors.Base
  name: CurrentOS
  nameWithType: Base.CurrentOS
  fullName: AutoCheck.Core.Connectors.Base.CurrentOS
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: AutoCheck.Core.Connectors.Xml.Comments*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.Comments
  name: Comments
  nameWithType: Xml.Comments
  fullName: AutoCheck.Core.Connectors.Xml.Comments
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: AutoCheck.Core.Connectors.Xml.XmlDoc*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.XmlDoc
  name: XmlDoc
  nameWithType: Xml.XmlDoc
  fullName: AutoCheck.Core.Connectors.Xml.XmlDoc
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  parent: System.Xml
  isExternal: true
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: AutoCheck.Core.Connectors.Xml.#ctor*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.#ctor
  name: Xml
  nameWithType: Xml.Xml
  fullName: AutoCheck.Core.Connectors.Xml.Xml
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.ValidationType
  commentId: T:System.Xml.ValidationType
  parent: System.Xml
  isExternal: true
  name: ValidationType
  nameWithType: ValidationType
  fullName: System.Xml.ValidationType
- uid: AutoCheck.Core.Connectors.Base.Dispose
  commentId: M:AutoCheck.Core.Connectors.Base.Dispose
  parent: AutoCheck.Core.Connectors.Base
  name: Dispose()
  nameWithType: Base.Dispose()
  fullName: AutoCheck.Core.Connectors.Base.Dispose()
  spec.csharp:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: AutoCheck.Core.Connectors.Base.Dispose
    name: Dispose
    nameWithType: Base.Dispose
    fullName: AutoCheck.Core.Connectors.Base.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoCheck.Core.Connectors.Xml.Dispose*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.Dispose
  name: Dispose
  nameWithType: Xml.Dispose
  fullName: AutoCheck.Core.Connectors.Xml.Dispose
- uid: AutoCheck.Core.Connectors.Xml.SelectNodes*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.SelectNodes
  name: SelectNodes
  nameWithType: Xml.SelectNodes
  fullName: AutoCheck.Core.Connectors.Xml.SelectNodes
- uid: AutoCheck.Core.Connectors.Xml.XmlNodeType
  commentId: T:AutoCheck.Core.Connectors.Xml.XmlNodeType
  parent: AutoCheck.Core.Connectors
  name: Xml.XmlNodeType
  nameWithType: Xml.XmlNodeType
  fullName: AutoCheck.Core.Connectors.Xml.XmlNodeType
- uid: System.Collections.Generic.List{System.Xml.XPath.XPathNavigator}
  commentId: T:System.Collections.Generic.List{System.Xml.XPath.XPathNavigator}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<XPathNavigator>
  nameWithType: List<XPathNavigator>
  fullName: System.Collections.Generic.List<System.Xml.XPath.XPathNavigator>
  nameWithType.vb: List(Of XPathNavigator)
  fullName.vb: System.Collections.Generic.List(Of System.Xml.XPath.XPathNavigator)
  name.vb: List(Of XPathNavigator)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.XPath.XPathNavigator
    name: XPathNavigator
    nameWithType: XPathNavigator
    fullName: System.Xml.XPath.XPathNavigator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  parent: System.Xml
  isExternal: true
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: AutoCheck.Core.Connectors.Xml.CountNodes*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.CountNodes
  name: CountNodes
  nameWithType: Xml.CountNodes
  fullName: AutoCheck.Core.Connectors.Xml.CountNodes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: AutoCheck.Core.Connectors.Xml.Equals*
  commentId: Overload:AutoCheck.Core.Connectors.Xml.Equals
  name: Equals
  nameWithType: Xml.Equals
  fullName: AutoCheck.Core.Connectors.Xml.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: AutoCheck.Core.Connectors.Xml
  commentId: T:AutoCheck.Core.Connectors.Xml
  parent: AutoCheck.Core.Connectors
  name: Xml
  nameWithType: Xml
  fullName: AutoCheck.Core.Connectors.Xml
