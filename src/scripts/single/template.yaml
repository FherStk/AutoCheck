#TODO: complete documentation with DocFX, commands and combination will be specidied as postgres documentation does (same syntax)
#SINGLE: Used to run a script over a single target

name: "USER FRIENDLY NAME"  #DEFAULT = "Current file's name": This script name will be displayed to the user (if needed).
folder: "PATH"              #DEFAULT = "Current file's folder": Where the local data is stored in order to unzip, restore a db...
inherits: "NONE"            #DEFAULT = "NONE": Any script can inherit from any other and overwrite whatever it needs.

vars:   #OPTIONAL: Custom global vars can be defined here and refered later as $VARNAME, allowing regex and string formatters.
  #Predefined vars that can be used when needed: 
  #   $SCRIPT_NAME:       The current script name. 
  #   $EXECUTION_FOLDER:  The current script execution folder. 
  #   $CURRENT_FOLDER:    The current script folder for single-typed scripts (the same as "folder"); can change during the execution for batch-typed scripts with the folder used to extract, restore a database, etc.
  #   $CURRENT_FILE:      The current script file for single-typed scripts; can change during the execution for batch-typed scripts with the file used to extract, restore a database, etc.
  #   $CURRENT_QUESTION:  The current question (and subquestion) number (1, 2, 2.1, etc.)
  #   $CURRENT_SCORE:     The current question (and subquestion) score.
  #   $MAX_SCORE:         The maximum score available.
  #   $TOTAL_SCORE:       The computed total score, it will be updated for each question close.
  #   $RESULT:            Last run command result.
  #   $NOW:               The current datetime.  

  #Custom example vars:
  #   var1: "VALUE1"
  #   var1: "This is a sample text including {$VAR1} and also {$VAR2}"
  #   var3: "{#regex$VARNAME}"
  #   var4: !!bool False
  #   varN: #Any previous combinations

  #Scopes:
  #   Vars can be setup within different scopes, and its life-time will be linked with its scope; 
  #   var1:  "Value1.1" #Declares a var1 within the current scope
  #   $var1: "Value1.2" #Does not declares but updates var1 value on the first predecesor scope where the var has been found.
  #   When requesting a var value (for example: {$var1}) the scope-nearest one will be retreived, so shadowed vars will be not accessible (designed as is to reduce the scope logic complexity, simple workarounds can be used as store the value locally before shadowing or just use another var name to avoid shadowing).

pre:    #OPTIONAL: Defined blocks will be executed (in order) before the body.
  - extract:            #OPTIONAL: Extract a compressed file from "folder" (only zip is supported).
      file: "*"         #DEFAULT = "*.zip": Os file naming convetions allowed (name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove the original file when extracted.
      recursive: True   #DEFAULT = "False": Repeat through folders.

  - restore_db:         #OPTIONAL: Restores a database using an sql dump file from folder (only PostgreSQL is supported).
      file: "*"         #DEFAULT = "*.sql": Os file naming convetions allowed (name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove the original file when restored.
      recursive: True   #DEFAULT = "False": Repeat through folders.
      db_host: "DBHOST" #DEFAULT = "localhost": Host name or IP address.
      db_user: "DBUSER" #DEFAULT = "postgres": Postgre's username.
      db_pass: "DBPASS" #DEFAULT = "postgres": Postgre's password.
      db_name: "DBNAME" #DEFAULT = "$SCRIPT_NAME": Database name
      override: True    #DEFAULT = "False": Overrides the DB if exists.      

  - upload_gdrive:      #OPTIONAL: Uploads a file from "folder" to Google Drive.
      source: "*"       #DEFAULT = "*": Os file or folder naming convetions allowed (name, name.ext; *.ext; *); regex can be used also.
      remove: True      #DEFAULT = "False": Remove local files and folders when restored.
      recursive: True   #DEFAULT = "False": Repeat through folders    
      link: False       #DEFAULT = "False": A link to the source file will be extracted from within file's content
      copy: True        #DEFAULT = "True": The source file will be copied directly to gdrive (when possible) instead of downloaded and re-uploaded        
      username: "USER"  #MANDATORY: Username used to login into the own's Google Drive account.
      secret: "SECRET"  #DEFAULT = "config\\gdrive_secret.json": The "client_secret.json" file that will be used to login into the own's Google Drive account (it can be generated through the Google API Console services).
      remote_path: "\\" #DEFAULT = "\\AutoCheck\\scripts\\{$SCRIPT_NAME}\\": Where to upload the files; the remote folders will be created if needed and files, if no filename has been specified, will be auto-named using the original names when possible.
  
post:   #OPTIONAL: Defined blocks will be executed (in order) after the body; same blocks as "pre" are allowed.

body:   #MANDATORY: Script body
  - vars:                 #OPTIONAL: Same as vars defined within root level, but as local-scope vars; useful to store command results or other stuff.

  - connector:            #OPTIONAL: Defines a connector to use, it can be defined wherever inside the body (usually inside a question's content).
      type: "TYPE"        #DEFAULT = "LOCAL_SHELL": Connector to use.
      name: "NAME"        #DEFAULT = "TYPE": Name that will be used by a "run" to launch a connector's command.
      arguments: "ARGS"   #OPTIONAL: As terminal app will do (--arg1 val1 --arg2 val2 ... --argN valN); can be requested within the script as $CONNECTOR_NAME.ARGUMENT_NAME.
      #arguments:                            Also typed arguments list are allowed:
        #arg1: "Val1"           
        #arg2: !!bool True
        #arg3: !!int 27
        #...
        #argN: "ValN"
  
  - run:                          #OPTIONAL: Runs a command, it can be used wherever inside the body (usually inside a question's content).
      connector: "NAME"           #OPTIONAL: Which connector will be used to run the command. If no connector has been defined within this "run", the nearest within the scope will be looked for (and envelopping scopes recursively) and, if no connector is found, a "LOCALSHELL" one will be used.
      command: "COMMAND"          #MANDATORY: The command to run, the result will be stored as $RESULT; can be a shell command if no connector has been specified.
      arguments: "ARGS"           #OPTIONAL: Same as "connector" ones (also typed arguments list are allowed).      
      expected: "EXPECTED"        #OPTIONAL: Expected value from the run command, which can be variables, typed data (for example: True; 75.7; "Example"), a regular expression (for example: {#regex$VARNAME}) or even a SQL-like (for example: >=75.1; %substring%; %endwith; LIKE %{#regex$CURRENT_FOLDER}%). An exception will be thrown on mismatch. Warning: no AND/OR combinations still supported.

  - question:                     #OPTIONAL: Question to test; can be repeated.
      score: 1                    #DEFAULT = "1": Question socre, ignored if subquestions are used (question within question).
      caption: "CAPTION"          #DEFAULT = "Question {$CURRENT_QUESTION} [{$CURRENT_SCORE}]:": Question caption.
      description: "DESCRIPTION"  #OPTIONAL: Question description, it will be displayed after the question caption.
      content:                    #MANDATORY: What to test within the question., all must be ok to compute the score; cannot be mandatory due subquestion behaviour; can be repeated.            
        - vars:                   #OPTIONAL: Same as vars defined within "body", but as local-scope vars; useful to store command results or other stuff.
        - connector:              #OPTIONAL: A connector can be also defined here; see "connector" definition within "body".
        - question:               #OPTIONAL: A sub-question can also be defined here (parent score will be updated as the summary of its children); see "question" definition within "body".
        - run:                    #OPTIONAL: All the executed commands within a question's content must be ok (no execution errors and result matching the expected value) in order to compute the entire score.
            connector: "NAME"     #OPTIONAL:  See "connector" definition within "body"'s "run".
            command: "COMMAND"    #MANDATORY: See "connector" definition within "body"'s "run".
            arguments: "ARGS"     #OPTIONAL:  See "connector" definition within "body"'s "run".
            expected: "EXPECTED"  #OPTIONAL:  See "connector" definition within "body"'s "run" but the excpection is replaced by "success" and "error" messages.
            success: "OK"         #DEFAULT = "OK": Message displayed on success (expected value matches)
            error: "ERROR"        #DEFAULT = "ERROR\n{$RESULT}":  Message displayed on error (expected value mismatches).