# Copyright Â© 2022 Fernando Porrino Serrano
# Third party software licenses can be found at /docs/credits/credits.md

# This file is part of AutoCheck.

# AutoCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AutoCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with AutoCheck.  If not, see <https://www.gnu.org/licenses/>.

name: "ASIX - M02 (UF3): Permissions Assignment"
version: "1.3.0.0"

#TODO: permission reset should be performed ONLY when running on batch mode and ONLY when importing an SQL dump... When using directly over an existing BBDD, it should be just READ ONLY.

body:
  - connector:            
      type: "Postgres"        
      arguments: "--host {$CURRENT_HOST} --database {$DATABASE} --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"
  
  - question: 
      description: "This questions does not score"
      score: 0
      content:  
        - run: "echo dummy"   #dummy question, just for matching with the assignment rubric

  - question: 
      description: "Foreign key (I)"
      score: 0.5
      content:        
        - run:
            caption: "Checking foreign key 'empleats -> empleats'..."
            connector: "Postgres"
            command:  "ExistsForeignKey"      
            arguments: "--schemaFrom rrhh --tableFrom empleats --columnFrom id_cap --schemaTo rrhh --tableTo empleats --columnTo id"                  
            expected: True 

  - question: 
      description: "Foreign key (II)"
      score: 0.5
      content:        
        - run:
            caption: "Checking foreign key 'empleats -> departaments'..."
            connector: "Postgres"
            command:  "ExistsForeignKey"      
            arguments: "--schemaFrom rrhh --tableFrom empleats --columnFrom id_departament --schemaTo rrhh --tableTo departaments --columnTo id"                  
            expected: True

  - question: 
      description: "Privileges over 'empleats'"
      score: 1
      content:        
        - run:
            caption: "Checking new entries..."
            connector: "Postgres"
            command:  "ExecuteScalar"      
            arguments: --query "SELECT COUNT(id) FROM rrhh.empleats WHERE id > 9"
            expected: ">0"

        - run:
            caption: "Checking table privileges..."
            connector: "Postgres"
            command:  "GetTablePrivileges"      
            arguments: "--schema rrhh --table empleats --role rrhhadmin"
            expected: "%a%"

  - question: 
      description: "This questions does not score"
      score: 0
      content:
        - run: "echo dummy"   #dummy question, just for matching with the assignment rubric

  - question: 
      description: "Privileges over 'fabricacio'"
      score: 1
      content:        
        - run:
            caption: "Checking foreign key 'fabricacio -> fabriques'..."
            connector: "Postgres"
            command:  "ExistsForeignKey"      
            arguments: "--schemaFrom produccio --tableFrom fabricacio --columnFrom id_fabrica --schemaTo produccio --tableTo fabriques --columnTo id"                  
            expected: True

        - run:
            caption: "Checking foreign key 'fabricacio -> productes'..."
            connector: "Postgres"
            command:  "ExistsForeignKey"      
            arguments: "--schemaFrom produccio --tableFrom fabricacio --columnFrom id_producte --schemaTo produccio --tableTo productes --columnTo id"                  
            expected: True

        - run:
            caption: "Checking table privileges..."
            connector: "Postgres"
            command:  "GetTablePrivileges"      
            arguments: "--schema produccio --table productes --role prodadmin"
            expected: "%x%"
  
  - question: 
      description: "Privileges over 'fabriques'"
      score: 2
      content:        
        - run:
            caption: "Checking foreign key 'fabriques -> empleats'..."
            connector: "Postgres"
            command:  "ExistsForeignKey"      
            arguments: "--schemaFrom produccio --tableFrom fabriques --columnFrom id_responsable --schemaTo rrhh --tableTo empleats --columnTo id"                  
            expected: True

        - run:
            caption: "Checking schema privileges..."
            connector: "Postgres"
            command:  "GetSchemaPrivileges"      
            arguments: "--schema rrhh --role prodadmin"
            expected: "%U%"

        - run:
            caption: "Checking table privileges..."
            connector: "Postgres"
            command:  "GetTablePrivileges"      
            arguments: "--schema rrhh --table empleats --role prodadmin"
            expected: "%x%"

  - question: 
      description: "Privileges for rrhhadmin and prodadmin"
      score: 2
      content: 
        - question: 
            description: "Privileges for rrhhadmin"
            score: 1
            content:       
                - run:
                    caption: "Checking removed entries..."
                    connector: "Postgres"
                    command:  "ExecuteScalar"      
                    arguments: --query "SELECT COUNT(id) FROM rrhh.empleats WHERE id=9"
                    expected: "0"

                - run:
                    caption: "Checking 'rrhhadmin' privileges for the table 'empleats'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema rrhh --table empleats --role rrhhadmin"
                    expected: "arwxt"

                - run:
                    caption: "Checking 'rrhhadmin' privileges for the table 'departaments'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema rrhh --table departaments --role rrhhadmin"
                    expected: "arwxt"

        - question: 
            description: "Privileges for prodadmin"
            score: 1
            content:  
                - run:
                    caption: "Checking 'prodadmin' privileges for the table 'fabriques'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table fabriques --role prodadmin"
                    expected: "arwxt"

                - run:
                    caption: "Checking 'prodadmin' privileges for the table 'productes'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table productes --role prodadmin"
                    expected: "arwxt"

                - run:
                    caption: "Checking 'prodadmin' privileges for the table 'fabricacio'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table fabricacio --role prodadmin"
                    expected: "arwxt"

  - question: 
      description: "Privileges for dbadmin"
      content:  
        - question:       
            description: "Role membership"
            score: 1
            content:  
                - run:  
                    caption: "Checking dbadmin membership..."
                    connector: "Postgres"
                    command:  "GetMembership"      
                    arguments: "--item dbadmin"
                    expected: "[prodadmin,rrhhadmin]"
        
        - question:       
            description: "Role privileges"
            score: 2
            content:  
                - run:
                    caption: "Checking 'dbadmin' privileges for the table 'empleats'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema rrhh --table empleats --role dbadmin"
                    expected: "dD"

                - run:
                    caption: "Checking 'dbadmin' privileges for the table 'departaments'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema rrhh --table departaments --role dbadmin"
                    expected: "dD"

                - run:
                    caption: "Checking 'dbadmin' privileges for the table 'fabriques'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table fabriques --role dbadmin"
                    expected: "dD"

                - run:
                    caption: "Checking 'dbadmin' privileges for the table 'productes'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table productes --role dbadmin"
                    expected: "dD"

                - run:
                    caption: "Checking 'dbadmin' privileges for the table 'fabricacio'..."
                    connector: "Postgres"
                    command:  "GetTablePrivileges"      
                    arguments: "--schema produccio --table fabricacio --role dbadmin"
                    expected: "dD" 
