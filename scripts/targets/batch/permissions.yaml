# Copyright Â© 2022 Fernando Porrino Serrano
# Third party software licenses can be found at /docs/credits/credits.md

# This file is part of AutoCheck.

# AutoCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AutoCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with AutoCheck.  If not, see <https://www.gnu.org/licenses/>.

inherits: "../../templates/permissions.yaml"  

vars:
    student: ""

batch: 
    - caption: "Running on batch mode for ~{$CURRENT_FOLDER_NAME}:"       
    - concurrent: 1 #cannot run in parallel due permissions over users
    
    - local:                             
        - path: "{$APP_FOLDER_PATH}/../test/samples/private/permissions"
        - vars:
            current_host: "localhost"
            current_user: "postgres"
            current_password: "postgres"
            database: "empresa-permissions-{$STUDENT}"

    - copy_detector:            
        type: "SqlLog"
        file: "*.log"
        threshold: !!float 0.65    

    - setup:                
        - echo: "Extracting files at ~{$CURRENT_FOLDER_NAME}:"

        - run:            
            command:  "GetFile"
            arguments: "--path {$CURRENT_FOLDER_PATH} --file *.zip"
            store: "ZIP_FILE"                
            
        - connector:  
            type: "Compressed"                    
            arguments: "--filePath {$ZIP_FILE}"
        
        - run:
            connector: "TextStream"
            command: "FileName"
            arguments: "--path {$ZIP_FILE}"
            store: "filename"

        - run:   
            caption: "   Extracting the file ~{$FILENAME}... "
            connector: "Compressed"
            command: "Extract"
            onexception: "SUCCESS"
            arguments: 
                recursive: !!bool True

    - pre:
        - echo: ""
        - echo: "Restoring BBDD permissions:"                     

        - connector:            
            type: "Postgres"        
            arguments: "--host {$CURRENT_HOST} --database postgres --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"
        
        - run:
            caption: "   Dropping role rrhhadmin... "
            connector: "Postgres"
            command:  "DropRole"
            arguments: "--role rrhhadmin"
            onexception: "SUCCESS"

        - run: 
            caption: "   Dropping role prodadmin... "           
            connector: "Postgres"
            command:  "DropRole"
            arguments: "--role prodadmin"
            onexception: "SUCCESS"

        - run:   
            caption: "   Dropping role dbadmin... "         
            connector: "Postgres"
            command:  "DropRole"
            arguments: "--role dbadmin"
            onexception: "SUCCESS"

        - run:   
            caption: "   Dropping user it... "         
            connector: "Postgres"
            command:  "DropUser"
            arguments: "--user it"
            onexception: "SUCCESS"

        - run:   
            caption: "   Creating user it... "
            connector: "Postgres"
            command:  "CreateUser"
            arguments: "--user it"
            onexception: "SUCCESS"

        - run: 
            caption: "   Creating role rrhhadmin... "           
            connector: "Postgres"
            command:  "CreateRole"
            arguments: "--role rrhhadmin"
            onexception: "SUCCESS"

        - run:  
            caption: "   Creating role prodadmin... "          
            connector: "Postgres"
            command:  "CreateRole"
            arguments: "--role prodadmin"
            onexception: "SUCCESS"

        - run:  
            caption: "   Creating role dbadmin... "          
            connector: "Postgres"
            command:  "CreateRole"
            arguments: "--role dbadmin"
            onexception: "SUCCESS"        

        - echo: ""
        - echo: "Setting up SQL dump:"

        - run:
            caption: "Getting student name... "
            connector: "TextStream"
            command: "Substring"
            arguments: 
                content: "{$CURRENT_FOLDER_NAME}"
                regex: "^[^_]+(?=_)"
            store: "$STUDENT" 

        - run:
            caption: "Getting database name... "
            connector: "TextStream"
            command: "Replace"
            arguments: 
                content: "{$STUDENT}"
                replacement: "-"
                regex: \s
            store: "$STUDENT"  

        - run:            
            caption: "Looking for the SQL dump... "
            command:  "GetFile"
            arguments: "--path {$CURRENT_FOLDER_PATH} --file *.sql"
            store: "SQL_FILE"   

        - connector:
            type: "PlainText"
            arguments: "--filePath {$SQL_FILE}"       

        - run:  
            caption: "Replacing the database name... "  
            connector: "PlainText"      
            command:  "Replace"
            arguments: 
                replacement: "DATABASE {$DATABASE}"
                regex: DATABASE empresa

        - run:    
            caption: "Replacing the database connection... "  
            connector: "PlainText"      
            command:  "Replace"
            arguments: 
                replacement: "\\connect {$DATABASE}"
                regex: \\connect empresa
       
        - run:   
            caption: "Storing changes... "   
            connector: "PlainText"      
            command:  "Store"
            arguments: "--filePath {$SQL_FILE}"                

        - echo: ""
        - echo: "Importing SQL dump:"        

        - connector:            
            type: "Postgres"        
            arguments: "--host {$CURRENT_HOST} --database {$DATABASE} --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"

        - run:
            connector: "TextStream"
            command: "FileName"
            arguments: "--path {$SQL_FILE}"
            store: "filename"

        - run:
            caption: "   Restoring database ~{$DATABASE}~ using the file ~{$FILENAME}... "          
            connector: "Postgres"
            command:  "CreateDataBase"
            arguments: 
                dumpPath: "{$SQL_FILE}"
                replace: True            