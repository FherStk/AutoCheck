# Copyright Â© 2021 Fernando Porrino Serrano
# Third party software licenses can be found at /docs/credits/credits.md

# This file is part of AutoCheck.

# AutoCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AutoCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with AutoCheck.  If not, see <https://www.gnu.org/licenses/>.

inherits: "{$APP_FOLDER_PATH}\\..\\scripts\\templates\\permissions.yaml"  

vars:
  student: "{#^[^_]+(?=_)$CURRENT_FOLDER_NAME}"

batch: 
  - caption: "Running on batch mode for ~{$STUDENT}:"       
  - local:                             
      path: "{$APP_FOLDER_PATH}\\..\\test\\samples\\private\\permissions"            
      vars:
        current_host: "localhost"
        current_user: "postgres"
        current_password: "postgres"
        database: "empresa-{#^[^_]+(?=_)$STUDENT}"

  - copy_detector:            
      type: "TXT"
      file: "*.log"
      threshold: !!float 0.65    
   
  - pre:
      - echo: "Extracting files at: ~{$STUDENT}"

      - run:            
          command:  "GetFile"
          arguments: "--path {$CURRENT_FOLDER_PATH} --file *.zip"
          store: "ZIP_FILE"    
          
      - connector:  
          type: "Zip"                    
          arguments: "--filePath {$ZIP_FILE}"
      
      - run:   
          caption: "   Extracting the file ~{#([^\\\\]*)$$ZIP_FILE}... "
          connector: "Zip"
          command: "Extract"
          arguments: 
              recursive: !!bool True

      - echo: "Restoring BBDD permissions."

      - run:            
          command:  "GetFile"
          arguments: "--path {$CURRENT_FOLDER_PATH} --file *.sql"
          store: "SQL_FILE"    

      - connector:            
          type: "Postgres"        
          arguments: "--host {$CURRENT_HOST} --database {$DATABASE} --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"

      - run:            
          connector: "Postgres"
          command:  "DropRole"
          arguments: "--role rrhhAdmin"

      - run:            
          connector: "Postgres"
          command:  "DropRole"
          arguments: "--role prodAdmin"

      - run:            
          connector: "Postgres"
          command:  "DropRole"
          arguments: "--role dbAdmin"

      - run:            
          connector: "Postgres"
          command:  "DropUser"
          arguments: "--role it"

      - run:            
          connector: "Postgres"
          command:  "CreateUser"
          arguments: "--role it"

      - run:            
          connector: "Postgres"
          command:  "CreateRole"
          arguments: "--role rrhhAdmin"

      - run:            
          connector: "Postgres"
          command:  "CreateRole"
          arguments: "--role prodAdmin"

      - run:            
          connector: "Postgres"
          command:  "CreateRole"
          arguments: "--role dbAdmin"

      - echo: "Importing SQL dump."

      - run:            
          command:  "GetFile"
          arguments: "--path {$CURRENT_FOLDER_PATH} --file *.sql"
          store: "SQL_FILE"    

      - run:            
          connector: "Postgres"
          command:  "CreateDataBase"
          arguments: "--dumpPath {$SQL_FILE} --replace True"