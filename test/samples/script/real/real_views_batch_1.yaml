# Copyright Â© 2021 Fernando Porrino Serrano
# Third party software licenses can be found at /docs/credits/credits.md

# This file is part of AutoCheck.

# AutoCheck is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# AutoCheck is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with AutoCheck.  If not, see <https://www.gnu.org/licenses/>.

inherits: "{$APP_FOLDER_PATH}\\..\\scripts\\templates\\views.yaml"  

vars:
    student: "{$CURRENT_FOLDER_NAME}"

batch: 
    - caption: "Running on batch mode for ~{$STUDENT}:"       
    - local:                             
        - path: "{$APP_FOLDER_PATH}\\..\\test\\samples\\private\\views"            
        - vars:
            current_host: "localhost"
            current_user: "postgres"
            current_password: "postgres"
            database: "empresa-{$STUDENT}"

    - copy_detector:            
        type: "SqlLog"
        file: "*.log"
        threshold: !!float 0.65    

    - setup:
        - echo: "Extracting files at: ~{$STUDENT}"

        - run:            
            command:  "GetFile"
            arguments: "--path {$CURRENT_FOLDER_PATH} --file *.zip"
            store: "ZIP_FILE"                
            
        - connector:  
            type: "Zip"                    
            arguments: "--filePath {$ZIP_FILE}"
        
        - run:   
            caption: "   Extracting the file ~{#([^\\\\]*)$$ZIP_FILE}... "
            connector: "Zip"
            command: "Extract"
            onexception: "SUCCESS"
            arguments: 
                recursive: !!bool True

    - pre:
        - echo: ""
        - echo: "Restoring BBDD permissions."        

        - connector:            
            type: "Postgres"        
            arguments: "--host {$CURRENT_HOST} --database postgres --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"          

        - run:   
            caption: "   Dropping user it... "         
            connector: "Postgres"
            command:  "DropUser"
            arguments: "--user it"
            onexception: "SUCCESS"

        - run:   
            caption: "   Creating user it... "
            connector: "Postgres"
            command:  "CreateUser"
            arguments: "--user it"
            onexception: "SUCCESS"

        - echo: ""
        - echo: "Importing SQL dump."

        - run:            
            command:  "GetFile"
            arguments: "--path {$CURRENT_FOLDER_PATH} --file *.sql"
            store: "SQL_FILE"                
        
        - connector:            
            type: "Postgres"        
            arguments: "--host {$CURRENT_HOST} --database {$DATABASE} --username {$CURRENT_USER} --password {$CURRENT_PASSWORD}"

        - run:
            caption: "   Restoring database using the file: ~{#([^\\\\]*)$$SQL_FILE}... "          
            connector: "Postgres"
            command:  "CreateDataBase"
            onexception: "ABORT"
            arguments: 
                dumpPath: "{$SQL_FILE}"
                replace: True            